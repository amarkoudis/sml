1:from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, make_response, send_file
2:from config import app, get_mysql_connection
3:from werkzeug.security import check_password_hash, generate_password_hash
4:from datetime import datetime, timedelta, date, timezone
5:import pymysql
6:from werkzeug.utils import secure_filename
7:from flask_mail import Mail
8:from flask_mysqldb import MySQL
9:import secrets
10:from pymysql.cursors import DictCursor
11:from flask_wtf.csrf import CSRFProtect, generate_csrf
12:from flask_cors import CORS
13:import json
14:from functools import wraps
15:import random
16:import string
17:import decimal
18:import math
19:import os
20:import csv
21:from io import StringIO
22:from models.system_settings import ContributionSettings
23:import re
24:import uuid
25:import logging
26:import matplotlib
27:matplotlib.use('Agg')
28:import matplotlib.pyplot as plt
29:from matplotlib.colors import LinearSegmentedColormap
30:import numpy as np
31:import io
32:import base64
33:import pythoncom
34:from models.employee_revenue_report import EmployeeRevenueReport
35:
36:# Initialize Flask app
37:app = Flask(__name__)
38:
39:# Configure logging
40:logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
41:
42:# Set a strong secret key for the application
43:app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'your-default-secret-key')  # Change this to a secure random key
44:app.config['WTF_CSRF_ENABLED'] = True
45:app.config['WTF_CSRF_SECRET_KEY'] = app.config['SECRET_KEY']  # Use the same secret key
46:
47:# MySQL configurations - update with correct database name
48:app.config['MYSQL_HOST'] = 'localhost'
49:app.config['MYSQL_USER'] = 'root'
50:app.config['MYSQL_PASSWORD'] = 'V0sp0r0si968!'
51:app.config['MYSQL_DB'] = 'sml'  # Changed to the correct database name
52:
53:# Initialize MySQL
54:mysql = MySQL(app)
55:
56:# Secret key and other configurations
57:app.secret_key = '4256ccebf2245cc9e3651352e4540c16a42dade9250b9408e3dff75e40ddaa2d'
58:app.permanent_session_lifetime = timedelta(hours=5)
59:
60:# Initialize other extensions (CSRF, CORS, etc.)
61:csrf = CSRFProtect(app)
62:CORS(app)
63:
64:# Configure Flask-Mail
65:app.config['MAIL_SERVER'] = 'smtp.gmail.com'
66:app.config['MAIL_PORT'] = 587
67:app.config['MAIL_USE_TLS'] = True
68:app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', 'your-email@gmail.com')
69:app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', 'your-app-specific-password')
70:app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', 'your-email@gmail.com')
71:
72:mail = Mail(app)
73:
74:# Add a custom JSON encoder to handle Decimal objects and None values
75:class CustomJSONEncoder(json.JSONEncoder):
76:    def default(self, obj):
77:        if isinstance(obj, decimal.Decimal):
78:            return float(obj)
79:        elif obj is None:
80:            return ""
81:        elif obj == "undefined" or obj == "null":
82:            return ""
83:        return super(CustomJSONEncoder, self).default(obj)
84:
85:# Set the custom JSON encoder for Flask app
86:app.json_encoder = CustomJSONEncoder
87:
88:# Template filter to convert None to empty string
89:@app.template_filter('default_if_none')
90:def default_if_none(value, default_value=""):
91:    if value is None:
92:        return default_value
93:    return value
94:
95:# Template filter to safely convert to JSON
96:@app.template_filter('tojson_safe')
97:def tojson_safe(obj):
98:    def preprocess(item):
99:        if item is None:
100:            return ""
101:        elif isinstance(item, dict):
102:            return {k: preprocess(v) for k, v in item.items()}
103:        elif isinstance(item, list):
104:            return [preprocess(i) for i in item]
105:        elif isinstance(item, decimal.Decimal):
106:            return float(item)
107:        elif isinstance(item, (datetime, date)):
108:            return item.isoformat()
109:        else:
110:            return item
111:    
112:    processed = preprocess(obj)
113:    return json.dumps(processed)
114:
115:# Additional helper function to handle serialization
116:def safe_serialize(obj):
117:    """Convert object to JSON-serializable format, handling Null and other problematic values."""
118:    if obj is None:
119:        return ""
120:    elif isinstance(obj, dict):
121:        result = {}
122:        for k, v in obj.items():
123:            # For ID fields, ensure they're converted to integers where possible
124:            if k.lower().endswith('id') and isinstance(v, str) and v.isdigit():
125:                try:
126:                    result[k] = int(v)
127:                except ValueError:
128:                    result[k] = v
129:            # Handle common field names for roles
130:            elif k in ['role', 'employeerolename'] and v is None:
131:                result[k] = ""
132:            elif isinstance(v, (dict, list)):
133:                result[k] = safe_serialize(v)
134:            elif isinstance(v, decimal.Decimal):
135:                result[k] = float(v)
136:            elif isinstance(v, (datetime, date)):
137:                result[k] = v.isoformat()
138:            else:
139:                result[k] = v
140:        return result
141:    elif isinstance(obj, list):
142:        return [safe_serialize(i) for i in obj]
143:    elif isinstance(obj, decimal.Decimal):
144:        return float(obj)
145:    elif isinstance(obj, (datetime, date)):
146:        return obj.isoformat()
147:    else:
148:        return str(obj) if obj is not None else ""
149:
150:def generate_reset_token():
151:    """Generate a secure token for password reset."""
152:    return secrets.token_urlsafe(32)
153:
154:@app.route('/forgot-password', methods=['GET', 'POST'])
155:def forgot_password_request():
156:    if request.method == 'POST':
157:        email = request.form.get('email')
158:        
159:        try:
160:            conn = pymysql.connect(
161:                host='localhost',
162:                user='root',
163:                password='V0sp0r0si968!',
164:                database='sml',
165:                cursorclass=pymysql.cursors.DictCursor
166:            )
167:            
168:            with conn.cursor() as cursor:
169:                # Check if user exists
170:                cursor.execute('SELECT id, username FROM users WHERE email = %s', (email,))
171:                user = cursor.fetchone()
172:                
173:                if user:
174:                    # Generate reset token
175:                    token = generate_reset_token()
176:                    expiry = datetime.now() + timedelta(hours=1)
177:                    
178:                    # Store token in database
179:                    cursor.execute('''
180:                        INSERT INTO password_reset_tokens 
181:                        (user_id, token, expiry) 
182:                        VALUES (%s, %s, %s)
183:                    ''', (user['id'], token, expiry))
184:                    
185:                    conn.commit()
186:                    
187:                    # Send reset email
188:                    reset_url = url_for(
189:                        'reset_password_with_token',
190:                        token=token,
191:                        _external=True
192:                    )
193:                    
194:                    msg = Message(
195:                        'Password Reset Request',
196:                        recipients=[email]
197:                    )
198:                    msg.body = f'''To reset your password, visit the following link:
199:{reset_url}
200:
201:If you did not make this request, please ignore this email.
202:
203:This link will expire in 1 hour.
204:'''
205:                    mail.send(msg)
206:                    
207:                flash('If an account exists with that email, you will receive password reset instructions.', 'info')
208:                return redirect(url_for('login'))
209:                
210:        except Exception as e:
211:            flash(f'Error processing request: {str(e)}', 'error')
212:            
213:        finally:
214:            if 'conn' in locals():
215:                conn.close()
216:                
217:    return render_template('auth/forgot_password.html')
218:
219:@app.route('/reset-password/<token>', methods=['GET', 'POST'])
220:def reset_password_with_token(token):
221:    try:
222:        conn = pymysql.connect(
223:            host='localhost',
224:            user='root',
225:            password='V0sp0r0si968!',
226:            database='sml',
227:            cursorclass=pymysql.cursors.DictCursor
228:        )
229:        
230:        with conn.cursor() as cursor:
231:            # Verify token and get user
232:            cursor.execute('''
233:                SELECT t.user_id, u.username, u.email 
234:                FROM password_reset_tokens t
235:                JOIN users u ON t.user_id = u.id
236:                WHERE t.token = %s AND t.expiry > NOW() AND t.used = 0
237:            ''', (token,))
238:            
239:            result = cursor.fetchone()
240:            
241:            if not result:
242:                flash('Invalid or expired reset token.', 'error')
243:                return redirect(url_for('login'))
244:            
245:            if request.method == 'POST':
246:                password = request.form.get('password')
247:                confirm_password = request.form.get('confirm_password')
248:                
249:                if password != confirm_password:
250:                    flash('Passwords do not match.', 'error')
251:                    return render_template('auth/reset_password.html', token=token)
252:                
253:                # Update password and mark token as used
254:                cursor.execute('''
255:                    UPDATE users 
256:                    SET password = %s 
257:                    WHERE id = %s
258:                ''', (generate_password_hash(password), result['user_id']))
259:                
260:                cursor.execute('''
261:                    UPDATE password_reset_tokens 
262:                    SET used = 1 
263:                    WHERE token = %s
264:                ''', (token,))
265:                
266:                conn.commit()
267:                
268:                flash('Your password has been reset successfully.', 'success')
269:                return redirect(url_for('login'))
270:            
271:            return render_template('auth/reset_password.html', token=token)
272:            
273:    except Exception as e:
274:        flash(f'Error processing request: {str(e)}', 'error')
275:        return redirect(url_for('login'))
276:        
277:    finally:
278:        if 'conn' in locals():
279:            conn.close()
280:
281:# Add a custom JSON encoder to handle Decimal objects
282:class DecimalEncoder(json.JSONEncoder):
283:    def default(self, obj):
284:        if isinstance(obj, decimal.Decimal):
285:            return float(obj)
286:        return super(DecimalEncoder, self).default(obj)
287:
288:# Helper function to convert Decimal values to float in dictionaries
289:# while preserving exact string representations
290:def decimal_to_float(obj):
291:    if isinstance(obj, decimal.Decimal):
292:        return float(obj)
293:    elif isinstance(obj, dict):
294:        result = {}
295:        for k, v in obj.items():
296:            if isinstance(v, decimal.Decimal):
297:                # Store the exact string value
298:                result[f"{k}_exact"] = str(v)
299:                # Also store the float value
300:                result[k] = float(v)
301:            elif isinstance(v, dict) or isinstance(v, list):
302:                result[k] = decimal_to_float(v)
303:            else:
304:                result[k] = v
305:        return result
306:    elif isinstance(obj, list):
307:        return [decimal_to_float(item) for item in obj]
308:    return obj
309:
310:# Login required decorator
311:def login_required(f):
312:    @wraps(f)
313:    def decorated_function(*args, **kwargs):
314:        if not session.get('logged_in'):
315:            flash('Please log in first.', 'error')
316:            return redirect(url_for('login'))
317:        return f(*args, **kwargs)
318:    return decorated_function
319:
320:# Admin required decorator
321:def admin_required(f):
322:    @wraps(f)
323:    def decorated_function(*args, **kwargs):
324:        if session.get('role') != 'admin':
325:            flash('Access denied. Admin privileges required.', 'error')
326:            return redirect(url_for('home'))
327:        return f(*args, **kwargs)
328:    return decorated_function
329:
330:# Template context processor to make 'now' available globally
331:@app.context_processor
332:def inject_now():
333:    return {
334:        'now': datetime.now(timezone.utc),
335:        'csrf_token': generate_csrf()
336:    }
337:
338:@app.route('/')
339:@app.route('/login', methods=['GET', 'POST'])
340:def login():
341:    logging.info("Login route accessed.")
342:    if request.method == 'POST':
343:        username = request.form['username']
344:        password = request.form['password']
345:        
346:        connection = None
347:        try:
348:            connection = pymysql.connect(
349:                host='localhost',
350:                user='root',
351:                password='V0sp0r0si968!',
352:                database='sml',
353:                cursorclass=pymysql.cursors.DictCursor
354:            )
355:            if not connection:
356:                flash('Database connection error', 'error')
357:                return render_template('login.html')
358:                
359:            with connection.cursor() as cursor:
360:                cursor.execute('SELECT * FROM users WHERE username = %s', (username,))
361:                user = cursor.fetchone()
362:                
363:                if user and check_password_hash(user['password'], password):
364:                    session['logged_in'] = True
365:                    session['username'] = username
366:                    session['user_id'] = user['id']
367:                    session['role'] = user['role']
368:                    return redirect(url_for('home'))
369:                else:
370:                    flash('Invalid username or password', 'error')
371:        except Exception as e:
372:            flash(f'An error occurred: {str(e)}', 'error')
373:        finally:
374:            if connection:
375:                connection.close()
376:            
377:    return render_template('login.html')
378:
379:@app.route('/home')
380:@login_required
381:def home():
382:    logging.info("Home route accessed.")
383:    try:
384:        conn = pymysql.connect(
385:            host='localhost',
386:            user='root',
387:            password='V0sp0r0si968!',
388:            database='sml',
389:            cursorclass=pymysql.cursors.DictCursor
390:        )
391:        
392:        with conn.cursor() as cursor:
393:            # Get total counts
394:            cursor.execute('SELECT COUNT(*) as total FROM event')
395:            total_events = cursor.fetchone()['total']
396:            
397:            cursor.execute('SELECT COUNT(*) as total FROM customer')
398:            total_customers = cursor.fetchone()['total']
399:            
400:            cursor.execute('SELECT COUNT(*) as total FROM company')
401:            total_companies = cursor.fetchone()['total']
402:            
403:            cursor.execute('SELECT COUNT(*) as total FROM employee')
404:            total_employees = cursor.fetchone()['total']
405:            
406:            cursor.execute('SELECT COUNT(*) as total FROM invoice')
407:            total_invoices = cursor.fetchone()['total']
408:            
409:            # Get recent events with customer names
410:            cursor.execute('''
411:                SELECT 
412:                    e.EventID,
413:                    e.EventStart,
414:                    e.EventName,
415:                    e.EventStage as Status,
416:                    c.customername,
417:                    c.customerphone,
418:                    c.customeremail
419:                FROM event e
420:                LEFT JOIN customer c ON e.Customerid = c.customerid
421:                ORDER BY e.EventStart DESC
422:                LIMIT 5
423:            ''')
424:            recent_events = cursor.fetchall()
425:            
426:            # Get upcoming events
427:            cursor.execute('''
428:                SELECT 
429:                    e.EventID,
430:                    e.EventStart,
431:                    e.EventName,
432:                    e.EventStage as Status,
433:                    c.customername,
434:                    c.customerphone,
435:                    c.customeremail
436:                FROM event e
437:                LEFT JOIN customer c ON e.Customerid = c.customerid
438:                WHERE e.EventStart >= CURDATE()
439:                ORDER BY e.EventStart ASC
440:                LIMIT 5
441:            ''')
442:            upcoming_events = cursor.fetchall()
443:            
444:            # Get financial summary data for past 3 months and upcoming events
445:            today = datetime.now().date()
446:            three_months_ago = (today - timedelta(days=90)).strftime('%Y-%m-%d')
447:            
448:            # Query for financial summary of past events
449:            cursor.execute('''
450:                SELECT 
451:                    COUNT(*) as total_events,
452:                    IFNULL(SUM(TotalCost), 0) as total_cost,
453:                    IFNULL(SUM(TotalSelling), 0) as total_selling,
454:                    IFNULL(SUM(TotalProfit), 0) as total_profit
455:                FROM event
456:                WHERE EventStart >= %s AND EventStart <= NOW()
457:            ''', (three_months_ago,))
458:            past_financial = cursor.fetchone()
459:            
460:            # Query for financial summary of upcoming events
461:            cursor.execute('''
462:                SELECT 
463:                    COUNT(*) as total_events,
464:                    IFNULL(SUM(TotalCost), 0) as total_cost,
465:                    IFNULL(SUM(TotalSelling), 0) as total_selling,
466:                    IFNULL(SUM(TotalProfit), 0) as total_profit
467:                FROM event
468:                WHERE EventStart > NOW()
469:            ''')
470:            upcoming_financial = cursor.fetchone()
471:            
472:            # Get recent invoices
473:            cursor.execute('''
474:                SELECT 
475:                    i.invoice_id, 
476:                    i.invoice_number, 
477:                    i.invoice_date, 
478:                    i.status, 
479:                    i.total,
480:                    c.customername
481:                FROM invoice i
482:                LEFT JOIN customer c ON i.customer_id = c.customerid
483:                ORDER BY i.invoice_date DESC
484:                LIMIT 5
485:            ''')
486:            recent_invoices = cursor.fetchall()
487:            
488:            # Calculate invoice statistics
489:            cursor.execute('''
490:                SELECT 
491:                    COUNT(*) as total,
492:                    IFNULL(SUM(CASE WHEN status = 'Paid' THEN 1 ELSE 0 END), 0) as paid,
493:                    IFNULL(SUM(CASE WHEN status = 'Draft' THEN 1 ELSE 0 END), 0) as draft,
494:                    IFNULL(SUM(CASE WHEN status = 'Sent' THEN 1 ELSE 0 END), 0) as sent,
495:                    IFNULL(SUM(CASE WHEN status = 'Cancelled' THEN 1 ELSE 0 END), 0) as cancelled,
496:                    IFNULL(SUM(total), 0) as total_value,
497:                    IFNULL(SUM(CASE WHEN status = 'Paid' THEN total ELSE 0 END), 0) as paid_value
498:                FROM invoice
499:            ''')
500:            invoice_stats = cursor.fetchone()
501:            
502:            # Get events by status
503:            cursor.execute('''
504:                SELECT 
505:                    EventStage as status,
506:                    COUNT(*) as count
507:                FROM event
508:                GROUP BY EventStage
509:            ''')
510:            event_status = cursor.fetchall()
511:            
512:            # Get employees by role
513:            cursor.execute('''
514:                SELECT 
515:                    er.employeerolename as role,
516:                    COUNT(e.employeeid) as count
517:                FROM employee e
518:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
519:                GROUP BY er.employeerolename
520:            ''')
521:            employee_roles = cursor.fetchall()
522:            
523:            # Format the financial data
524:            if past_financial:
525:                past_financial['total_cost'] = float(past_financial['total_cost'] or 0)
526:                past_financial['total_selling'] = float(past_financial['total_selling'] or 0)
527:                past_financial['total_profit'] = float(past_financial['total_profit'] or 0)
528:            
529:            if upcoming_financial:
530:                upcoming_financial['total_cost'] = float(upcoming_financial['total_cost'] or 0)
531:                upcoming_financial['total_selling'] = float(upcoming_financial['total_selling'] or 0)
532:                upcoming_financial['total_profit'] = float(upcoming_financial['total_profit'] or 0)
533:            
534:            # Format invoice data
535:            for invoice in recent_invoices:
536:                if 'total' in invoice and invoice['total'] is not None:
537:                    invoice['total'] = float(invoice['total'])
538:                else:
539:                    invoice['total'] = 0.0
540:                
541:                if 'invoice_date' in invoice and invoice['invoice_date']:
542:                    if isinstance(invoice['invoice_date'], datetime):
543:                        invoice['invoice_date_formatted'] = invoice['invoice_date'].strftime('%Y-%m-%d')
544:                    else:
545:                        invoice['invoice_date_formatted'] = str(invoice['invoice_date'])
546:                else:
547:                    invoice['invoice_date_formatted'] = ''
548:            
549:            if invoice_stats:
550:                invoice_stats['total_value'] = float(invoice_stats['total_value'] or 0)
551:                invoice_stats['paid_value'] = float(invoice_stats['paid_value'] or 0)
552:            
553:            return render_template('home.html',
554:                                 username=session.get('username'),
555:                                 total_events=total_events,
556:                                 total_customers=total_customers,
557:                                 total_companies=total_companies,
558:                                 total_employees=total_employees,
559:                                 total_invoices=total_invoices,
560:                                 recent_events=recent_events,
561:                                 upcoming_events=upcoming_events,
562:                                 past_financial=past_financial,
563:                                 upcoming_financial=upcoming_financial,
564:                                 recent_invoices=recent_invoices,
565:                                 invoice_stats=invoice_stats,
566:                                 event_status=event_status,
567:                                 employee_roles=employee_roles)
568:    except Exception as e:
569:        flash(f'Error: {str(e)}', 'error')
570:        return render_template('home.html',
571:                             username=session.get('username'),
572:                             total_events=0,
573:                             total_customers=0,
574:                             total_companies=0,
575:                             total_employees=0,
576:                             total_invoices=0,
577:                             recent_events=[],
578:                             upcoming_events=[],
579:                             past_financial={
580:                                 'total_events': 0,
581:                                 'total_cost': 0,
582:                                 'total_selling': 0,
583:                                 'total_profit': 0
584:                             },
585:                             upcoming_financial={
586:                                 'total_events': 0,
587:                                 'total_cost': 0,
588:                                 'total_selling': 0,
589:                                 'total_profit': 0
590:                             },
591:                             recent_invoices=[],
592:                             invoice_stats={
593:                                 'total': 0,
594:                                 'paid': 0,
595:                                 'draft': 0,
596:                                 'sent': 0,
597:                                 'cancelled': 0,
598:                                 'total_value': 0,
599:                                 'paid_value': 0
600:                             },
601:                             event_status=[],
602:                             employee_roles=[])
603:    finally:
604:        if 'conn' in locals():
605:            conn.close()
606:
607:@app.route('/logout')
608:def logout():
609:    logging.info("Logout route accessed.")
610:    session.clear()
611:    return redirect(url_for('login'))
612:
613:@app.route('/dashboard')
614:@login_required
615:def dashboard():
616:    logging.info("Dashboard route accessed.")
617:    conn = None
618:    try:
619:        conn = pymysql.connect(
620:            host='localhost',
621:            user='root',
622:            password='V0sp0r0si968!',
623:            database='sml',
624:            cursorclass=pymysql.cursors.DictCursor,
625:            ssl={'ssl': {}}
626:        )
627:        
628:        cursor = conn.cursor()
629:        
630:        # Get counts
631:        cursor.execute('SELECT COUNT(*) as count FROM users')
632:        user_count = cursor.fetchone()['count']
633:        
634:        cursor.execute('SELECT COUNT(*) as count FROM event')
635:        event_count = cursor.fetchone()['count']
636:        
637:        cursor.execute('SELECT COUNT(*) as count FROM customer')
638:        customer_count = cursor.fetchone()['count']
639:        
640:        cursor.execute('SELECT COUNT(*) as count FROM company')
641:        company_count = cursor.fetchone()['count']
642:        
643:        # Get today's events with the correct column names
644:        today = datetime.now().date()
645:        cursor.execute('''
646:            SELECT 
647:                e.EventID,
648:                e.EventName,
649:                c.customername,
650:                e.EventStart,
651:                e.EventStage as status,
652:                e.notes
653:            FROM event e 
654:            LEFT JOIN customer c ON e.Customerid = c.customerid 
655:            WHERE DATE(e.EventStart) = %s
656:            ORDER BY e.EventStart ASC
657:        ''', (today,))
658:        todays_events = cursor.fetchall()
659:        
660:        # Get next week's events
661:        week_start = today + timedelta(days=1)
662:        week_end = today + timedelta(days=7)
663:        cursor.execute('''
664:            SELECT 
665:                e.EventID,
666:                e.EventName,
667:                c.customername,
668:                e.EventStart,
669:                e.EventStage as status,
670:                e.notes
671:            FROM event e 
672:            LEFT JOIN customer c ON e.Customerid = c.customerid 
673:            WHERE DATE(e.EventStart) BETWEEN %s AND %s
674:            ORDER BY e.EventStart ASC
675:        ''', (week_start, week_end))
676:        upcoming_events = cursor.fetchall()
677:        
678:        # Get recent customers
679:        cursor.execute('''
680:            SELECT 
681:                c.customername,
682:                c.customeremail as email,
683:                c.customerphone as phone,
684:                c.contactpersonname
685:            FROM customer c 
686:            ORDER BY c.customerid DESC 
687:            LIMIT 5
688:        ''')
689:        recent_customers = cursor.fetchall()
690:        
691:        # Get financial summary data for past 3 months and upcoming events
692:        three_months_ago = (today - timedelta(days=90)).strftime('%Y-%m-%d')
693:        
694:        # Query for financial summary of past events
695:        cursor.execute('''
696:            SELECT 
697:                COUNT(*) as total_events,
698:                IFNULL(SUM(TotalCost), 0) as total_cost,
699:                IFNULL(SUM(TotalSelling), 0) as total_selling,
700:                IFNULL(SUM(TotalProfit), 0) as total_profit
701:            FROM event
702:            WHERE EventStart >= %s AND EventStart <= NOW()
703:        ''', (three_months_ago,))
704:        past_financial = cursor.fetchone()
705:        
706:        # Query for financial summary of upcoming events
707:        cursor.execute('''
708:            SELECT 
709:                COUNT(*) as total_events,
710:                IFNULL(SUM(TotalCost), 0) as total_cost,
711:                IFNULL(SUM(TotalSelling), 0) as total_selling,
712:                IFNULL(SUM(TotalProfit), 0) as total_profit
713:            FROM event
714:            WHERE EventStart > NOW()
715:        ''')
716:        upcoming_financial = cursor.fetchone()
717:        
718:        # Get top 5 most profitable upcoming events
719:        cursor.execute('''
720:            SELECT 
721:                e.EventID,
722:                e.EventName,
723:                c.customername,
724:                e.EventStart,
725:                e.TotalCost,
726:                e.TotalSelling,
727:                e.TotalProfit,
728:                e.EventStage as status
729:            FROM event e
730:            LEFT JOIN customer c ON e.Customerid = c.customerid
731:            WHERE e.EventStart > NOW() AND e.TotalProfit > 0
732:            ORDER BY e.TotalProfit DESC
733:            LIMIT 5
734:        ''')
735:        top_profitable_events = cursor.fetchall()
736:        
737:        return render_template('dashboard.html',
738:                             username=session.get('username'),
739:                             user_count=user_count,
740:                             event_count=event_count,
741:                             customer_count=customer_count,
742:                             company_count=company_count,
743:                             todays_events=todays_events,
744:                             upcoming_events=upcoming_events,
745:                             recent_customers=recent_customers,
746:                             past_financial=past_financial,
747:                             upcoming_financial=upcoming_financial,
748:                             top_profitable_events=top_profitable_events)
749:    except Exception as e:
750:        flash(f'Error loading dashboard: {str(e)}', 'error')
751:        return render_template('dashboard.html',
752:                             username=session.get('username'),
753:                             user_count=0,
754:                             event_count=0,
755:                             customer_count=0,
756:                             company_count=0,
757:                             todays_events=[],
758:                             upcoming_events=[],
759:                             recent_customers=[],
760:                             past_financial={
761:                                 'total_events': 0,
762:                                 'total_cost': 0,
763:                                 'total_selling': 0,
764:                                 'total_profit': 0
765:                             },
766:                             upcoming_financial={
767:                                 'total_events': 0,
768:                                 'total_cost': 0,
769:                                 'total_selling': 0,
770:                                 'total_profit': 0
771:                             },
772:                             top_profitable_events=[])
773:    finally:
774:        if cursor:
775:            cursor.close()
776:        if conn:
777:            conn.close()
778:
779:@app.route('/admin/users')
780:@login_required
781:def user_list():
782:    if session.get('role') != 'admin':
783:        flash('Access denied. Admin privileges required.', 'error')
784:        return redirect(url_for('home'))
785:        
786:    try:
787:        conn = pymysql.connect(
788:            host='localhost',
789:            user='root',
790:            password='V0sp0r0si968!',
791:            database='sml',
792:            cursorclass=pymysql.cursors.DictCursor
793:        )
794:        
795:        with conn.cursor() as cursor:
796:            # First, let's check what columns exist in the users table
797:            cursor.execute("SHOW COLUMNS FROM users")
798:            columns = [column['Field'] for column in cursor.fetchall()]
799:            
800:            # Build the SELECT query based on existing columns
801:            select_columns = ['id', 'username', 'role']  # These are the basic columns we know exist
802:            
803:            if 'email' in columns:
804:                select_columns.append('email')
805:            if 'status' in columns:
806:                select_columns.append('status')
807:            if 'created_at' in columns:
808:                select_columns.append('created_at')
809:            if 'last_login' in columns:
810:                select_columns.append('last_login')
811:            
812:            query = f"SELECT {', '.join(select_columns)} FROM users ORDER BY id DESC"
813:            cursor.execute(query)
814:            users = cursor.fetchall()
815:            
816:            # Add default values for missing columns
817:            for user in users:
818:                if 'email' not in user:
819:                    user['email'] = None
820:                if 'status' not in user:
821:                    user['status'] = 'active'
822:                if 'created_at' not in user:
823:                    user['created_at'] = None
824:                if 'last_login' not in user:
825:                    user['last_login'] = None
826:            
827:            return render_template('admin/users.html',
828:                                 username=session.get('username'),
829:                                 users=users)
830:    except Exception as e:
831:        flash(f'Error: {str(e)}', 'error')
832:        return render_template('admin/users.html',
833:                             username=session.get('username'),
834:                             users=[])
835:    finally:
836:        if 'conn' in locals():
837:            conn.close()
838:
839:@app.route('/user/add', methods=['GET', 'POST'])
840:def user_add():
841:    if 'logged_in' in session and session['role'] == 'admin':
842:        if request.method == 'POST':
843:            username = request.form['username']
844:            password = request.form['password']
845:            email = request.form['email']
846:            full_name = request.form['full_name']
847:            role = request.form['role']
848:            
849:            conn = pymysql.connect(
850:                host='localhost',
851:                user='root',
852:                password='V0sp0r0si968!',
853:                database='sml',
854:                cursorclass=pymysql.cursors.DictCursor
855:            )
856:            if conn:
857:                try:
858:                    cursor = conn.cursor()
859:                    hashed_password = generate_password_hash(password)
860:                    cursor.execute('''
861:                        INSERT INTO users (username, password, email, full_name, role)
862:                        VALUES (%s, %s, %s, %s, %s)
863:                    ''', (username, hashed_password, email, full_name, role))
864:                    conn.commit()
865:                    flash('User added successfully!', 'success')
866:                    return redirect(url_for('user_list'))
867:                except Exception as e:
868:                    flash(f'Error: {str(e)}', 'error')
869:                finally:
870:                    cursor.close()
871:                    conn.close()
872:        return render_template('admin/user_add.html', username=session['username'])
873:    return redirect(url_for('login'))
874:
875:@app.route('/user/edit/<int:id>', methods=['GET', 'POST'])
876:def user_edit(id):
877:    print('SESSION:', dict(session))
878:    if 'logged_in' in session and session['role'] == 'admin':
879:        conn = pymysql.connect(
880:            host='localhost',
881:            user='root',
882:            password='V0sp0r0si968!',
883:            database='sml',
884:            cursorclass=pymysql.cursors.DictCursor
885:        )
886:        cursor = None
887:        if conn:
888:            try:
889:                cursor = conn.cursor()
890:                if request.method == 'POST':
891:                    email = request.form['email']
892:                    full_name = request.form['full_name']
893:                    role = request.form['role']
894:                    is_active = 1 if 'is_active' in request.form else 0
895:
896:                    cursor.execute('''
897:                        UPDATE users 
898:                        SET email = %s, full_name = %s, role = %s, is_active = %s
899:                        WHERE id = %s
900:                    ''', (email, full_name, role, is_active, id))
901:
902:                    if 'password' in request.form and request.form['password']:
903:                        hashed_password = generate_password_hash(request.form['password'])
904:                        cursor.execute('UPDATE users SET password = %s WHERE id = %s', 
905:                                     (hashed_password, id))
906:
907:                    conn.commit()
908:                    flash('User updated successfully!', 'success')
909:                    return redirect(url_for('user_list'))
910:
911:                cursor.execute('SELECT * FROM users WHERE id = %s', (id,))
912:                user = cursor.fetchone()
913:                if user:
914:                    return render_template('admin/user_edit.html', 
915:                                         username=session['username'],
916:                                         user=user)
917:            except Exception as e:
918:                flash(f'Error: {str(e)}', 'error')
919:            finally:
920:                if cursor:
921:                    cursor.close()
922:                conn.close()
923:    return redirect(url_for('login'))
924:
925:@app.route('/user/delete/<int:id>')
926:def user_delete(id):
927:    if 'logged_in' in session and session['role'] == 'admin':
928:        if id != session['id']:  # Prevent self-deletion
929:            conn = pymysql.connect(
930:                host='localhost',
931:                user='root',
932:                password='V0sp0r0si968!',
933:                database='sml',
934:                cursorclass=pymysql.cursors.DictCursor
935:            )
936:            if conn:
937:                try:
938:                    cursor = conn.cursor()
939:                    cursor.execute('DELETE FROM users WHERE id = %s', (id,))
940:                    conn.commit()
941:                    flash('User deleted successfully!', 'success')
942:                except Exception as e:
943:                    flash(f'Error: {str(e)}', 'error')
944:                finally:
945:                    cursor.close()
946:                    conn.close()
947:        else:
948:            flash('Cannot delete your own account!', 'error')
949:    return redirect(url_for('user_list'))
950:
951:@app.route('/user/reset_password/<int:id>', methods=['GET', 'POST'])
952:def reset_password(id):
953:    if 'logged_in' in session and session['role'] == 'admin':
954:        if request.method == 'POST':
955:            new_password = request.form['password']
956:            if not new_password:
957:                flash('Password cannot be empty.', 'error')
958:                return redirect(request.url)
959:            hashed_password = generate_password_hash(new_password)
960:            conn = pymysql.connect(
961:                host='localhost',
962:                user='root',
963:                password='V0sp0r0si968!',
964:                database='sml',
965:                cursorclass=pymysql.cursors.DictCursor
966:            )
967:            try:
968:                cursor = conn.cursor()
969:                cursor.execute('UPDATE users SET password = %s WHERE id = %s', (hashed_password, id))
970:                conn.commit()
971:                flash('Password reset successfully!', 'success')
972:                return redirect(url_for('user_list'))
973:            except Exception as e:
974:                flash(f'Error: {str(e)}', 'error')
975:            finally:
976:                cursor.close()
977:                conn.close()
978:        return render_template('admin/reset_password.html', user_id=id)
979:    return redirect(url_for('login'))
980:
981:@app.route('/event_list')
982:@login_required
983:def event_list():
984:    conn = None
985:    try:
986:        conn = pymysql.connect(
987:            host='localhost',
988:            user='root',
989:            password='V0sp0r0si968!',
990:            database='sml',
991:            cursorclass=pymysql.cursors.DictCursor,
992:            ssl={'ssl': {}}
993:        )
994:        
995:        cursor = conn.cursor()
996:        
997:        # Get pagination parameters
998:        page = request.args.get('page', 1, type=int)
999:        per_page = request.args.get('per_page', 10, type=int)
1000:        search = request.args.get('search', '')
1001:        sort_by = request.args.get('sort', 'EventStart')
1002:        sort_dir = request.args.get('dir', 'DESC')
1003:        customer_id = request.args.get('customer_id', type=int)
1004:        
1005:        # Validate and sanitize sort parameters
1006:        allowed_columns = ['EventID', 'EventName', 'customername', 'EventLocation', 
1007:                           'EventStart', 'EventStage', 'totalprofit']
1008:        if sort_by not in allowed_columns:
1009:            sort_by = 'EventStart'
1010:        
1011:        if sort_dir not in ['ASC', 'DESC']:
1012:            sort_dir = 'DESC'
1013:        
1014:        # Build the query with search functionality
1015:        query = '''
1016:            SELECT 
1017:                e.EventID,
1018:                e.Customerid,
1019:                e.EventName,
1020:                e.EventLocation,
1021:                e.EventStart,
1022:                e.EventEnd,
1023:                e.notes,
1024:                e.WaitersNeeded,
1025:                e.BartendersNeeded,
1026:                e.MaleEmployees,
1027:                e.FemaleEmployees,
1028:                e.TotalEmployees,
1029:                e.EventDurationHours,
1030:                e.EventTotalHours,
1031:                e.EventPerHourcost,
1032:                e.EventPerHourselling,
1033:                e.EventStage,
1034:                e.totalhours,
1035:                e.totalcost,
1036:                e.totalselling,
1037:                e.totalprofit,
1038:                e.totalshifthours,
1039:                c.customername
1040:            FROM event e 
1041:            LEFT JOIN customer c ON e.Customerid = c.customerid 
1042:        '''
1043:        
1044:        params = []
1045:        where_clauses = []
1046:        # Add search condition if search term provided
1047:        if search:
1048:            where_clauses.append('(' + ' OR '.join([
1049:                'e.EventName LIKE %s',
1050:                'c.customername LIKE %s',
1051:                'e.EventLocation LIKE %s',
1052:                'e.notes LIKE %s',
1053:                'e.EventStage LIKE %s']) + ')')
1054:            search_term = f'%{search}%'
1055:            params.extend([search_term, search_term, search_term, search_term, search_term])
1056:        # Add customer filter if provided
1057:        if customer_id:
1058:            where_clauses.append('e.Customerid = %s')
1059:            params.append(customer_id)
1060:        if where_clauses:
1061:            query += ' WHERE ' + ' AND '.join(where_clauses)
1062:        
1063:        # Count total records for pagination
1064:        count_query = f"SELECT COUNT(*) as total FROM ({query}) as t"
1065:        cursor.execute(count_query, params)
1066:        total_count = cursor.fetchone()['total']
1067:        
1068:        # Add sorting and pagination
1069:        query += f' ORDER BY {sort_by} {sort_dir}'
1070:        query += ' LIMIT %s OFFSET %s'
1071:        
1072:        # Calculate offset
1073:        offset = (page - 1) * per_page
1074:        params.extend([per_page, offset])
1075:        
1076:        # Execute final query
1077:        cursor.execute(query, params)
1078:        events_raw = cursor.fetchall()
1079:        
1080:        # Convert Decimal values to float and ensure consistent handling of profit
1081:        events = []
1082:        for event in events_raw:
1083:            event_dict = {}
1084:            for key, value in event.items():
1085:                if isinstance(value, decimal.Decimal):
1086:                    # For financial values, ensure consistent rounding to 2 decimal places
1087:                    if key in ['totalcost', 'totalselling', 'totalprofit', 'EventPerHourcost', 'EventPerHourselling']:
1088:                        event_dict[key] = round(float(value), 2)
1089:                    else:
1090:                        event_dict[key] = float(value)
1091:                else:
1092:                    event_dict[key] = value
1093:            
1094:            # Recalculate totalprofit to ensure it's consistent
1095:            if 'totalcost' in event_dict and 'totalselling' in event_dict:
1096:                event_dict['totalprofit'] = round(event_dict['totalselling'] - event_dict['totalcost'], 2)
1097:                
1098:            events.append(event_dict)
1099:        
1100:        # Calculate page count
1101:        total_pages = (total_count + per_page - 1) // per_page
1102:        
1103:        # Get customers for filtering
1104:        cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
1105:        customers = cursor.fetchall()
1106:        
1107:        return render_template(
1108:            'events/list.html', 
1109:            events=events,
1110:            customers=customers,
1111:            current_page=page,
1112:            total_pages=total_pages,
1113:            total_count=total_count,
1114:            per_page=per_page,
1115:            search=search,
1116:            sort_by=sort_by,
1117:            sort_dir=sort_dir,
1118:            selected_customer_id=customer_id
1119:        )
1120:        
1121:    except Exception as e:
1122:        flash(f'Error loading events: {str(e)}', 'error')
1123:        return render_template('events/list.html', 
1124:                             events=[], 
1125:                             current_page=1,
1126:                             total_pages=1,
1127:                             total_count=0,
1128:                             per_page=10,
1129:                             search='',
1130:                             sort_by='EventStart',
1131:                             sort_dir='DESC')
1132:        
1133:    finally:
1134:        if cursor:
1135:            cursor.close()
1136:        if conn:
1137:            conn.close()
1138:
1139:@app.route('/view_event/<int:event_id>')
1140:@login_required
1141:def view_event(event_id):
1142:    try:
1143:        conn = pymysql.connect(
1144:            host='localhost',
1145:            user='root',
1146:            password='V0sp0r0si968!',
1147:            database='sml',
1148:            cursorclass=pymysql.cursors.DictCursor
1149:        )
1150:        
1151:        with conn.cursor() as cursor:
1152:            cursor.execute('''
1153:                SELECT 
1154:                    e.*, 
1155:                    c.customername, 
1156:                    c.customerphone, 
1157:                    c.customeremail,
1158:                    CAST(e.totalhours AS CHAR) as totalhours_exact,
1159:                    CAST(e.totalcost AS CHAR) as totalcost_exact,
1160:                    CAST(e.totalselling AS CHAR) as totalselling_exact
1161:                FROM event e
1162:                LEFT JOIN customer c ON e.Customerid = c.customerid
1163:                WHERE e.EventID = %s
1164:            ''', (event_id,))
1165:            event = cursor.fetchone()
1166:            
1167:            if not event:
1168:                flash('Event not found.', 'error')
1169:                return redirect(url_for('event_list'))
1170:            
1171:            # Ensure consistent handling of financial values
1172:            event_dict = {}
1173:            for key, value in event.items():
1174:                if isinstance(value, decimal.Decimal):
1175:                    # For financial values, ensure consistent rounding to 2 decimal places
1176:                    if key in ['totalcost', 'totalselling', 'totalprofit', 'EventPerHourcost', 'EventPerHourselling']:
1177:                        event_dict[key] = round(float(value), 2)
1178:                    else:
1179:                        event_dict[key] = float(value)
1180:                else:
1181:                    event_dict[key] = value
1182:            
1183:            # Recalculate totalprofit to ensure it's consistent with the list view
1184:            if 'totalcost' in event_dict and 'totalselling' in event_dict:
1185:                event_dict['totalprofit'] = round(event_dict['totalselling'] - event_dict['totalcost'], 2)
1186:                
1187:            # Make sure we have the original string values for proper display
1188:            if 'totalhours_exact' in event and event['totalhours_exact']:
1189:                event_dict['totalhours'] = event['totalhours_exact']
1190:            else:
1191:                # Ensure totalhours is a float
1192:                event_dict['totalhours'] = float(event['totalhours']) if event['totalhours'] else 0
1193:                
1194:            if 'totalcost_exact' in event and event['totalcost_exact']:
1195:                event_dict['totalcost'] = float(event['totalcost_exact'])
1196:            else:
1197:                # Ensure totalcost is a float
1198:                event_dict['totalcost'] = float(event['totalcost']) if event['totalcost'] else 0
1199:                
1200:            if 'totalselling_exact' in event and event['totalselling_exact']:
1201:                event_dict['totalselling'] = float(event['totalselling_exact'])
1202:            else:
1203:                # Ensure totalselling is a float
1204:                event_dict['totalselling'] = float(event['totalselling']) if event['totalselling'] else 0
1205:                
1206:            return render_template('events/view.html',
1207:                                 event=event_dict,
1208:                                 username=session.get('username'))
1209:    except Exception as e:
1210:        flash(f'Error viewing event: {str(e)}', 'error')
1211:        return redirect(url_for('event_list'))
1212:    finally:
1213:        if 'conn' in locals() and conn:
1214:            conn.close()
1215:
1216:@app.route('/delete_event/<int:event_id>', methods=['POST'])
1217:@login_required
1218:def delete_event(event_id):
1219:    try:
1220:        conn = pymysql.connect(
1221:            host='localhost',
1222:            user='root',
1223:            password='V0sp0r0si968!',
1224:            database='sml',
1225:            cursorclass=pymysql.cursors.DictCursor
1226:        )
1227:        
1228:        with conn.cursor() as cursor:
1229:            # First delete associated records from employee_shifts and shifts tables
1230:            cursor.execute("""
1231:                DELETE FROM employee_shifts 
1232:                WHERE shiftid IN (
1233:                    SELECT shiftid FROM shifts WHERE eventid = %s
1234:                )
1235:            """, (event_id,))
1236:            
1237:            # Delete shifts
1238:            cursor.execute('DELETE FROM shifts WHERE eventid = %s', (event_id,))
1239:            
1240:            # Delete the event
1241:            cursor.execute('DELETE FROM event WHERE EventID = %s', (event_id,))
1242:            conn.commit()
1243:            flash('Event deleted successfully!', 'success')
1244:    except Exception as e:
1245:        flash(f'Error deleting event: {str(e)}', 'error')
1246:    finally:
1247:        if 'conn' in locals():
1248:            conn.close()
1249:    
1250:    return redirect(url_for('event_list'))
1251:
1252:@app.route('/delete_multiple_events', methods=['POST'])
1253:@login_required
1254:def delete_multiple_events():
1255:    """Handle deletion of multiple events at once."""
1256:    if request.method == 'POST':
1257:        try:
1258:            # Get the list of event IDs to delete
1259:            event_ids_json = request.form.get('event_ids', '[]')
1260:            event_ids = json.loads(event_ids_json)
1261:            
1262:            if not event_ids:
1263:                flash('No events selected for deletion.', 'warning')
1264:                return redirect(url_for('event_list'))
1265:            
1266:            conn = pymysql.connect(
1267:                host='localhost',
1268:                user='root',
1269:                password='V0sp0r0si968!',
1270:                database='sml',
1271:                cursorclass=pymysql.cursors.DictCursor
1272:            )
1273:            
1274:            try:
1275:                with conn.cursor() as cursor:
1276:                    # Format the IDs for the SQL IN clause
1277:                    id_placeholder = ','.join(['%s'] * len(event_ids))
1278:                    
1279:                    # First delete associated records from employee_shifts and shifts tables
1280:                    cursor.execute(f"""
1281:                        DELETE FROM employee_shifts 
1282:                        WHERE shiftid IN (
1283:                            SELECT shiftid FROM shifts WHERE eventid IN ({id_placeholder})
1284:                        )
1285:                    """, event_ids)
1286:                    
1287:                    # Delete shifts associated with these events
1288:                    cursor.execute(f"""
1289:                        DELETE FROM shifts 
1290:                        WHERE eventid IN ({id_placeholder})
1291:                    """, event_ids)
1292:                    
1293:                    # Finally delete the events
1294:                    cursor.execute(f"""
1295:                        DELETE FROM event 
1296:                        WHERE EventID IN ({id_placeholder})
1297:                    """, event_ids)
1298:                    
1299:                    # Get number of deleted rows
1300:                    deleted_count = cursor.rowcount
1301:                    
1302:                    conn.commit()
1303:                    flash(f'Successfully deleted {deleted_count} events.', 'success')
1304:                    
1305:            except Exception as e:
1306:                conn.rollback()
1307:                flash(f'Error deleting events: {str(e)}', 'danger')
1308:            
1309:            finally:
1310:                conn.close()
1311:                
1312:        except Exception as e:
1313:            flash(f'Error processing request: {str(e)}', 'danger')
1314:        
1315:    return redirect(url_for('event_list'))
1316:
1317:@app.before_request
1318:def before_request():
1319:    if 'logged_in' in session:
1320:        session.permanent = True
1321:        app.permanent_session_lifetime = timedelta(hours=5)
1322:
1323:# Add a function to check if user is logged in
1324:def is_logged_in():
1325:    return session.get('logged_in', False)
1326:
1327:@app.route('/admin/dashboard')
1328:@login_required
1329:def admin_dashboard():
1330:    if session.get('role') != 'admin':
1331:        flash('Access denied. Admin privileges required.', 'error')
1332:        return redirect(url_for('home'))
1333:        
1334:    try:
1335:        conn = pymysql.connect(
1336:            host='localhost',
1337:            user='root',
1338:            password='V0sp0r0si968!',
1339:            database='sml',
1340:            cursorclass=pymysql.cursors.DictCursor
1341:        )
1342:        
1343:        with conn.cursor() as cursor:
1344:            # Get total counts
1345:            cursor.execute('SELECT COUNT(*) as total FROM users')
1346:            total_users = cursor.fetchone()['total']
1347:            
1348:            cursor.execute('SELECT COUNT(*) as total FROM event')
1349:            total_events = cursor.fetchone()['total']
1350:            
1351:            cursor.execute('SELECT COUNT(*) as total FROM customer')
1352:            total_customers = cursor.fetchone()['total']
1353:            
1354:            cursor.execute('SELECT COUNT(*) as total FROM company')
1355:            total_companies = cursor.fetchone()['total']
1356:            
1357:            # Get recent users
1358:            cursor.execute('''
1359:                SELECT id, username, role, last_login 
1360:                FROM users 
1361:                ORDER BY id DESC 
1362:                LIMIT 5
1363:            ''')
1364:            recent_users = cursor.fetchall()
1365:            
1366:            # Get recent events
1367:            cursor.execute('''
1368:                SELECT 
1369:                    e.EventID,
1370:                    e.EventStart,
1371:                    e.EventName,
1372:                    e.EventStage as Status,
1373:                    c.customername
1374:                FROM event e
1375:                LEFT JOIN customer c ON e.Customerid = c.customerid
1376:                ORDER BY e.EventStart DESC
1377:                LIMIT 5
1378:            ''')
1379:            recent_events = cursor.fetchall()
1380:            
1381:            return render_template('admin/dashboard.html',
1382:                                 username=session.get('username'),
1383:                                 total_users=total_users,
1384:                                 total_events=total_events,
1385:                                 total_customers=total_customers,
1386:                                 total_companies=total_companies,
1387:                                 recent_users=recent_users,
1388:                                 recent_events=recent_events)
1389:    except Exception as e:
1390:        flash(f'Error: {str(e)}', 'error')
1391:        return render_template('admin/dashboard.html',
1392:                             username=session.get('username'),
1393:                             total_users=0,
1394:                             total_events=0,
1395:                             total_customers=0,
1396:                             total_companies=0,
1397:                             recent_users=[],
1398:                             recent_events=[])
1399:    finally:
1400:        if 'conn' in locals():
1401:            conn.close()
1402:
1403:@app.route('/admin/users/add', methods=['GET', 'POST'])
1404:@login_required
1405:def add_user():
1406:    if session.get('role') != 'admin':
1407:        flash('Access denied. Admin privileges required.', 'error')
1408:        return redirect(url_for('home'))
1409:        
1410:    if request.method == 'POST':
1411:        try:
1412:            username = request.form['username']
1413:            email = request.form['email']
1414:            password = request.form['password']
1415:            role = request.form['role']
1416:            
1417:            conn = pymysql.connect(
1418:                host='localhost',
1419:                user='root',
1420:                password='V0sp0r0si968!',
1421:                database='sml',
1422:                cursorclass=pymysql.cursors.DictCursor
1423:            )
1424:            
1425:            with conn.cursor() as cursor:
1426:                # Check if username already exists
1427:                cursor.execute('SELECT id FROM users WHERE username = %s', (username,))
1428:                if cursor.fetchone():
1429:                    flash('Username already exists!', 'error')
1430:                    return redirect(url_for('user_list'))
1431:                
1432:                # Insert new user without the status column
1433:                cursor.execute('''
1434:                    INSERT INTO users (username, email, password, role, created_at)
1435:                    VALUES (%s, %s, %s, %s, NOW())
1436:                ''', (username, email, generate_password_hash(password), role))
1437:                
1438:                conn.commit()
1439:                flash('User created successfully!', 'success')
1440:                
1441:        except Exception as e:
1442:            flash(f'Error creating user: {str(e)}', 'error')
1443:        finally:
1444:            conn.close()
1445:            
1446:        return redirect(url_for('user_list'))
1447:        
1448:    return redirect(url_for('user_list'))
1449:
1450:@app.route('/customer_list')
1451:@login_required
1452:def customer_list():
1453:    try:
1454:        # Get pagination parameters
1455:        page = request.args.get('page', 1, type=int)
1456:        per_page = request.args.get('per_page', 10, type=int)
1457:        search = request.args.get('search', '')
1458:        sort_by = request.args.get('sort', 'customername')
1459:        sort_dir = request.args.get('dir', 'ASC')
1460:        
1461:        # Validate sort parameters
1462:        allowed_columns = ['customername', 'contactpersonname', 'customerphone', 'customeremail']
1463:        if sort_by not in allowed_columns:
1464:            sort_by = 'customername'
1465:        
1466:        if sort_dir not in ['ASC', 'DESC']:
1467:            sort_dir = 'ASC'
1468:        
1469:        conn = pymysql.connect(
1470:            host='localhost',
1471:            user='root',
1472:            password='V0sp0r0si968!',
1473:            database='sml',
1474:            cursorclass=pymysql.cursors.DictCursor
1475:        )
1476:        
1477:        with conn.cursor() as cursor:
1478:            # Count total customers for pagination (with search filter if applicable)
1479:            count_query = 'SELECT COUNT(*) as total FROM customer'
1480:            count_params = []
1481:            
1482:            if search:
1483:                count_query += ''' WHERE 
1484:                    customername LIKE %s OR 
1485:                    contactpersonname LIKE %s OR 
1486:                    customerphone LIKE %s OR 
1487:                    customeremail LIKE %s'''
1488:                search_term = f'%{search}%'
1489:                count_params = [search_term, search_term, search_term, search_term]
1490:            
1491:            cursor.execute(count_query, count_params if count_params else None)
1492:            total_count = cursor.fetchone()['total']
1493:            
1494:            # Calculate total pages
1495:            total_pages = math.ceil(total_count / per_page)
1496:            
1497:            # Prepare main query with search, sort and pagination
1498:            main_query = '''
1499:                SELECT c.*, b.bankname 
1500:                FROM customer c
1501:                LEFT JOIN banks b ON c.bankid = b.bankid
1502:            '''
1503:            
1504:            params = []
1505:            if search:
1506:                main_query += ''' WHERE 
1507:                    c.customername LIKE %s OR 
1508:                    c.contactpersonname LIKE %s OR 
1509:                    c.customerphone LIKE %s OR 
1510:                    c.customeremail LIKE %s'''
1511:                params = [search_term, search_term, search_term, search_term]
1512:            
1513:            main_query += f' ORDER BY c.{sort_by} {sort_dir}'
1514:            main_query += ' LIMIT %s OFFSET %s'
1515:            
1516:            offset = (page - 1) * per_page
1517:            params.extend([per_page, offset])
1518:            
1519:            cursor.execute(main_query, params)
1520:            customers = cursor.fetchall()
1521:            
1522:            # Get banks for dropdown
1523:            cursor.execute('SELECT bankid, bankname FROM banks ORDER BY bankname')
1524:            banks = cursor.fetchall()
1525:            
1526:            return render_template('customers/list.html',
1527:                                 username=session.get('username'),
1528:                                 customers=customers,
1529:                                 banks=banks,
1530:                                 current_page=page,
1531:                                 total_pages=total_pages,
1532:                                 total_count=total_count,
1533:                                 per_page=per_page,
1534:                                 search=search,
1535:                                 sort_by=sort_by,
1536:                                 sort_dir=sort_dir)
1537:    except Exception as e:
1538:        flash(f'Error: {str(e)}', 'error')
1539:        return render_template('customers/list.html',
1540:                             username=session.get('username'),
1541:                             customers=[],
1542:                             banks=[],
1543:                             current_page=1,
1544:                             total_pages=1,
1545:                             total_count=0,
1546:                             per_page=10,
1547:                             search='',
1548:                             sort_by='customername',
1549:                             sort_dir='ASC')
1550:    finally:
1551:        if 'conn' in locals():
1552:            conn.close()
1553:
1554:@app.route('/customers/add', methods=['GET'])
1555:@login_required
1556:def create_customer_unified():
1557:    try:
1558:        conn = pymysql.connect(
1559:            host='localhost',
1560:            user='root',
1561:            password='V0sp0r0si968!',
1562:            database='sml',
1563:            cursorclass=pymysql.cursors.DictCursor,
1564:            ssl={'ssl': {}}
1565:        )
1566:        
1567:        with conn.cursor() as cursor:
1568:            # Get banks for dropdown
1569:            cursor.execute('SELECT bankid, bankname FROM banks ORDER BY bankname')
1570:            banks = cursor.fetchall()
1571:            
1572:            return render_template(
1573:                'customers/unified/customer_form.html',
1574:                is_edit_mode=False,
1575:                banks=banks
1576:            )
1577:    except Exception as e:
1578:        flash(f'Error loading form: {str(e)}', 'error')
1579:        return redirect(url_for('customer_list'))
1580:    finally:
1581:        if 'conn' in locals():
1582:            conn.close()
1583:
1584:@app.route('/customers/<int:customer_id>/edit', methods=['GET'])
1585:@login_required
1586:def edit_customer_unified(customer_id):
1587:    try:
1588:        conn = pymysql.connect(
1589:            host='localhost',
1590:            user='root',
1591:            password='V0sp0r0si968!',
1592:            database='sml',
1593:            cursorclass=pymysql.cursors.DictCursor,
1594:            ssl={'ssl': {}}
1595:        )
1596:        
1597:        with conn.cursor() as cursor:
1598:            # Get customer details
1599:            cursor.execute('SELECT * FROM customer WHERE customerid = %s', (customer_id,))
1600:            customer = cursor.fetchone()
1601:            
1602:            if not customer:
1603:                flash('Customer not found', 'error')
1604:                return redirect(url_for('customer_list'))
1605:            
1606:            # Get banks for dropdown
1607:            cursor.execute('SELECT bankid, bankname FROM banks ORDER BY bankname')
1608:            banks = cursor.fetchall()
1609:            
1610:            return render_template(
1611:                'customers/unified/customer_form.html',
1612:                is_edit_mode=True,
1613:                customer=customer,
1614:                banks=banks
1615:            )
1616:    except Exception as e:
1617:        flash(f'Error loading customer: {str(e)}', 'error')
1618:        return redirect(url_for('customer_list'))
1619:    finally:
1620:        if 'conn' in locals():
1621:            conn.close()
1622:
1623:@app.route('/customers/create', methods=['POST'])
1624:@login_required
1625:def create_customer():
1626:    try:
1627:        customername = request.form['customername']
1628:        customeraddress = request.form['customeraddress']
1629:        customerphone = request.form['customerphone']
1630:        customeremail = request.form['customeremail']
1631:        contactpersonname = request.form['contactpersonname']
1632:        bankid = request.form['bankid'] if request.form['bankid'] else None
1633:        
1634:        conn = pymysql.connect(
1635:            host='localhost',
1636:            user='root',
1637:            password='V0sp0r0si968!',
1638:            database='sml',
1639:            cursorclass=pymysql.cursors.DictCursor
1640:        )
1641:        
1642:        with conn.cursor() as cursor:
1643:            cursor.execute('''
1644:                INSERT INTO customer (customername, customeraddress, customerphone, 
1645:                                    customeremail, contactpersonname, bankid)
1646:                VALUES (%s, %s, %s, %s, %s, %s)
1647:            ''', (customername, customeraddress, customerphone, 
1648:                  customeremail, contactpersonname, bankid))
1649:            
1650:            conn.commit()
1651:            flash('Customer created successfully!', 'success')
1652:            
1653:    except Exception as e:
1654:        flash(f'Error creating customer: {str(e)}', 'error')
1655:    finally:
1656:        conn.close()
1657:        
1658:    return redirect(url_for('customer_list'))
1659:
1660:@app.route('/customers/<int:customer_id>/edit', methods=['POST'])
1661:@login_required
1662:def edit_customer(customer_id):
1663:    try:
1664:        customername = request.form['customername']
1665:        customeraddress = request.form['customeraddress']
1666:        customerphone = request.form['customerphone']
1667:        customeremail = request.form['customeremail']
1668:        contactpersonname = request.form['contactpersonname']
1669:        bankid = request.form['bankid'] if request.form['bankid'] else None
1670:        
1671:        conn = pymysql.connect(
1672:            host='localhost',
1673:            user='root',
1674:            password='V0sp0r0si968!',
1675:            database='sml',
1676:            cursorclass=pymysql.cursors.DictCursor
1677:        )
1678:        
1679:        with conn.cursor() as cursor:
1680:            cursor.execute('''
1681:                UPDATE customer 
1682:                SET customername = %s, customeraddress = %s, customerphone = %s,
1683:                    customeremail = %s, contactpersonname = %s, bankid = %s
1684:                WHERE customerid = %s
1685:            ''', (customername, customeraddress, customerphone, 
1686:                  customeremail, contactpersonname, bankid, customer_id))
1687:            
1688:            conn.commit()
1689:            flash('Customer updated successfully!', 'success')
1690:            
1691:    except Exception as e:
1692:        flash(f'Error updating customer: {str(e)}', 'error')
1693:    finally:
1694:        conn.close()
1695:        
1696:    return redirect(url_for('customer_list'))
1697:
1698:@app.route('/customers/<int:customer_id>/delete', methods=['POST'])
1699:@login_required
1700:def delete_customer(customer_id):
1701:    try:
1702:        conn = pymysql.connect(
1703:            host='localhost',
1704:            user='root',
1705:            password='V0sp0r0si968!',
1706:            database='sml',
1707:            cursorclass=pymysql.cursors.DictCursor
1708:        )
1709:        
1710:        with conn.cursor() as cursor:
1711:            cursor.execute('DELETE FROM customer WHERE customerid = %s', (customer_id,))
1712:            conn.commit()
1713:            flash('Customer deleted successfully!', 'success')
1714:            
1715:    except Exception as e:
1716:        flash(f'Error deleting customer: {str(e)}', 'error')
1717:    finally:
1718:        conn.close()
1719:        
1720:    return redirect(url_for('customer_list'))
1721:
1722:@app.route('/delete_multiple_customers', methods=['POST'])
1723:@login_required
1724:def delete_multiple_customers():
1725:    """Handle deletion of multiple customers at once."""
1726:    if request.method == 'POST':
1727:        try:
1728:            # Get the list of customer IDs to delete
1729:            customer_ids = request.form.getlist('customer_ids[]')
1730:            if not customer_ids:
1731:                flash('No customers selected for deletion.', 'warning')
1732:                return redirect(url_for('customer_list'))
1733:            
1734:            conn = pymysql.connect(
1735:                host='localhost',
1736:                user='root',
1737:                password='V0sp0r0si968!',
1738:                database='sml',
1739:                cursorclass=pymysql.cursors.DictCursor
1740:            )
1741:            
1742:            try:
1743:                with conn.cursor() as cursor:
1744:                    # Check if any of these customers have associated events
1745:                    id_placeholder = ','.join(['%s'] * len(customer_ids))
1746:                    cursor.execute(f'''
1747:                        SELECT c.customerid, c.customername, COUNT(e.EventID) as event_count
1748:                        FROM customer c
1749:                        LEFT JOIN event e ON c.customerid = e.Customerid
1750:                        WHERE c.customerid IN ({id_placeholder})
1751:                        GROUP BY c.customerid, c.customername
1752:                        HAVING COUNT(e.EventID) > 0
1753:                    ''', customer_ids)
1754:                    
1755:                    customers_with_events = cursor.fetchall()
1756:                    if customers_with_events:
1757:                        # Some customers have events, show error message
1758:                        customer_names = ', '.join([c['customername'] for c in customers_with_events])
1759:                        flash(f'Cannot delete customers with associated events: {customer_names}', 'error')
1760:                        return redirect(url_for('customer_list'))
1761:                    
1762:                    # Delete customers
1763:                    cursor.execute(f'''
1764:                        DELETE FROM customer
1765:                        WHERE customerid IN ({id_placeholder})
1766:                    ''', customer_ids)
1767:                    
1768:                    deleted_count = cursor.rowcount
1769:                    conn.commit()
1770:                    flash(f'Successfully deleted {deleted_count} customers.', 'success')
1771:                
1772:            except Exception as e:
1773:                conn.rollback()
1774:                flash(f'Error deleting customers: {str(e)}', 'error')
1775:            finally:
1776:                conn.close()
1777:        except Exception as e:
1778:            flash(f'Error processing request: {str(e)}', 'error')
1779:    
1780:    return redirect(url_for('customer_list'))
1781:
1782:@app.route('/api/customers/<int:customer_id>')
1783:@login_required
1784:def get_customer(customer_id):
1785:    try:
1786:        conn = pymysql.connect(
1787:            host='localhost',
1788:            user='root',
1789:            password='V0sp0r0si968!',
1790:            database='sml',
1791:            cursorclass=pymysql.cursors.DictCursor
1792:        )
1793:        
1794:        with conn.cursor() as cursor:
1795:            cursor.execute('SELECT * FROM customer WHERE customerid = %s', (customer_id,))
1796:            customer = cursor.fetchone()
1797:            
1798:            if customer:
1799:                return jsonify(customer)
1800:            
1801:            return jsonify({'error': 'Customer not found'}), 404
1802:            
1803:    except Exception as e:
1804:        return jsonify({'error': str(e)}), 500
1805:    finally:
1806:        conn.close()
1807:
1808:@app.route('/bank_list')
1809:@login_required
1810:def bank_list():
1811:    try:
1812:        conn = pymysql.connect(
1813:            host='localhost',
1814:            user='root',
1815:            password='V0sp0r0si968!',
1816:            database='sml',
1817:            cursorclass=pymysql.cursors.DictCursor
1818:        )
1819:        
1820:        with conn.cursor() as cursor:
1821:            cursor.execute('''
1822:                SELECT bankid, bankname, biccode 
1823:                FROM banks 
1824:                ORDER BY bankname
1825:            ''')
1826:            banks = cursor.fetchall()
1827:            
1828:            return render_template('banks/list.html',
1829:                                 banks=banks,
1830:                                 username=session.get('username'),
1831:                                 # Add pagination variables to avoid undefined errors
1832:                                 current_page=1,
1833:                                 per_page=len(banks),
1834:                                 total_count=len(banks),
1835:                                 total_pages=1,
1836:                                 search='',
1837:                                 sort_by='bankname',
1838:                                 sort_dir='ASC')
1839:    except Exception as e:
1840:        flash(f'Error loading banks: {str(e)}', 'error')
1841:        return render_template('banks/list.html',
1842:                             banks=[],
1843:                             username=session.get('username'),
1844:                             # Add pagination variables to avoid undefined errors
1845:                             current_page=1,
1846:                             per_page=10,
1847:                             total_count=0,
1848:                             total_pages=1,
1849:                             search='',
1850:                             sort_by='bankname',
1851:                             sort_dir='ASC')
1852:    finally:
1853:        if 'conn' in locals():
1854:            conn.close()
1855:
1856:@app.route('/create_bank', methods=['POST'])
1857:@login_required
1858:def create_bank():
1859:    try:
1860:        bankname = request.form.get('bankname')
1861:        biccode = request.form.get('biccode')
1862:        
1863:        conn = pymysql.connect(
1864:            host='localhost',
1865:            user='root',
1866:            password='V0sp0r0si968!',
1867:            database='sml',
1868:            cursorclass=pymysql.cursors.DictCursor,
1869:            ssl={'ssl': {}}
1870:        )
1871:        
1872:        with conn.cursor() as cursor:
1873:            cursor.execute('INSERT INTO banks (bankname, biccode) VALUES (%s, %s)', 
1874:                         (bankname, biccode))
1875:            conn.commit()
1876:            
1877:        flash('Bank added successfully!', 'success')
1878:        
1879:    except Exception as e:
1880:        flash(f'Error adding bank: {str(e)}', 'error')
1881:        
1882:    finally:
1883:        if 'conn' in locals():
1884:            conn.close()
1885:            
1886:    return redirect(url_for('bank_list'))
1887:
1888:@app.route('/banks/<int:bank_id>/edit', methods=['GET', 'POST'])
1889:@login_required
1890:def edit_bank(bank_id):
1891:    conn = None
1892:    try:
1893:        conn = pymysql.connect(
1894:            host='localhost',
1895:            user='root',
1896:            password='V0sp0r0si968!',
1897:            database='sml',
1898:            cursorclass=pymysql.cursors.DictCursor,
1899:            ssl={'ssl': {}}
1900:        )
1901:        
1902:        cursor = conn.cursor()
1903:        
1904:        if request.method == 'POST':
1905:            # Handle the form submission
1906:            bankname = request.form.get('bankname')
1907:            biccode = request.form.get('biccode')
1908:            
1909:            cursor.execute('''
1910:                UPDATE banks 
1911:                SET bankname = %s, biccode = %s 
1912:                WHERE bankid = %s
1913:            ''', (bankname, biccode, bank_id))
1914:            
1915:            conn.commit()
1916:            flash('Bank updated successfully!', 'success')
1917:            return redirect(url_for('bank_list'))
1918:            
1919:        else:
1920:            # GET request - show edit form
1921:            cursor.execute('SELECT * FROM banks WHERE bankid = %s', (bank_id,))
1922:            bank = cursor.fetchone()
1923:            
1924:            if bank is None:
1925:                flash('Bank not found.', 'error')
1926:                return redirect(url_for('bank_list'))
1927:                
1928:            return render_template('banks/edit.html', bank=bank)
1929:            
1930:    except Exception as e:
1931:        flash(f'Error: {str(e)}', 'error')
1932:        return redirect(url_for('bank_list'))
1933:        
1934:    finally:
1935:        if 'cursor' in locals():
1936:            cursor.close()
1937:        if conn:
1938:            conn.close()
1939:
1940:@app.route('/banks/<int:bank_id>/delete', methods=['POST'])
1941:@login_required
1942:def delete_bank(bank_id):
1943:    if session.get('role') != 'admin':
1944:        flash('Access denied. Admin privileges required.', 'error')
1945:        return redirect(url_for('home'))
1946:        
1947:    try:
1948:        conn = pymysql.connect(
1949:            host='localhost',
1950:            user='root',
1951:            password='V0sp0r0si968!',
1952:            database='sml',
1953:            cursorclass=pymysql.cursors.DictCursor
1954:        )
1955:        
1956:        with conn.cursor() as cursor:
1957:            # Check if bank has associated customers
1958:            cursor.execute('SELECT COUNT(*) as count FROM customer WHERE bankid = %s', (bank_id,))
1959:            if cursor.fetchone()['count'] > 0:
1960:                flash('Cannot delete bank: It has associated customers', 'error')
1961:                return redirect(url_for('bank_list'))
1962:                
1963:            cursor.execute('DELETE FROM banks WHERE bankid = %s', (bank_id,))
1964:            conn.commit()
1965:            flash('Bank deleted successfully!', 'success')
1966:            
1967:    except Exception as e:
1968:        flash(f'Error deleting bank: {str(e)}', 'error')
1969:    finally:
1970:        conn.close()
1971:        
1972:    return redirect(url_for('bank_list'))
1973:
1974:@app.route('/delete_multiple_banks', methods=['POST'])
1975:@login_required
1976:def delete_multiple_banks():
1977:    """Handle deletion of multiple banks at once."""
1978:    if session.get('role') != 'admin':
1979:        flash('Access denied. Admin privileges required.', 'error')
1980:        return redirect(url_for('home'))
1981:        
1982:    if request.method == 'POST':
1983:        try:
1984:            # Get the list of bank IDs to delete
1985:            bank_ids = request.form.getlist('bank_ids[]')
1986:            if not bank_ids:
1987:                flash('No banks selected for deletion.', 'warning')
1988:                return redirect(url_for('bank_list'))
1989:            
1990:            conn = pymysql.connect(
1991:                host='localhost',
1992:                user='root',
1993:                password='V0sp0r0si968!',
1994:                database='sml',
1995:                cursorclass=pymysql.cursors.DictCursor
1996:            )
1997:            
1998:            try:
1999:                with conn.cursor() as cursor:
2000:                    # Check if any banks have associated customers
2001:                    id_placeholder = ','.join(['%s'] * len(bank_ids))
2002:                    cursor.execute(f'''
2003:                        SELECT b.bankid, b.bankname, COUNT(c.customerid) as customer_count
2004:                        FROM banks b
2005:                        LEFT JOIN customer c ON b.bankid = c.bankid
2006:                        WHERE b.bankid IN ({id_placeholder})
2007:                        GROUP BY b.bankid, b.bankname
2008:                        HAVING COUNT(c.customerid) > 0
2009:                    ''', bank_ids)
2010:                    
2011:                    banks_with_customers = cursor.fetchall()
2012:                    if banks_with_customers:
2013:                        # Some banks have customers, show error message
2014:                        bank_names = ', '.join([b['bankname'] for b in banks_with_customers])
2015:                        flash(f'Cannot delete banks with associated customers: {bank_names}', 'error')
2016:                        return redirect(url_for('bank_list'))
2017:                    
2018:                    # Delete banks without associated customers
2019:                    cursor.execute(f'''
2020:                        DELETE FROM banks
2021:                        WHERE bankid IN ({id_placeholder})
2022:                    ''', bank_ids)
2023:                    
2024:                    deleted_count = cursor.rowcount
2025:                    conn.commit()
2026:                    flash(f'Successfully deleted {deleted_count} banks.', 'success')
2027:                
2028:            except Exception as e:
2029:                conn.rollback()
2030:                flash(f'Error deleting banks: {str(e)}', 'error')
2031:            finally:
2032:                conn.close()
2033:        except Exception as e:
2034:            flash(f'Error processing request: {str(e)}', 'error')
2035:    
2036:    return redirect(url_for('bank_list'))
2037:
2038:@app.route('/api/banks/<int:bank_id>')
2039:@login_required
2040:def get_bank(bank_id):
2041:    if session.get('role') != 'admin':
2042:        return jsonify({'error': 'Access denied'}), 403
2043:        
2044:    try:
2045:        conn = pymysql.connect(
2046:            host='localhost',
2047:            user='root',
2048:            password='V0sp0r0si968!',
2049:            database='sml',
2050:            cursorclass=pymysql.cursors.DictCursor
2051:        )
2052:        
2053:        with conn.cursor() as cursor:
2054:            cursor.execute('SELECT * FROM banks WHERE bankid = %s', (bank_id,))
2055:            bank = cursor.fetchone()
2056:            
2057:            if bank:
2058:                return jsonify(bank)
2059:            
2060:            return jsonify({'error': 'Bank not found'}), 404
2061:            
2062:    except Exception as e:
2063:        return jsonify({'error': str(e)}), 500
2064:    finally:
2065:        conn.close()
2066:
2067:@app.route('/companies')
2068:@login_required
2069:def company_list():
2070:    try:
2071:        page = request.args.get('page', 1, type=int)
2072:        per_page = request.args.get('per_page', 10, type=int)
2073:        offset = (page - 1) * per_page
2074:        conn = pymysql.connect(
2075:            host='localhost',
2076:            user='root',
2077:            password='V0sp0r0si968!',
2078:            database='sml',
2079:            cursorclass=pymysql.cursors.DictCursor
2080:        )
2081:        with conn.cursor() as cursor:
2082:            # Get total count
2083:            cursor.execute('SELECT COUNT(*) as total FROM company')
2084:            total_count = cursor.fetchone()['total']
2085:            
2086:            # Check if there are multiple companies and show a warning
2087:            if total_count > 1:
2088:                flash('Warning: Multiple company records detected. The system is designed to work with only one company. Please keep only one record.', 'warning')
2089:                
2090:            total_pages = (total_count + per_page - 1) // per_page
2091:            # Join with banks table to get bank information, paginated
2092:            cursor.execute('''
2093:                SELECT 
2094:                    c.companyid,
2095:                    c.companyname,
2096:                    c.companyaddress,
2097:                    c.companyphone,
2098:                    c.companyemail,
2099:                    c.companyweb,
2100:                    c.vatno,
2101:                    c.companydebitaccount,
2102:                    c.companyiban,
2103:                    c.beneficiary,
2104:                    c.paymentpolicy,
2105:                    c.transactiontype,
2106:                    b.bankname,
2107:                    b.biccode
2108:                FROM company c
2109:                LEFT JOIN banks b ON c.bankid = b.bankid
2110:                ORDER BY c.companyname
2111:                LIMIT %s OFFSET %s
2112:            ''', (per_page, offset))
2113:            companies = cursor.fetchall()
2114:            print('Companies:', companies)
2115:            return render_template('companies/list.html',
2116:                                 companies=companies,
2117:                                 username=session.get('username'),
2118:                                 current_page=page,
2119:                                 total_pages=total_pages,
2120:                                 total_count=total_count,
2121:                                 per_page=per_page)
2122:    except Exception as e:
2123:        flash(f'Error loading companies: {str(e)}', 'error')
2124:        return render_template('companies/list.html',
2125:                             companies=[],
2126:                             username=session.get('username'),
2127:                             current_page=1,
2128:                             total_pages=1,
2129:                             total_count=0,
2130:                             per_page=10)
2131:    finally:
2132:        if 'conn' in locals():
2133:            conn.close()
2134:
2135:@app.route('/create_company', methods=['POST'])
2136:@login_required
2137:def create_company():
2138:    try:
2139:        conn = pymysql.connect(
2140:            host='localhost',
2141:            user='root',
2142:            password='V0sp0r0si968!',
2143:            database='sml',
2144:            cursorclass=pymysql.cursors.DictCursor,
2145:            ssl={'ssl': {}}
2146:        )
2147:        
2148:        with conn.cursor() as cursor:
2149:            # Check if a company already exists
2150:            cursor.execute('SELECT COUNT(*) as count FROM company')
2151:            company_count = cursor.fetchone()['count']
2152:            
2153:            if company_count >= 1:
2154:                flash('Cannot create a new company: Only one company is allowed in the system.', 'error')
2155:                return redirect(url_for('company_list'))
2156:            
2157:            # Extract form data
2158:            companyname = request.form.get('companyname')
2159:            companyaddress = request.form.get('companyaddress')
2160:            companyphone = request.form.get('companyphone')
2161:            companyemail = request.form.get('companyemail')
2162:            companyweb = request.form.get('companyweb')
2163:            vatno = request.form.get('vatno')
2164:            companydebitaccount = request.form.get('companydebitaccount')
2165:            companyiban = request.form.get('companyiban')
2166:            beneficiary = request.form.get('beneficiary')
2167:            paymentpolicy = request.form.get('paymentpolicy')
2168:            transactiontype = request.form.get('transactiontype')
2169:            bankid = request.form.get('bankid') if request.form.get('bankid') else None
2170:            
2171:            # Handle logo upload
2172:            company_logo = None
2173:            if 'company_logo' in request.files:
2174:                logo_file = request.files['company_logo']
2175:                if logo_file and logo_file.filename:
2176:                    # Securely save the filename
2177:                    logo_filename = secure_filename(logo_file.filename)
2178:                    # Add timestamp to filename to avoid conflicts
2179:                    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
2180:                    logo_filename = f"{timestamp}_{logo_filename}"
2181:                    # Create directory if it doesn't exist
2182:                    os.makedirs('static/uploads/logos', exist_ok=True)
2183:                    # Save the file
2184:                    logo_file.save(os.path.join('static/uploads/logos', logo_filename))
2185:                    company_logo = logo_filename
2186:            
2187:            cursor.execute('''
2188:                INSERT INTO company (
2189:                    companyname, 
2190:                    companyaddress, 
2191:                    companyphone, 
2192:                    companyemail, 
2193:                    companyweb,
2194:                    vatno,
2195:                    companydebitaccount, 
2196:                    companyiban,
2197:                    beneficiary,
2198:                    paymentpolicy,
2199:                    transactiontype, 
2200:                    bankid,
2201:                    company_logo
2202:                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2203:            ''', (
2204:                companyname, 
2205:                companyaddress, 
2206:                companyphone, 
2207:                companyemail, 
2208:                companyweb,
2209:                vatno,
2210:                companydebitaccount, 
2211:                companyiban,
2212:                beneficiary,
2213:                paymentpolicy,
2214:                transactiontype, 
2215:                bankid,
2216:                company_logo
2217:            ))
2218:            conn.commit()
2219:            
2220:        flash('Company added successfully!', 'success')
2221:        
2222:    except Exception as e:
2223:        flash(f'Error adding company: {str(e)}', 'error')
2224:        
2225:    finally:
2226:        if 'conn' in locals():
2227:            conn.close()
2228:            
2229:    return redirect(url_for('company_list'))
2230:
2231:@app.route('/companies/<int:company_id>/edit', methods=['GET'])
2232:@login_required
2233:def edit_company_page(company_id):
2234:    conn = pymysql.connect(
2235:        host='localhost',
2236:        user='root',
2237:        password='V0sp0r0si968!',
2238:        database='sml',
2239:        cursorclass=pymysql.cursors.DictCursor
2240:    )
2241:    with conn.cursor() as cursor:
2242:        cursor.execute('SELECT * FROM company WHERE companyid = %s', (company_id,))
2243:        company = cursor.fetchone()
2244:        cursor.execute('SELECT bankid, bankname FROM banks ORDER BY bankname')
2245:        banks = cursor.fetchall()
2246:    conn.close()
2247:    if not company:
2248:        flash('Company not found.', 'error')
2249:        return redirect(url_for('company_list'))
2250:    return render_template('companies/unified/company_form.html', is_edit_mode=True, company=company, banks=banks)
2251:
2252:@app.route('/companies/<int:company_id>/edit', methods=['POST'])
2253:@login_required
2254:def edit_company(company_id):
2255:    try:
2256:        # Extract form data
2257:        companyname = request.form.get('companyname')
2258:        companyaddress = request.form.get('companyaddress')
2259:        companyphone = request.form.get('companyphone')
2260:        companyemail = request.form.get('companyemail')
2261:        companyweb = request.form.get('companyweb')
2262:        vatno = request.form.get('vatno')
2263:        companydebitaccount = request.form.get('companydebitaccount')
2264:        companyiban = request.form.get('companyiban')
2265:        beneficiary = request.form.get('beneficiary')
2266:        paymentpolicy = request.form.get('paymentpolicy')
2267:        transactiontype = request.form.get('transactiontype')
2268:        bankid = request.form.get('bankid') if request.form.get('bankid') else None
2269:        
2270:        conn = pymysql.connect(
2271:            host='localhost',
2272:            user='root',
2273:            password='V0sp0r0si968!',
2274:            database='sml',
2275:            cursorclass=pymysql.cursors.DictCursor
2276:        )
2277:        
2278:        with conn.cursor() as cursor:
2279:            # Get current company logo
2280:            cursor.execute('SELECT company_logo FROM company WHERE companyid = %s', (company_id,))
2281:            current_company = cursor.fetchone()
2282:            current_logo = current_company.get('company_logo') if current_company else None
2283:            
2284:            # Handle logo upload
2285:            company_logo = current_logo
2286:            if 'company_logo' in request.files:
2287:                logo_file = request.files['company_logo']
2288:                if logo_file and logo_file.filename:
2289:                    # Securely save the filename
2290:                    logo_filename = secure_filename(logo_file.filename)
2291:                    # Add timestamp to filename to avoid conflicts
2292:                    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
2293:                    logo_filename = f"{timestamp}_{logo_filename}"
2294:                    # Create directory if it doesn't exist
2295:                    os.makedirs('static/uploads/logos', exist_ok=True)
2296:                    # Save the file
2297:                    logo_file.save(os.path.join('static/uploads/logos', logo_filename))
2298:                    company_logo = logo_filename
2299:                    
2300:                    # Remove old logo if exists
2301:                    if current_logo and os.path.exists(os.path.join('static/uploads/logos', current_logo)):
2302:                        try:
2303:                            os.remove(os.path.join('static/uploads/logos', current_logo))
2304:                        except:
2305:                            # Don't fail if old file can't be removed
2306:                            pass
2307:            
2308:            cursor.execute('''
2309:                UPDATE company 
2310:                SET companyname = %s, 
2311:                    companyaddress = %s, 
2312:                    companyphone = %s,
2313:                    companyemail = %s, 
2314:                    companyweb = %s,
2315:                    vatno = %s,
2316:                    companydebitaccount = %s, 
2317:                    companyiban = %s,
2318:                    beneficiary = %s,
2319:                    paymentpolicy = %s,
2320:                    transactiontype = %s, 
2321:                    bankid = %s,
2322:                    company_logo = %s
2323:                WHERE companyid = %s
2324:            ''', (
2325:                companyname, 
2326:                companyaddress, 
2327:                companyphone, 
2328:                companyemail, 
2329:                companyweb,
2330:                vatno,
2331:                companydebitaccount, 
2332:                companyiban,
2333:                beneficiary,
2334:                paymentpolicy,
2335:                transactiontype, 
2336:                bankid,
2337:                company_logo,
2338:                company_id
2339:            ))
2340:            
2341:            conn.commit()
2342:            flash('Company updated successfully!', 'success')
2343:            
2344:    except Exception as e:
2345:        flash(f'Error updating company: {str(e)}', 'error')
2346:    finally:
2347:        if 'conn' in locals():
2348:            conn.close()
2349:        
2350:    return redirect(url_for('company_list'))
2351:
2352:@app.route('/companies/<int:company_id>/delete', methods=['POST'])
2353:@login_required
2354:def delete_company(company_id):
2355:    try:
2356:        conn = pymysql.connect(
2357:            host='localhost',
2358:            user='root',
2359:            password='V0sp0r0si968!',
2360:            database='sml',
2361:            cursorclass=pymysql.cursors.DictCursor
2362:        )
2363:        
2364:        with conn.cursor() as cursor:
2365:            # Check if company has associated employees
2366:            cursor.execute('SELECT COUNT(*) as count FROM employee WHERE companyid = %s', (company_id,))
2367:            employee_count = cursor.fetchone()['count']
2368:            
2369:            if employee_count > 0:
2370:                flash(f'Cannot delete company: There are {employee_count} employees associated with this company. Please reassign or delete these employees first.', 'error')
2371:                return redirect(url_for('company_list'))
2372:                
2373:            # If no employees, proceed with deletion
2374:            cursor.execute('DELETE FROM company WHERE companyid = %s', (company_id,))
2375:            conn.commit()
2376:            flash('Company deleted successfully!', 'success')
2377:            
2378:    except Exception as e:
2379:        flash(f'Error deleting company: {str(e)}', 'error')
2380:    finally:
2381:        conn.close()
2382:        
2383:    return redirect(url_for('company_list'))
2384:
2385:@app.route('/api/companies/<int:company_id>')
2386:@login_required
2387:def get_company(company_id):
2388:    try:
2389:        conn = pymysql.connect(
2390:            host='localhost',
2391:            user='root',
2392:            password='V0sp0r0si968!',
2393:            database='sml',
2394:            cursorclass=pymysql.cursors.DictCursor
2395:        )
2396:        
2397:        with conn.cursor() as cursor:
2398:            cursor.execute('SELECT * FROM company WHERE companyid = %s', (company_id,))
2399:            company = cursor.fetchone()
2400:            
2401:            if company:
2402:                return jsonify(company)
2403:            
2404:            return jsonify({'error': 'Company not found'}), 404
2405:            
2406:    except Exception as e:
2407:        return jsonify({'error': str(e)}), 500
2408:    finally:
2409:        conn.close()
2410:
2411:@app.route('/employee_list')
2412:@login_required
2413:def employee_list():
2414:    # Get pagination parameters
2415:    page = request.args.get('page', 1, type=int)
2416:    per_page = request.args.get('per_page', 10, type=int)
2417:    search = request.args.get('search', '')
2418:    sort_by = request.args.get('sort', 'employeename')
2419:    sort_dir = request.args.get('dir', 'ASC')
2420:    
2421:    # Validate sort parameters
2422:    allowed_columns = ['employeename', 'employeerolename']
2423:    if sort_by not in allowed_columns:
2424:        sort_by = 'employeename'
2425:    if sort_dir not in ['ASC', 'DESC']:
2426:        sort_dir = 'ASC'
2427:    
2428:    # Fix sort_by to use the actual column name
2429:    sort_column = sort_by
2430:    
2431:    conn = None
2432:    try:
2433:        conn = pymysql.connect(
2434:            host='localhost',
2435:            user='root',
2436:            password='V0sp0r0si968!',
2437:            database='sml',
2438:            charset='utf8mb4',
2439:            cursorclass=pymysql.cursors.DictCursor
2440:        )
2441:        
2442:        with conn.cursor() as cursor:
2443:            # Calculate offset
2444:            offset = (page - 1) * per_page
2445:            
2446:            # Get total count first
2447:            count_sql = """
2448:                SELECT COUNT(*) as count
2449:                FROM employee e
2450:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
2451:                WHERE 1=1
2452:            """
2453:            
2454:            # Build the main query
2455:            sql = """
2456:                SELECT 
2457:                    e.employeeid,
2458:                    COALESCE(e.employeename, '') as employeename,
2459:                    COALESCE(e.gender, '') as gender,
2460:                    COALESCE(e.email, '') as email,
2461:                    COALESCE(e.tel, '') as phone,
2462:                    COALESCE(er.employeerolename, '') as employeerolename
2463:                FROM employee e
2464:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
2465:                WHERE 1=1
2466:            """
2467:            
2468:            params = []
2469:            
2470:            # Add search condition if provided
2471:            if search:
2472:                search_param = f"%{search}%"
2473:                count_sql += """ AND (
2474:                    e.employeename LIKE %s OR
2475:                    e.email LIKE %s OR
2476:                    e.tel LIKE %s OR
2477:                    er.employeerolename LIKE %s
2478:                )"""
2479:                sql += """ AND (
2480:                    e.employeename LIKE %s OR
2481:                    e.email LIKE %s OR
2482:                    e.tel LIKE %s OR
2483:                    er.employeerolename LIKE %s
2484:                )"""
2485:                params.extend([search_param, search_param, search_param, search_param])
2486:            
2487:            # Get total count
2488:            cursor.execute(count_sql, params)
2489:            total_count = cursor.fetchone()['count']
2490:            total_pages = math.ceil(total_count / per_page)
2491:            
2492:            # Add sorting
2493:            sql += f" ORDER BY {sort_column} {sort_dir}"
2494:            
2495:            # Add pagination
2496:            sql += " LIMIT %s OFFSET %s"
2497:            params.extend([per_page, offset])
2498:            
2499:            cursor.execute(sql, params)
2500:            employees = cursor.fetchall()
2501:            
2502:            # Get employee roles for the dropdown
2503:            cursor.execute("SELECT employeeroleid, employeerolename FROM employeerole ORDER BY employeerolename")
2504:            roles = cursor.fetchall()
2505:            
2506:            return render_template(
2507:                'employees/list.html',
2508:                employees=employees,
2509:                roles=roles,
2510:                current_page=page,
2511:                per_page=per_page,
2512:                total_count=total_count,
2513:                total_pages=total_pages,
2514:                search=search,
2515:                sort_by=sort_by,
2516:                sort_dir=sort_dir
2517:            )
2518:            
2519:    except Exception as e:
2520:        print(f"Error in employee_list: {str(e)}")  # Debug print
2521:        flash(f'Error retrieving employees: {str(e)}', 'error')
2522:        return render_template('employees/list.html', 
2523:                             employees=[], 
2524:                             roles=[], 
2525:                             current_page=1, 
2526:                             per_page=10, 
2527:                             total_count=0, 
2528:                             total_pages=0,
2529:                             search='',
2530:                             sort_by='employeename',
2531:                             sort_dir='ASC')
2532:    finally:
2533:        if conn:
2534:            conn.close()
2535:
2536:@app.route('/create_employee', methods=['POST'])
2537:@login_required
2538:def create_employee():
2539:    try:
2540:        conn = pymysql.connect(
2541:            host='localhost',
2542:            user='root',
2543:            password='V0sp0r0si968!',
2544:            database='sml',
2545:            cursorclass=pymysql.cursors.DictCursor
2546:        )
2547:        
2548:        with conn.cursor() as cursor:
2549:            # Get form data with default values for all fields
2550:            data = {
2551:                'employeename': request.form.get('employeename', ''),
2552:                'transactiontype': request.form.get('transactiontype', 'S'),
2553:                'address': request.form.get('address', ''),
2554:                'address2': request.form.get('address2', ''),
2555:                'zipcode': request.form.get('zipcode', ''),
2556:                'city': request.form.get('city', 'Nicosia'),
2557:                'age': request.form.get('age', '0'),
2558:                'gender': request.form.get('gender', 'Male'),
2559:                'tel': request.form.get('tel', ''),
2560:                'nationality': request.form.get('nationality', 'Cypriot'),
2561:                'email': request.form.get('email', ''),
2562:                'currentworkplace': request.form.get('currentworkplace', 'No'),
2563:                'SocialInsuranceno': request.form.get('SocialInsuranceno', ''),
2564:                'Tattoo': request.form.get('Tattoo', 'No'),
2565:                'AgreementStatus': request.form.get('AgreementStatus', 'No'),
2566:                'CriminalRecordStatus': request.form.get('CriminalRecordStatus', 'No'),
2567:                'TrainingStatus': request.form.get('TrainingStatus', 'No'),
2568:                'Interestforfulltime': request.form.get('Interestforfulltime', 'No'),
2569:                'Repeater': request.form.get('Repeater', 'No'),
2570:                'status': request.form.get('status', 'Active'),
2571:                'passportid': request.form.get('passportid', ''),
2572:                'EmploymentAgreement': request.form.get('EmploymentAgreement', ''),
2573:                'employeeidno': request.form.get('employeeidno', '0'),
2574:                'employeeroleid': request.form.get('employeeroleid', '1'),
2575:                'employeeenglishrating': request.form.get('employeeenglishrating', '1'),
2576:                'employeeExperienceRating': request.form.get('employeeExperienceRating', '1'),
2577:                'contactmethod': request.form.get('contactmethod', 'email'),
2578:                'companyid': request.form.get('companyid', ''),
2579:                'bankid': request.form.get('bankid', ''),
2580:                'swiftno': request.form.get('swiftno', '')
2581:            }
2582:
2583:            # Convert numeric fields
2584:            try:
2585:                data['age'] = int(data['age']) if data['age'] else 0
2586:                data['employeeidno'] = int(data['employeeidno']) if data['employeeidno'] else 0
2587:                data['employeeroleid'] = int(data['employeeroleid']) if data['employeeroleid'] else 1
2588:                if data['companyid']:
2589:                    data['companyid'] = int(data['companyid'])
2590:                if data['bankid']:
2591:                    data['bankid'] = int(data['bankid'])
2592:            except ValueError:
2593:                flash('Invalid numeric value provided', 'error')
2594:                return redirect(url_for('employee_list'))
2595:
2596:            # Validate enum fields
2597:            enums = {
2598:                'transactiontype': ['S', 'B'],
2599:                'city': ['Nicosia', 'Limassol', 'Larnaca', 'Famagusta', 'Paphos'],
2600:                'gender': ['Male', 'Female'],
2601:                'nationality': ['Cypriot', 'EU', 'Foreigner'],
2602:                'currentworkplace': ['Yes', 'No'],
2603:                'Tattoo': ['Yes', 'No'],
2604:                'AgreementStatus': ['Yes', 'No'],
2605:                'CriminalRecordStatus': ['Yes', 'No'],
2606:                'TrainingStatus': ['Yes', 'No'],
2607:                'Interestforfulltime': ['Yes', 'No'],
2608:                'Repeater': ['Yes', 'No'],
2609:                'status': ['Active', 'Inactive'],
2610:                'employeeenglishrating': ['1', '2', '3', '4', '5'],
2611:                'employeeExperienceRating': ['1', '2', '3', '4', '5'],
2612:                'contactmethod': ['email', 'sms']
2613:            }
2614:
2615:            # Validate and set default values for enum fields
2616:            for field, valid_values in enums.items():
2617:                if data[field] not in valid_values:
2618:                    data[field] = valid_values[0]  # Set to first valid value if invalid
2619:
2620:            # Check which fields exist in the employee table
2621:            cursor.execute("DESCRIBE employee")
2622:            valid_fields = [column['Field'] for column in cursor.fetchall()]
2623:            
2624:            # Filter data to include only valid fields
2625:            filtered_data = {k: v for k, v in data.items() if k in valid_fields}
2626:            
2627:            # Build the INSERT query
2628:            fields = list(filtered_data.keys())
2629:            placeholders = ', '.join(['%s'] * len(fields))
2630:            columns = ', '.join(fields)
2631:            query = f"INSERT INTO employee ({columns}) VALUES ({placeholders})"
2632:            values = list(filtered_data.values())
2633:            
2634:            cursor.execute(query, values)
2635:            conn.commit()
2636:            flash('Employee created successfully!', 'success')
2637:            
2638:    except Exception as e:
2639:        print(f"Error in create_employee: {str(e)}")  # Debug print
2640:        flash(f'Error creating employee: {str(e)}', 'error')
2641:    finally:
2642:        if 'conn' in locals():
2643:            conn.close()
2644:    
2645:    return redirect(url_for('employee_list'))
2646:
2647:@app.route('/employees/<int:employee_id>/edit', methods=['GET', 'POST'])
2648:@login_required
2649:def edit_employee(employee_id):
2650:    try:
2651:        conn = pymysql.connect(
2652:            host='localhost',
2653:            user='root',
2654:            password='V0sp0r0si968!',
2655:            database='sml',
2656:            cursorclass=pymysql.cursors.DictCursor
2657:        )
2658:        
2659:        with conn.cursor() as cursor:
2660:            if request.method == 'POST':
2661:                # Get form data with default values for all fields
2662:                data = {
2663:                    'employeename': request.form.get('employeename', ''),
2664:                    'transactiontype': request.form.get('transactiontype', 'S'),
2665:                    'address': request.form.get('address', ''),
2666:                    'address2': request.form.get('address2', ''),
2667:                    'zipcode': request.form.get('zipcode', ''),
2668:                    'city': request.form.get('city', 'Nicosia'),
2669:                    'age': request.form.get('age', '0'),
2670:                    'gender': request.form.get('gender', 'Male'),
2671:                    'tel': request.form.get('tel', ''),
2672:                    'nationality': request.form.get('nationality', 'Cypriot'),
2673:                    'email': request.form.get('email', ''),
2674:                    'currentworkplace': request.form.get('currentworkplace', 'No'),
2675:                    'SocialInsuranceno': request.form.get('SocialInsuranceno', ''),
2676:                    'Tattoo': request.form.get('Tattoo', 'No'),
2677:                    'AgreementStatus': request.form.get('AgreementStatus', 'No'),
2678:                    'CriminalRecordStatus': request.form.get('CriminalRecordStatus', 'No'),
2679:                    'TrainingStatus': request.form.get('TrainingStatus', 'No'),
2680:                    'Interestforfulltime': request.form.get('Interestforfulltime', 'No'),
2681:                    'Repeater': request.form.get('Repeater', 'No'),
2682:                    'status': request.form.get('status', 'Active'),
2683:                    'passportid': request.form.get('passportid', ''),
2684:                    'EmploymentAgreement': request.form.get('EmploymentAgreement', ''),
2685:                    'employeeidno': request.form.get('employeeidno', '0'),
2686:                    'employeeroleid': request.form.get('employeeroleid', '1'),
2687:                    'employeeenglishrating': request.form.get('employeeenglishrating', '1'),
2688:                    'employeeExperienceRating': request.form.get('employeeExperienceRating', '1'),
2689:                    'contactmethod': request.form.get('contactmethod', 'email'),
2690:                    'companyid': request.form.get('companyid', ''),
2691:                    'bankid': request.form.get('bankid', ''),
2692:                    'swiftno': request.form.get('swiftno', '')
2693:                }
2694:
2695:                # Convert numeric fields
2696:                try:
2697:                    data['age'] = int(data['age']) if data['age'] else 0
2698:                    data['employeeidno'] = int(data['employeeidno']) if data['employeeidno'] else 0
2699:                    data['employeeroleid'] = int(data['employeeroleid']) if data['employeeroleid'] else 1
2700:                    if data['companyid']:
2701:                        data['companyid'] = int(data['companyid'])
2702:                    if data['bankid']:
2703:                        data['bankid'] = int(data['bankid'])
2704:                except ValueError:
2705:                    flash('Invalid numeric value provided', 'error')
2706:                    return redirect(url_for('employee_list'))
2707:
2708:                # Validate enum fields
2709:                enums = {
2710:                    'transactiontype': ['S', 'B'],
2711:                    'city': ['Nicosia', 'Limassol', 'Larnaca', 'Famagusta', 'Paphos'],
2712:                    'gender': ['Male', 'Female'],
2713:                    'nationality': ['Cypriot', 'EU', 'Foreigner'],
2714:                    'currentworkplace': ['Yes', 'No'],
2715:                    'Tattoo': ['Yes', 'No'],
2716:                    'AgreementStatus': ['Yes', 'No'],
2717:                    'CriminalRecordStatus': ['Yes', 'No'],
2718:                    'TrainingStatus': ['Yes', 'No'],
2719:                    'Interestforfulltime': ['Yes', 'No'],
2720:                    'Repeater': ['Yes', 'No'],
2721:                    'status': ['Active', 'Inactive'],
2722:                    'employeeenglishrating': ['1', '2', '3', '4', '5'],
2723:                    'employeeExperienceRating': ['1', '2', '3', '4', '5'],
2724:                    'contactmethod': ['email', 'sms']
2725:                }
2726:
2727:                # Validate and set default values for enum fields
2728:                for field, valid_values in enums.items():
2729:                    if data[field] not in valid_values:
2730:                        data[field] = valid_values[0]  # Set to first valid value if invalid
2731:
2732:                # Build and execute update query - only update fields that exist in the employee table
2733:                cursor.execute("DESCRIBE employee")
2734:                valid_fields = [column['Field'] for column in cursor.fetchall()]
2735:                
2736:                # Filter data to include only valid fields
2737:                filtered_data = {k: v for k, v in data.items() if k in valid_fields}
2738:                
2739:                # Build the update query
2740:                fields = list(filtered_data.keys())
2741:                placeholders = ', '.join([f"{field} = %s" for field in fields])
2742:                query = f"UPDATE employee SET {placeholders} WHERE employeeid = %s"
2743:                values = list(filtered_data.values()) + [employee_id]
2744:                
2745:                cursor.execute(query, values)
2746:                conn.commit()
2747:                flash('Employee updated successfully!', 'success')
2748:                return redirect(url_for('employee_list'))
2749:            
2750:            # GET request - fetch employee data
2751:            cursor.execute('''
2752:                SELECT 
2753:                    e.*,
2754:                    COALESCE(er.employeerolename, '') as employeerolename
2755:                FROM employee e
2756:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
2757:                WHERE e.employeeid = %s
2758:            ''', (employee_id,))
2759:            
2760:            employee = cursor.fetchone()
2761:            if not employee:
2762:                flash('Employee not found.', 'error')
2763:                return redirect(url_for('employee_list'))
2764:
2765:            # Convert all values to strings and handle None values
2766:            serializable_employee = {}
2767:            for key, value in employee.items():
2768:                if value is None:
2769:                    if key in ['age', 'employeeidno', 'employeeroleid']:
2770:                        serializable_employee[key] = '0'
2771:                    elif key in ['currentworkplace', 'Tattoo', 'AgreementStatus', 
2772:                               'CriminalRecordStatus', 'TrainingStatus', 
2773:                               'Interestforfulltime', 'Repeater']:
2774:                        serializable_employee[key] = 'No'
2775:                    elif key == 'status':
2776:                        serializable_employee[key] = 'Active'
2777:                    elif key in ['employeeenglishrating', 'employeeExperienceRating']:
2778:                        serializable_employee[key] = '1'
2779:                    elif key == 'contactmethod':
2780:                        serializable_employee[key] = 'email'
2781:                    elif key == 'nationality':
2782:                        serializable_employee[key] = 'Cypriot'
2783:                    elif key == 'gender':
2784:                        serializable_employee[key] = 'Male'
2785:                    elif key == 'city':
2786:                        serializable_employee[key] = 'Nicosia'
2787:                    elif key == 'transactiontype':
2788:                        serializable_employee[key] = 'S'
2789:                    else:
2790:                        serializable_employee[key] = ''
2791:                elif isinstance(value, (int, float, decimal.Decimal)):
2792:                    serializable_employee[key] = str(value)
2793:                else:
2794:                    serializable_employee[key] = str(value)
2795:
2796:            # Get roles for dropdown
2797:            cursor.execute('SELECT employeeroleid, employeerolename FROM employeerole ORDER BY employeerolename')
2798:            roles = cursor.fetchall()
2799:            serializable_roles = []
2800:            for role in roles:
2801:                serializable_roles.append({
2802:                    'employeeroleid': str(role['employeeroleid']),
2803:                    'employeerolename': role['employeerolename'] if role['employeerolename'] else ''
2804:                })
2805:                
2806:            # Get companies for dropdown
2807:            cursor.execute('SELECT companyid, companyname, bankid FROM company ORDER BY companyname')
2808:            companies = cursor.fetchall()
2809:            serializable_companies = []
2810:            for company in companies:
2811:                serializable_companies.append({
2812:                    'companyid': str(company['companyid']),
2813:                    'companyname': company['companyname'] if company['companyname'] else '',
2814:                    'bankid': str(company['bankid']) if company['bankid'] else ''
2815:                })
2816:
2817:            # Get banks for dropdown
2818:            cursor.execute('SELECT bankid, bankname, biccode FROM banks ORDER BY bankname')
2819:            banks = cursor.fetchall()
2820:            serializable_banks = []
2821:            for bank in banks:
2822:                serializable_banks.append({
2823:                    'bankid': str(bank['bankid']),
2824:                    'bankname': bank['bankname'] if bank['bankname'] else '',
2825:                    'biccode': bank['biccode'] if bank['biccode'] else ''
2826:                })
2827:
2828:            # Define enum values for the template
2829:            template_enums = {
2830:                'cities': ['Nicosia', 'Limassol', 'Larnaca', 'Famagusta', 'Paphos'],
2831:                'genders': ['Male', 'Female'],
2832:                'nationalities': ['Cypriot', 'EU', 'Foreigner'],
2833:                'yes_no': ['Yes', 'No'],
2834:                'ratings': ['1', '2', '3', '4', '5'],
2835:                'contact_methods': ['email', 'sms'],
2836:                'transaction_types': ['S', 'B'],
2837:                'statuses': ['Active', 'Inactive']
2838:            }
2839:
2840:            return render_template('employees/unified/employee_form.html',
2841:                                 is_edit_mode=True,
2842:                                 employee=serializable_employee,
2843:                                 roles=serializable_roles,
2844:                                 companies=serializable_companies,
2845:                                 banks=serializable_banks,
2846:                                 enums=template_enums)
2847:            
2848:    except Exception as e:
2849:        print(f"Error in edit_employee: {str(e)}")  # Debug print
2850:        flash(f'Error editing employee: {str(e)}', 'error')
2851:        return redirect(url_for('employee_list'))
2852:    finally:
2853:        if 'conn' in locals():
2854:            conn.close()
2855:
2856:@app.route('/employees/<int:employee_id>/delete', methods=['POST'])
2857:@login_required
2858:def delete_employee(employee_id):
2859:    try:
2860:        conn = pymysql.connect(
2861:            host='localhost',
2862:            user='root',
2863:            password='V0sp0r0si968!',
2864:            database='sml',
2865:            cursorclass=pymysql.cursors.DictCursor
2866:        )
2867:        
2868:        with conn.cursor() as cursor:
2869:            # Check if employee has associated shifts
2870:            cursor.execute('''
2871:                SELECT COUNT(*) as count 
2872:                FROM employee_shifts 
2873:                WHERE employeeid = %s
2874:            ''', (employee_id,))
2875:            
2876:            shift_count = cursor.fetchone()['count']
2877:            if shift_count > 0:
2878:                flash(f'Cannot delete employee: They have {shift_count} assigned shifts. Please remove these assignments first.', 'error')
2879:                return redirect(url_for('employee_list'))
2880:            
2881:            # If no shifts, proceed with deletion
2882:            cursor.execute('DELETE FROM employee WHERE employeeid = %s', (employee_id,))
2883:            conn.commit()
2884:            flash('Employee deleted successfully!', 'success')
2885:            
2886:    except Exception as e:
2887:        print(f"Error in delete_employee: {str(e)}")  # Debug print
2888:        flash(f'Error deleting employee: {str(e)}', 'error')
2889:    finally:
2890:        if 'conn' in locals():
2891:            conn.close()
2892:    
2893:    return redirect(url_for('employee_list'))
2894:
2895:@app.route('/delete_multiple_employees', methods=['POST'])
2896:@login_required
2897:def delete_multiple_employees():
2898:    try:
2899:        # Get the list of employee IDs to delete
2900:        employee_ids_json = request.form.get('employee_ids', '[]')
2901:        employee_ids = json.loads(employee_ids_json)
2902:        
2903:        if not employee_ids:
2904:            flash('No employees selected for deletion.', 'warning')
2905:            return redirect(url_for('employee_list'))
2906:        
2907:        conn = pymysql.connect(
2908:            host='localhost',
2909:            user='root',
2910:            password='V0sp0r0si968!',
2911:            database='sml',
2912:            cursorclass=pymysql.cursors.DictCursor
2913:        )
2914:        
2915:        try:
2916:            with conn.cursor() as cursor:
2917:                # Format the IDs for the SQL IN clause
2918:                id_placeholder = ','.join(['%s'] * len(employee_ids))
2919:                
2920:                # Check if any employees have associated shifts
2921:                cursor.execute(f'''
2922:                    SELECT e.employeeid, e.employeename, COUNT(es.shiftid) as shift_count
2923:                    FROM employee e
2924:                    LEFT JOIN employee_shifts es ON e.employeeid = es.employeeid
2925:                    WHERE e.employeeid IN ({id_placeholder})
2926:                    GROUP BY e.employeeid, e.employeename
2927:                    HAVING COUNT(es.shiftid) > 0
2928:                ''', employee_ids)
2929:                
2930:                employees_with_shifts = cursor.fetchall()
2931:                if employees_with_shifts:
2932:                    # Some employees have shifts, show error message
2933:                    employee_names = ', '.join([f"{e['employeename']} ({e['shift_count']} shifts)" for e in employees_with_shifts])
2934:                    flash(f'Cannot delete employees with assigned shifts: {employee_names}', 'error')
2935:                    return redirect(url_for('employee_list'))
2936:                
2937:                # Delete employees without shifts
2938:                cursor.execute(f'''
2939:                    DELETE FROM employee
2940:                    WHERE employeeid IN ({id_placeholder})
2941:                ''', employee_ids)
2942:                
2943:                deleted_count = cursor.rowcount
2944:                conn.commit()
2945:                flash(f'Successfully deleted {deleted_count} employees.', 'success')
2946:            
2947:        except Exception as e:
2948:            conn.rollback()
2949:            flash(f'Error deleting employees: {str(e)}', 'error')
2950:        finally:
2951:            conn.close()
2952:    except Exception as e:
2953:        flash(f'Error processing request: {str(e)}', 'error')
2954:    
2955:    return redirect(url_for('employee_list'))
2956:
2957:@app.route('/employees/<int:employee_id>/agreement', methods=['GET'])
2958:@login_required
2959:def view_employee_agreement(employee_id):
2960:    try:
2961:        conn = pymysql.connect(
2962:            host='localhost',
2963:            user='root',
2964:            password='V0sp0r0si968!',
2965:            database='sml',
2966:            cursorclass=pymysql.cursors.DictCursor
2967:        )
2968:        
2969:        with conn.cursor() as cursor:
2970:            # Get employee details
2971:            cursor.execute('''
2972:                SELECT 
2973:                    e.*,
2974:                    COALESCE(er.employeerolename, '') as employeerolename
2975:                FROM employee e
2976:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
2977:                WHERE e.employeeid = %s
2978:            ''', (employee_id,))
2979:            
2980:            employee = cursor.fetchone()
2981:            if not employee:
2982:                flash('Employee not found.', 'error')
2983:                return redirect(url_for('employee_list'))
2984:            
2985:            # Check if agreement exists
2986:            if not employee.get('EmploymentAgreement'):
2987:                flash('No employment agreement found for this employee.', 'warning')
2988:                return redirect(url_for('edit_employee', employee_id=employee_id))
2989:            
2990:            # Get company details
2991:            company = None
2992:            if employee.get('companyid'):
2993:                cursor.execute('SELECT * FROM company WHERE companyid = %s', (employee['companyid'],))
2994:                company = cursor.fetchone()
2995:            
2996:            # For demonstration, we're rendering a template with the agreement details
2997:            # In a real system, this might serve a PDF file
2998:            return render_template('employees/agreement.html',
2999:                                 employee=safe_serialize(employee),
3000:                                 company=safe_serialize(company) if company else None,
3001:                                 current_date=datetime.now().strftime('%Y-%m-%d'))
3002:    
3003:    except Exception as e:
3004:        print(f"Error in view_employee_agreement: {str(e)}")  # Debug print
3005:        flash(f'Error viewing agreement: {str(e)}', 'error')
3006:        return redirect(url_for('employee_list'))
3007:    finally:
3008:        if 'conn' in locals():
3009:            conn.close()
3010:
3011:@app.route('/employees/<int:employee_id>/agreement/generate', methods=['POST'])
3012:@login_required
3013:def generate_employee_agreement(employee_id):
3014:    try:
3015:        conn = pymysql.connect(
3016:            host='localhost',
3017:            user='root',
3018:            password='V0sp0r0si968!',
3019:            database='sml',
3020:            cursorclass=pymysql.cursors.DictCursor
3021:        )
3022:        
3023:        with conn.cursor() as cursor:
3024:            # Get form data
3025:            start_date = request.form.get('start_date')
3026:            end_date = request.form.get('end_date')
3027:            hourly_rate = request.form.get('hourly_rate')
3028:            terms = request.form.get('terms')
3029:            
3030:            # Create agreement text
3031:            agreement_text = f"""Start Date: {start_date}
3032:End Date: {end_date}
3033:Hourly Rate: €{hourly_rate}
3034:
3035:Terms and Conditions:
3036:{terms}"""
3037:            
3038:            # Update employee with new agreement
3039:            cursor.execute('''
3040:                UPDATE employee 
3041:                SET EmploymentAgreement = %s
3042:                WHERE employeeid = %s
3043:            ''', (agreement_text, employee_id))
3044:            
3045:            conn.commit()
3046:            flash('Employee agreement updated successfully!', 'success')
3047:            
3048:            return redirect(url_for('view_employee_agreement', employee_id=employee_id))
3049:            
3050:    except Exception as e:
3051:        flash(f'Error generating employee agreement: {str(e)}', 'error')
3052:        return redirect(url_for('view_employee_agreement', employee_id=employee_id))
3053:    finally:
3054:        if 'conn' in locals():
3055:            conn.close()
3056:
3057:@app.route('/invoice_list')
3058:@login_required
3059:def invoice_list():
3060:    try:
3061:        # Get pagination parameters
3062:        page = request.args.get('page', 1, type=int)
3063:        per_page = request.args.get('per_page', 10, type=int)
3064:        search = request.args.get('search', '')
3065:        sort_by = request.args.get('sort', 'invoice_date')
3066:        sort_dir = request.args.get('dir', 'DESC')
3067:        
3068:        conn = pymysql.connect(
3069:            host='localhost',
3070:            user='root',
3071:            password='V0sp0r0si968!',
3072:            database='sml',
3073:            cursorclass=pymysql.cursors.DictCursor
3074:        )
3075:        
3076:        with conn.cursor() as cursor:
3077:            # Build the base query
3078:            query = '''
3079:                SELECT 
3080:                    i.*,
3081:                    c.customername,
3082:                    e.EventName as event_name
3083:                FROM invoice i
3084:                LEFT JOIN customer c ON i.customer_id = c.customerid
3085:                LEFT JOIN event e ON i.event_id = e.EventID
3086:                WHERE 1=1
3087:            '''
3088:            
3089:            params = []
3090:            
3091:            # Add search condition if provided
3092:            if search:
3093:                query += ''' AND (
3094:                    i.invoice_number LIKE %s OR
3095:                    c.customername LIKE %s OR
3096:                    e.EventName LIKE %s OR
3097:                    i.status LIKE %s
3098:                )'''
3099:                search_term = f'%{search}%'
3100:                params.extend([search_term, search_term, search_term, search_term])
3101:            
3102:            # Get total count for pagination
3103:            count_query = f"SELECT COUNT(*) as total FROM ({query}) as t"
3104:            cursor.execute(count_query, params)
3105:            total_count = cursor.fetchone()['total']
3106:            
3107:            # Add sorting
3108:            if sort_by in ['invoice_date', 'invoice_number', 'status', 'total']:
3109:                query += f' ORDER BY i.{sort_by} {sort_dir}'
3110:            elif sort_by == 'customername':
3111:                query += f' ORDER BY c.customername {sort_dir}'
3112:            elif sort_by == 'event_name':
3113:                query += f' ORDER BY e.EventName {sort_dir}'
3114:            
3115:            # Add pagination
3116:            query += ' LIMIT %s OFFSET %s'
3117:            offset = (page - 1) * per_page
3118:            params.extend([per_page, offset])
3119:            
3120:            # Execute final query
3121:            cursor.execute(query, params)
3122:            invoices = cursor.fetchall()
3123:            
3124:            # Calculate total pages
3125:            total_pages = (total_count + per_page - 1) // per_page
3126:            
3127:            # Get customers for filtering
3128:            cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
3129:            customers = cursor.fetchall()
3130:            
3131:            return render_template('invoices/list.html',
3132:                                 invoices=invoices,
3133:                                 customers=customers,
3134:                                 current_page=page,
3135:                                 total_pages=total_pages,
3136:                                 total_count=total_count,
3137:                                 per_page=per_page,
3138:                                 search=search,
3139:                                 sort_by=sort_by,
3140:                                 sort_dir=sort_dir)
3141:                                 
3142:    except Exception as e:
3143:        flash(f'Error loading invoices: {str(e)}', 'error')
3144:        return render_template('invoices/list.html',
3145:                             invoices=[],
3146:                             customers=[],
3147:                             current_page=1,
3148:                             total_pages=1,
3149:                             total_count=0,
3150:                             per_page=10,
3151:                             search='',
3152:                             sort_by='invoice_date',
3153:                             sort_dir='DESC')
3154:    finally:
3155:        if 'conn' in locals():
3156:            conn.close()
3157:
3158:@app.route('/invoice/create', methods=['GET', 'POST'])
3159:@login_required
3160:def invoice_create():
3161:    if request.method == 'POST':
3162:        try:
3163:            data = request.form
3164:            conn = pymysql.connect(
3165:                host='localhost',
3166:                user='root',
3167:                password='V0sp0r0si968!',
3168:                database='sml',
3169:                cursorclass=pymysql.cursors.DictCursor
3170:            )
3171:            
3172:            with conn.cursor() as cursor:
3173:                # Insert invoice
3174:                cursor.execute('''
3175:                    INSERT INTO invoice (
3176:                        customer_id, event_id, invoice_date, due_date,
3177:                        invoice_number, status, vat_rate, notes,
3178:                        subtotal, vat_amount, total
3179:                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
3180:                ''', (
3181:                    data['customer_id'],
3182:                    data['event_id'] if data['event_id'] else None,
3183:                    data['invoice_date'],
3184:                    data['due_date'] if data['due_date'] else None,
3185:                    data['invoice_number'],
3186:                    'Draft',
3187:                    data['vat_rate'],
3188:                    data['notes'],
3189:                    data['subtotal'],
3190:                    data['vat_amount'],
3191:                    data['total']
3192:                ))
3193:                
3194:                invoice_id = cursor.lastrowid
3195:                
3196:                # Insert invoice items
3197:                items = json.loads(data['items'])
3198:                for item in items:
3199:                    cursor.execute('''
3200:                        INSERT INTO invoice_item (
3201:                            invoice_id, description, quantity,
3202:                            unit_price, total
3203:                        ) VALUES (%s, %s, %s, %s, %s)
3204:                    ''', (
3205:                        invoice_id,
3206:                        item['description'],
3207:                        item['quantity'],
3208:                        item['unit_price'],
3209:                        item['total']
3210:                    ))
3211:                
3212:                conn.commit()
3213:                flash('Invoice created successfully', 'success')
3214:                return redirect(url_for('invoice_view', invoice_id=invoice_id))
3215:                
3216:        except Exception as e:
3217:            if 'conn' in locals():
3218:                conn.rollback()
3219:            flash(f'Error creating invoice: {str(e)}', 'error')
3220:            return redirect(url_for('invoice_create'))
3221:        finally:
3222:            if 'conn' in locals():
3223:                conn.close()
3224:    
3225:    # GET request - show create form
3226:    try:
3227:        conn = pymysql.connect(
3228:            host='localhost',
3229:            user='root',
3230:            password='V0sp0r0si968!',
3231:            database='sml',
3232:            cursorclass=pymysql.cursors.DictCursor
3233:        )
3234:        
3235:        with conn.cursor() as cursor:
3236:            # Get customers
3237:            cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
3238:            customers = cursor.fetchall()
3239:            
3240:            # Get events
3241:            cursor.execute('SELECT EventID, EventName FROM event ORDER BY EventName')
3242:            events = cursor.fetchall()
3243:            
3244:            return render_template('invoices/form.html',
3245:                                 customers=customers,
3246:                                 events=events,
3247:                                 invoice=None,
3248:                                 items=[],
3249:                                 mode='create')
3250:    except Exception as e:
3251:        flash(f'Error loading form data: {str(e)}', 'error')
3252:        return redirect(url_for('invoice_list'))
3253:    finally:
3254:        if 'conn' in locals():
3255:            conn.close()
3256:
3257:@app.route('/invoice/<int:invoice_id>')
3258:@login_required
3259:def invoice_view(invoice_id):
3260:    try:
3261:        conn = pymysql.connect(
3262:            host='localhost',
3263:            user='root',
3264:            password='V0sp0r0si968!',
3265:            database='sml',
3266:            cursorclass=pymysql.cursors.DictCursor
3267:        )
3268:        
3269:        with conn.cursor() as cursor:
3270:            # Get invoice details
3271:            cursor.execute('''
3272:                SELECT 
3273:                    i.*,
3274:                    c.customername,
3275:                    e.EventName as event_name
3276:                FROM invoice i
3277:                LEFT JOIN customer c ON i.customer_id = c.customerid
3278:                LEFT JOIN event e ON i.event_id = e.EventID
3279:                WHERE i.invoice_id = %s
3280:            ''', (invoice_id,))
3281:            invoice = cursor.fetchone()
3282:            
3283:            if not invoice:
3284:                flash('Invoice not found', 'error')
3285:                return redirect(url_for('invoice_list'))
3286:            
3287:            # Get invoice items
3288:            cursor.execute('SELECT * FROM invoice_item WHERE invoice_id = %s', (invoice_id,))
3289:            items = cursor.fetchall()
3290:            
3291:            # Debug: Print the structure of the first item
3292:            if items and len(items) > 0:
3293:                print("Invoice Item Keys:", items[0].keys())
3294:                print("First Item:", items[0])
3295:            
3296:            return render_template('invoices/view.html',
3297:                                 invoice=invoice,
3298:                                 items=items)
3299:    except Exception as e:
3300:        flash(f'Error loading invoice: {str(e)}', 'error')
3301:        return redirect(url_for('invoice_list'))
3302:    finally:
3303:        if 'conn' in locals():
3304:            conn.close()
3305:
3306:@app.route('/invoice/<int:invoice_id>/edit', methods=['GET', 'POST'])
3307:@login_required
3308:def invoice_edit(invoice_id):
3309:    if request.method == 'POST':
3310:        try:
3311:            data = request.form
3312:            conn = pymysql.connect(
3313:                host='localhost',
3314:                user='root',
3315:                password='V0sp0r0si968!',
3316:                database='sml',
3317:                cursorclass=pymysql.cursors.DictCursor
3318:            )
3319:            
3320:            with conn.cursor() as cursor:
3321:                # Update invoice
3322:                cursor.execute('''
3323:                    UPDATE invoice SET
3324:                        customer_id = %s,
3325:                        event_id = %s,
3326:                        invoice_date = %s,
3327:                        due_date = %s,
3328:                        invoice_number = %s,
3329:                        status = %s,
3330:                        vat_rate = %s,
3331:                        notes = %s,
3332:                        subtotal = %s,
3333:                        vat_amount = %s,
3334:                        total = %s
3335:                    WHERE invoice_id = %s
3336:                ''', (
3337:                    data['customer_id'],
3338:                    data['event_id'] if data['event_id'] else None,
3339:                    data['invoice_date'],
3340:                    data['due_date'] if data['due_date'] else None,
3341:                    data['invoice_number'],
3342:                    data['status'],
3343:                    data['vat_rate'],
3344:                    data['notes'],
3345:                    data['subtotal'],
3346:                    data['vat_amount'],
3347:                    data['total'],
3348:                    invoice_id
3349:                ))
3350:                
3351:                # Delete existing items
3352:                cursor.execute('DELETE FROM invoice_item WHERE invoice_id = %s', (invoice_id,))
3353:                
3354:                # Insert updated items
3355:                items = json.loads(data['items'])
3356:                for item in items:
3357:                    cursor.execute('''
3358:                        INSERT INTO invoice_item (
3359:                            invoice_id, description, quantity,
3360:                            unit_price, total
3361:                        ) VALUES (%s, %s, %s, %s, %s)
3362:                    ''', (
3363:                        invoice_id,
3364:                        item['description'],
3365:                        item['quantity'],
3366:                        item['unit_price'],
3367:                        item['total']
3368:                    ))
3369:                
3370:                conn.commit()
3371:                flash('Invoice updated successfully', 'success')
3372:                return redirect(url_for('invoice_view', invoice_id=invoice_id))
3373:                
3374:        except Exception as e:
3375:            if 'conn' in locals():
3376:                conn.rollback()
3377:            flash(f'Error updating invoice: {str(e)}', 'error')
3378:            return redirect(url_for('invoice_edit', invoice_id=invoice_id))
3379:        finally:
3380:            if 'conn' in locals():
3381:                conn.close()
3382:    
3383:    # GET request - show edit form
3384:    try:
3385:        conn = pymysql.connect(
3386:            host='localhost',
3387:            user='root',
3388:            password='V0sp0r0si968!',
3389:            database='sml',
3390:            cursorclass=pymysql.cursors.DictCursor
3391:        )
3392:        
3393:        with conn.cursor() as cursor:
3394:            # Get invoice details
3395:            cursor.execute('''
3396:                SELECT * FROM invoice WHERE invoice_id = %s
3397:            ''', (invoice_id,))
3398:            invoice = cursor.fetchone()
3399:            
3400:            if not invoice:
3401:                flash('Invoice not found', 'error')
3402:                return redirect(url_for('invoice_list'))
3403:            
3404:            # Get invoice items
3405:            cursor.execute('SELECT * FROM invoice_item WHERE invoice_id = %s', (invoice_id,))
3406:            items = cursor.fetchall()
3407:            
3408:            # Debug: Print the column names and sample data
3409:            if items and len(items) > 0:
3410:                print("Invoice Item Keys:", items[0].keys())
3411:                print("Sample Item Data:", items[0])
3412:            
3413:            # Get customers
3414:            cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
3415:            customers = cursor.fetchall()
3416:            
3417:            # Get events
3418:            cursor.execute('SELECT EventID, EventName FROM event ORDER BY EventName')
3419:            events = cursor.fetchall()
3420:            
3421:            return render_template('invoices/form.html',
3422:                                 invoice=invoice,
3423:                                 items=items,
3424:                                 customers=customers,
3425:                                 events=events,
3426:                                 mode='edit')
3427:    except Exception as e:
3428:        flash(f'Error loading invoice: {str(e)}', 'error')
3429:        return redirect(url_for('invoice_list'))
3430:    finally:
3431:        if 'conn' in locals():
3432:            conn.close()
3433:
3434:@app.route('/invoice/<int:invoice_id>', methods=['DELETE'])
3435:@login_required
3436:def invoice_delete(invoice_id):
3437:    try:
3438:        conn = pymysql.connect(
3439:            host='localhost',
3440:            user='root',
3441:            password='V0sp0r0si968!',
3442:            database='sml',
3443:            cursorclass=pymysql.cursors.DictCursor
3444:        )
3445:        
3446:        with conn.cursor() as cursor:
3447:            # Check if invoice exists and is in Draft status
3448:            cursor.execute('SELECT status FROM invoice WHERE invoice_id = %s', (invoice_id,))
3449:            invoice = cursor.fetchone()
3450:            
3451:            if not invoice:
3452:                return jsonify({'success': False, 'message': 'Invoice not found'})
3453:            
3454:            if invoice['status'] != 'Draft':
3455:                return jsonify({'success': False, 'message': 'Only draft invoices can be deleted'})
3456:            
3457:            # Delete invoice (invoice_items will be deleted automatically due to CASCADE)
3458:            cursor.execute('DELETE FROM invoice WHERE invoice_id = %s', (invoice_id,))
3459:            conn.commit()
3460:            
3461:            return jsonify({'success': True})
3462:            
3463:    except Exception as e:
3464:        if 'conn' in locals():
3465:            conn.rollback()
3466:        return jsonify({'success': False, 'message': str(e)})
3467:    finally:
3468:        if 'conn' in locals():
3469:            conn.close()
3470:
3471:@app.route('/employees/add', methods=['GET'])
3472:@login_required
3473:def add_employee():
3474:    try:
3475:        conn = pymysql.connect(
3476:            host='localhost',
3477:            user='root',
3478:            password='V0sp0r0si968!',
3479:            database='sml',
3480:            cursorclass=pymysql.cursors.DictCursor
3481:        )
3482:        
3483:        with conn.cursor() as cursor:
3484:            # Get roles for dropdown
3485:            cursor.execute('SELECT employeeroleid, employeerolename FROM employeerole ORDER BY employeerolename')
3486:            roles = cursor.fetchall()
3487:            serializable_roles = []
3488:            for role in roles:
3489:                serializable_roles.append({
3490:                    'employeeroleid': str(role['employeeroleid']),
3491:                    'employeerolename': role['employeerolename'] if role['employeerolename'] else ''
3492:                })
3493:                
3494:            # Get companies for dropdown
3495:            cursor.execute('SELECT companyid, companyname, bankid FROM company ORDER BY companyname')
3496:            companies = cursor.fetchall()
3497:            serializable_companies = []
3498:            for company in companies:
3499:                serializable_companies.append({
3500:                    'companyid': str(company['companyid']),
3501:                    'companyname': company['companyname'] if company['companyname'] else '',
3502:                    'bankid': str(company['bankid']) if company['bankid'] else ''
3503:                })
3504:
3505:            # Get banks for dropdown
3506:            cursor.execute('SELECT bankid, bankname, biccode FROM banks ORDER BY bankname')
3507:            banks = cursor.fetchall()
3508:            serializable_banks = []
3509:            for bank in banks:
3510:                serializable_banks.append({
3511:                    'bankid': str(bank['bankid']),
3512:                    'bankname': bank['bankname'] if bank['bankname'] else '',
3513:                    'biccode': bank['biccode'] if bank['biccode'] else ''
3514:                })
3515:
3516:            # Define enum values for the template
3517:            template_enums = {
3518:                'cities': ['Nicosia', 'Limassol', 'Larnaca', 'Famagusta', 'Paphos'],
3519:                'genders': ['Male', 'Female'],
3520:                'nationalities': ['Cypriot', 'EU', 'Foreigner'],
3521:                'yes_no': ['Yes', 'No'],
3522:                'ratings': ['1', '2', '3', '4', '5'],
3523:                'contact_methods': ['email', 'sms'],
3524:                'transaction_types': ['S', 'B'],
3525:                'statuses': ['Active', 'Inactive']
3526:            }
3527:
3528:            # Create default employee for the form
3529:            default_employee = {
3530:                'employeename': '',
3531:                'transactiontype': 'S',
3532:                'address': '',
3533:                'address2': '',
3534:                'zipcode': '',
3535:                'city': 'Nicosia',
3536:                'age': '0',
3537:                'gender': 'Male',
3538:                'tel': '',
3539:                'nationality': 'Cypriot',
3540:                'email': '',
3541:                'currentworkplace': 'No',
3542:                'SocialInsuranceno': '',
3543:                'Tattoo': 'No',
3544:                'AgreementStatus': 'No',
3545:                'CriminalRecordStatus': 'No',
3546:                'TrainingStatus': 'No',
3547:                'Interestforfulltime': 'No',
3548:                'Repeater': 'No',
3549:                'status': 'Active',
3550:                'passportid': '',
3551:                'EmploymentAgreement': '',
3552:                'employeeidno': '0',
3553:                'employeeroleid': '1',
3554:                'employeeenglishrating': '1',
3555:                'employeeExperienceRating': '1',
3556:                'contactmethod': 'email',
3557:                'bankid': '',
3558:                'companyid': '',
3559:                'swiftno': ''
3560:            }
3561:
3562:            return render_template('employees/unified/employee_form.html',
3563:                                 is_edit_mode=False,
3564:                                 employee=default_employee,
3565:                                 roles=serializable_roles,
3566:                                 companies=serializable_companies,
3567:                                 banks=serializable_banks,
3568:                                 enums=template_enums)
3569:            
3570:    except Exception as e:
3571:        print(f"Error in add_employee: {str(e)}")  # Debug print
3572:        flash(f'Error preparing employee form: {str(e)}', 'error')
3573:        return redirect(url_for('employee_list'))
3574:    finally:
3575:        if 'conn' in locals():
3576:            conn.close()
3577:
3578:@app.route('/companies/add', methods=['GET'])
3579:@login_required
3580:def add_company_page():
3581:    """Display the add company page."""
3582:    try:
3583:        conn = pymysql.connect(
3584:            host='localhost',
3585:            user='root',
3586:            password='V0sp0r0si968!',
3587:            database='sml',
3588:            cursorclass=pymysql.cursors.DictCursor
3589:        )
3590:        
3591:        with conn.cursor() as cursor:
3592:            # Get the count of existing companies
3593:            cursor.execute('SELECT COUNT(*) as count FROM company')
3594:            company_count = cursor.fetchone()['count']
3595:            
3596:            if company_count >= 1:
3597:                flash('Cannot create a new company: Only one company is allowed in the system.', 'error')
3598:                return redirect(url_for('company_list'))
3599:            
3600:            # Get banks for dropdown
3601:            cursor.execute('SELECT bankid, bankname FROM banks ORDER BY bankname')
3602:            banks = cursor.fetchall()
3603:            
3604:            return render_template('companies/unified/company_form.html', 
3605:                                  is_edit_mode=False, 
3606:                                  banks=banks)
3607:    except Exception as e:
3608:        flash(f'Error loading form: {str(e)}', 'error')
3609:        return redirect(url_for('company_list'))
3610:    finally:
3611:        if 'conn' in locals():
3612:            conn.close()
3613:
3614:@app.route('/companies/<int:company_id>/employees')
3615:@login_required
3616:def company_employees(company_id):
3617:    """Display employees for a specific company."""
3618:    try:
3619:        conn = pymysql.connect(
3620:            host='localhost',
3621:            user='root',
3622:            password='V0sp0r0si968!',
3623:            database='sml',
3624:            cursorclass=pymysql.cursors.DictCursor
3625:        )
3626:        
3627:        with conn.cursor() as cursor:
3628:            # Get company details
3629:            cursor.execute('SELECT * FROM company WHERE companyid = %s', (company_id,))
3630:            company = cursor.fetchone()
3631:            
3632:            if not company:
3633:                flash('Company not found.', 'error')
3634:                return redirect(url_for('company_list'))
3635:            
3636:            # Get employees for this company
3637:            cursor.execute('''
3638:                SELECT 
3639:                    e.employeeid,
3640:                    e.employeename,
3641:                    e.gender,
3642:                    e.email,
3643:                    e.tel,
3644:                    e.status,
3645:                    COALESCE(er.employeerolename, '') as role
3646:                FROM employee e
3647:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
3648:                WHERE e.companyid = %s
3649:                ORDER BY e.employeename
3650:            ''', (company_id,))
3651:            
3652:            employees = cursor.fetchall()
3653:            
3654:            return render_template('companies/employees.html',
3655:                                 company=company,
3656:                                 employees=employees)
3657:    except Exception as e:
3658:        flash(f'Error loading company employees: {str(e)}', 'error')
3659:        return redirect(url_for('company_list'))
3660:    finally:
3661:        if 'conn' in locals():
3662:            conn.close()
3663:
3664:@app.route('/events/create', methods=['GET'])
3665:@login_required
3666:def create_event_page():
3667:    """Display the create event page."""
3668:    try:
3669:        conn = pymysql.connect(
3670:            host='localhost',
3671:            user='root',
3672:            password='V0sp0r0si968!',
3673:            database='sml',
3674:            cursorclass=pymysql.cursors.DictCursor
3675:        )
3676:        
3677:        with conn.cursor() as cursor:
3678:            # Get customers for dropdown
3679:            cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
3680:            customers = cursor.fetchall()
3681:            
3682:            # Get default company
3683:            cursor.execute('SELECT * FROM company LIMIT 1')
3684:            company = cursor.fetchone()
3685:            
3686:            # Get all employees for potential assignment
3687:            cursor.execute('''
3688:                SELECT 
3689:                    e.employeeid,
3690:                    e.employeename,
3691:                    e.gender,
3692:                    e.email,
3693:                    e.tel,
3694:                    e.age,
3695:                    e.nationality,
3696:                    e.employeeidno,
3697:                    e.passportid,
3698:                    e.employeeenglishrating,
3699:                    e.employeeExperienceRating,
3700:                    er.employeerolename as role
3701:                FROM employee e
3702:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
3703:                WHERE e.status = 'Active'
3704:                ORDER BY e.employeename
3705:            ''')
3706:            
3707:            employees_raw = cursor.fetchall()
3708:            
3709:            # Format employees for JavaScript
3710:            employees = []
3711:            for emp in employees_raw:
3712:                role_value = emp['role'] or ''  # Use empty string instead of None
3713:                employees.append({
3714:                    'employeeid': int(emp['employeeid']),
3715:                    'employeename': emp['employeename'],
3716:                    'gender': emp['gender'],
3717:                    'email': emp['email'],
3718:                    'tel': emp['tel'],
3719:                    'age': emp['age'],
3720:                    'nationality': emp['nationality'],
3721:                    'employeeidno': emp['employeeidno'],
3722:                    'passportid': emp['passportid'],
3723:                    'employeeenglishrating': emp['employeeenglishrating'],
3724:                    'employeeExperienceRating': emp['employeeExperienceRating'],
3725:                    'englishrating': emp['employeeenglishrating'],
3726:                    'experiencerating': emp['employeeExperienceRating'],
3727:                    'role': role_value,
3728:                    'employeerolename': role_value  # Add both fields for consistency
3729:                })
3730:            
3731:            # Default event details
3732:            event = {
3733:                'EventName': '',
3734:                'EventStart': '',
3735:                'EventEnd': '',
3736:                'EventLocation': '',
3737:                'notes': '',
3738:                'Customerid': '',
3739:                'EventStage': 'Draft',
3740:                'WaitersNeeded': '0',
3741:                'BartendersNeeded': '0',
3742:                'MaleEmployees': '0',
3743:                'FemaleEmployees': '0',
3744:                'TotalEmployees': '0',
3745:                'EventDurationHours': '0',
3746:                'EventTotalHours': '0',
3747:                'EventPerHourcost': '0',
3748:                'EventPerHourselling': '0',
3749:                'totalhours': '0',
3750:                'totalcost': '0',
3751:                'totalselling': '0',
3752:                'totalprofit': '0',
3753:                'totalshifthours': '0'
3754:            }
3755:            
3756:            # Empty shifts array for new events
3757:            formatted_shifts = []
3758:            
3759:            return render_template('events/unified/event_form.html',
3760:                                 is_edit_mode=False,
3761:                                 event=event,
3762:                                 customers=customers,
3763:                                 company=company,
3764:                                 shifts=formatted_shifts,
3765:                                 employees=employees)
3766:                                 
3767:    except Exception as e:
3768:        flash(f'Error loading create event form: {str(e)}', 'error')
3769:        return redirect(url_for('event_list'))
3770:    finally:
3771:        if 'conn' in locals():
3772:            conn.close()
3773:
3774:@app.route('/events/<int:event_id>/edit', methods=['GET'])
3775:@login_required
3776:def edit_event_unified(event_id):
3777:    """Display the edit event page."""
3778:    try:
3779:        # Set up logging
3780:        import logging
3781:        logging.basicConfig(filename='debug.log', level=logging.DEBUG, format='%(asctime)s - %(message)s')
3782:        
3783:        conn = pymysql.connect(
3784:            host='localhost',
3785:            user='root',
3786:            password='V0sp0r0si968!',
3787:            database='sml',
3788:            cursorclass=pymysql.cursors.DictCursor
3789:        )
3790:        
3791:        with conn.cursor() as cursor:
3792:            # Debug: Get all employee assignments for this event
3793:            cursor.execute('''
3794:                SELECT 
3795:                    s.shiftid,
3796:                    s.shiftname,
3797:                    e.employeeid,
3798:                    e.employeename,
3799:                    es.hours
3800:                FROM shifts s
3801:                JOIN employee_shifts es ON s.shiftid = es.shiftid
3802:                JOIN employee e ON es.employeeid = e.employeeid
3803:                WHERE s.eventid = %s
3804:                ORDER BY s.shiftid, e.employeename
3805:            ''', (event_id,))
3806:            all_assignments = cursor.fetchall()
3807:            logging.debug("=== All employee assignments ===")
3808:            for assignment in all_assignments:
3809:                logging.debug(f"Shift {assignment['shiftid']} ({assignment['shiftname']}): Employee {assignment['employeeid']} ({assignment['employeename']}) - {assignment['hours']} hours")
3810:
3811:            # Get event details with total unique employees
3812:            cursor.execute('''
3813:                SELECT 
3814:                    e.*,
3815:                    c.customername,
3816:                    (SELECT COUNT(DISTINCT es.employeeid)
3817:                     FROM shifts s
3818:                     JOIN employee_shifts es ON s.shiftid = es.shiftid
3819:                     WHERE s.eventid = e.EventID) as total_unique_employees
3820:                FROM event e
3821:                LEFT JOIN customer c ON e.Customerid = c.customerid
3822:                WHERE e.EventID = %s
3823:            ''', (event_id,))
3824:            
3825:            event = cursor.fetchone()
3826:            if not event:
3827:                flash('Event not found.', 'error')
3828:                return redirect(url_for('event_list'))
3829:            
3830:            # Get customers for dropdown
3831:            cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
3832:            customers = cursor.fetchall()
3833:            
3834:            # Get company details
3835:            cursor.execute('SELECT * FROM company LIMIT 1')
3836:            company = cursor.fetchone()
3837:            
3838:            # Format dates for display in form
3839:            if event['EventStart']:
3840:                if isinstance(event['EventStart'], str):
3841:                    try:
3842:                        event['EventStart'] = datetime.strptime(event['EventStart'], '%Y-%m-%d %H:%M:%S')
3843:                    except ValueError:
3844:                        try:
3845:                            event['EventStart'] = datetime.strptime(event['EventStart'], '%Y-%m-%d %H:%M')
3846:                        except ValueError:
3847:                            event['EventStart'] = None
3848:                if isinstance(event['EventStart'], datetime):
3849:                    event['EventStart'] = event['EventStart'].strftime('%Y-%m-%dT%H:%M')
3850:            
3851:            if event['EventEnd']:
3852:                if isinstance(event['EventEnd'], str):
3853:                    try:
3854:                        event['EventEnd'] = datetime.strptime(event['EventEnd'], '%Y-%m-%d %H:%M:%S')
3855:                    except ValueError:
3856:                        try:
3857:                            event['EventEnd'] = datetime.strptime(event['EventEnd'], '%Y-%m-%d %H:%M')
3858:                        except ValueError:
3859:                            event['EventEnd'] = None
3860:                if isinstance(event['EventEnd'], datetime):
3861:                    event['EventEnd'] = event['EventEnd'].strftime('%Y-%m-%dT%H:%M')
3862:            
3863:            # Get all shifts for this event with correct employee count
3864:            cursor.execute('''
3865:                WITH ShiftAssignments AS (
3866:                    SELECT 
3867:                        s.shiftid,
3868:                        GROUP_CONCAT(DISTINCT es.employeeid) as assigned_employee_ids,
3869:                        COUNT(DISTINCT es.employeeid) as assigned_employees_count,
3870:                        COALESCE(SUM(es.hours), 0) as total_assigned_hours,
3871:                        JSON_ARRAYAGG(
3872:                            JSON_OBJECT(
3873:                                'employeeid', es.employeeid,
3874:                                'hours', es.hours
3875:                            )
3876:                        ) as employees
3877:                    FROM shifts s
3878:                    LEFT JOIN employee_shifts es ON s.shiftid = es.shiftid
3879:                    WHERE s.eventid = %s
3880:                    GROUP BY s.shiftid
3881:                )
3882:                SELECT 
3883:                    s.*,
3884:                    COALESCE(sa.assigned_employee_ids, '') as assigned_employee_ids,
3885:                    COALESCE(sa.assigned_employees_count, 0) as assigned_employees_count,
3886:                    COALESCE(sa.total_assigned_hours, 0) as total_assigned_hours,
3887:                    COALESCE(sa.employees, '[]') as employees
3888:                FROM shifts s
3889:                LEFT JOIN ShiftAssignments sa ON s.shiftid = sa.shiftid
3890:                WHERE s.eventid = %s
3891:                ORDER BY s.shiftstart
3892:            ''', (event_id, event_id))
3893:            
3894:            shifts = cursor.fetchall()
3895:            
3896:            # Debug: Print shift assignments
3897:            logging.debug("\n=== Shift assignments after processing ===")
3898:            for shift in shifts:
3899:                logging.debug(f"Shift {shift['shiftid']} ({shift['shiftname']}): {shift['assigned_employees_count']} employees, IDs: {shift['assigned_employee_ids']}")
3900:            
3901:            # Format shift dates and convert to serializable format
3902:            for shift in shifts:
3903:                if shift['shiftstart']:
3904:                    if isinstance(shift['shiftstart'], str):
3905:                        try:
3906:                            shift['shiftstart'] = datetime.strptime(shift['shiftstart'], '%Y-%m-%d %H:%M:%S')
3907:                        except ValueError:
3908:                            try:
3909:                                shift['shiftstart'] = datetime.strptime(shift['shiftstart'], '%Y-%m-%d %H:%M')
3910:                            except ValueError:
3911:                                shift['shiftstart'] = None
3912:                    if isinstance(shift['shiftstart'], datetime):
3913:                        shift['shiftstart'] = shift['shiftstart'].strftime('%Y-%m-%dT%H:%M')
3914:                
3915:                if shift['shiftend']:
3916:                    if isinstance(shift['shiftend'], str):
3917:                        try:
3918:                            shift['shiftend'] = datetime.strptime(shift['shiftend'], '%Y-%m-%d %H:%M:%S')
3919:                        except ValueError:
3920:                            try:
3921:                                shift['shiftend'] = datetime.strptime(shift['shiftend'], '%Y-%m-%d %H:%M')
3922:                            except ValueError:
3923:                                shift['shiftend'] = None
3924:                    if isinstance(shift['shiftend'], datetime):
3925:                        shift['shiftend'] = shift['shiftend'].strftime('%Y-%m-%dT%H:%M')
3926:                
3927:                # Convert assigned_employee_ids string to array
3928:                if shift['assigned_employee_ids']:
3929:                    shift['assigned_employee_ids'] = [int(id) for id in shift['assigned_employee_ids'].split(',')]
3930:                else:
3931:                    shift['assigned_employee_ids'] = []
3932:            
3933:            # Get all employees for assignment
3934:            cursor.execute('''
3935:                SELECT 
3936:                    e.employeeid,
3937:                    e.employeename,
3938:                    e.gender,
3939:                    e.status as employeestatus,
3940:                    e.age,
3941:                    e.nationality,
3942:                    e.passportid,
3943:                    e.employeeenglishrating,
3944:                    e.employeeExperienceRating,
3945:                    er.employeerolename
3946:                FROM employee e
3947:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
3948:                WHERE e.status = 'Active'
3949:                ORDER BY e.employeename
3950:            ''')
3951:            employees = cursor.fetchall()
3952:            
3953:            # Convert Decimal values to float
3954:            event = safe_serialize(event)
3955:            shifts = safe_serialize(shifts)
3956:            employees = safe_serialize(employees)
3957:            
3958:            return render_template('events/unified/event_form.html',
3959:                                 is_edit_mode=True,
3960:                                 event=event,
3961:                                 customers=customers,
3962:                                 company=company,
3963:                                 shifts=shifts,
3964:                                 employees=employees)
3965:                                 
3966:    except Exception as e:
3967:        flash(f'Error loading edit event form: {str(e)}', 'error')
3968:        return redirect(url_for('event_list'))
3969:    finally:
3970:        if conn:
3971:            conn.close()
3972:
3973:@app.route('/events/<int:event_id>/edit', methods=['POST'])
3974:@login_required
3975:def update_event(event_id):
3976:    """Update an existing event."""
3977:    try:
3978:        # Get form data
3979:        event_name = request.form.get('EventName')
3980:        customer_id = request.form.get('Customerid')
3981:        event_location = request.form.get('EventLocation')
3982:        event_start_date = request.form.get('EventStart_date')
3983:        event_start_time = request.form.get('EventStart_time')
3984:        event_end_date = request.form.get('EventEnd_date')
3985:        event_end_time = request.form.get('EventEnd_time')
3986:        notes = request.form.get('notes')
3987:        event_stage = request.form.get('EventStage')
3988:        waiters_needed = request.form.get('WaitersNeeded', '0')
3989:        bartenders_needed = request.form.get('BartendersNeeded', '0')
3990:        male_employees = request.form.get('MaleEmployees', '0')
3991:        female_employees = request.form.get('FemaleEmployees', '0')
3992:        
3993:        # Calculate derived fields
3994:        total_employees = int(waiters_needed) + int(bartenders_needed)
3995:        
3996:        # Parse dates and times
3997:        event_start = None
3998:        event_end = None
3999:        
4000:        if event_start_date and event_start_time:
4001:            event_start = f"{event_start_date} {event_start_time}"
4002:        
4003:        if event_end_date and event_end_time:
4004:            event_end = f"{event_end_date} {event_end_time}"
4005:        
4006:        # Connect to database
4007:        conn = pymysql.connect(
4008:            host='localhost',
4009:            user='root',
4010:            password='V0sp0r0si968!',
4011:            database='sml',
4012:            cursorclass=pymysql.cursors.DictCursor
4013:        )
4014:        
4015:        with conn.cursor() as cursor:
4016:            # Update event
4017:            cursor.execute('''
4018:                UPDATE event
4019:                SET 
4020:                    EventName = %s,
4021:                    Customerid = %s,
4022:                    EventLocation = %s,
4023:                    EventStart = %s,
4024:                    EventEnd = %s,
4025:                    notes = %s,
4026:                    EventStage = %s,
4027:                    WaitersNeeded = %s,
4028:                    BartendersNeeded = %s,
4029:                    MaleEmployees = %s,
4030:                    FemaleEmployees = %s,
4031:                    TotalEmployees = %s
4032:                WHERE EventID = %s
4033:            ''', (
4034:                event_name,
4035:                customer_id,
4036:                event_location,
4037:                event_start,
4038:                event_end,
4039:                notes,
4040:                event_stage,
4041:                waiters_needed,
4042:                bartenders_needed,
4043:                male_employees,
4044:                female_employees,
4045:                total_employees,
4046:                event_id
4047:            ))
4048:            
4049:            conn.commit()
4050:            flash('Event updated successfully!', 'success')
4051:            
4052:    except Exception as e:
4053:        flash(f'Error updating event: {str(e)}', 'error')
4054:    
4055:    return redirect(url_for('edit_event_unified', event_id=event_id))
4056:
4057:@app.route('/events/create', methods=['POST'])
4058:@login_required
4059:def create_event():
4060:    """Create a new event."""
4061:    try:
4062:        # Get form data
4063:        event_name = request.form.get('EventName')
4064:        customer_id = request.form.get('Customerid')
4065:        event_location = request.form.get('EventLocation')
4066:        event_start_date = request.form.get('EventStart_date')
4067:        event_start_time = request.form.get('EventStart_time')
4068:        event_end_date = request.form.get('EventEnd_date')
4069:        event_end_time = request.form.get('EventEnd_time')
4070:        notes = request.form.get('notes')
4071:        event_stage = request.form.get('EventStage', 'Draft')
4072:        waiters_needed = request.form.get('WaitersNeeded', '0')
4073:        bartenders_needed = request.form.get('BartendersNeeded', '0')
4074:        male_employees = request.form.get('MaleEmployees', '0')
4075:        female_employees = request.form.get('FemaleEmployees', '0')
4076:        
4077:        # Calculate derived fields
4078:        total_employees = int(waiters_needed) + int(bartenders_needed)
4079:        
4080:        # Parse dates and times
4081:        event_start = None
4082:        event_end = None
4083:        
4084:        if event_start_date and event_start_time:
4085:            event_start = f"{event_start_date} {event_start_time}"
4086:        
4087:        if event_end_date and event_end_time:
4088:            event_end = f"{event_end_date} {event_end_time}"
4089:        
4090:        # Connect to database
4091:        conn = pymysql.connect(
4092:            host='localhost',
4093:            user='root',
4094:            password='V0sp0r0si968!',
4095:            database='sml',
4096:            cursorclass=pymysql.cursors.DictCursor
4097:        )
4098:        
4099:        with conn.cursor() as cursor:
4100:            # Insert new event
4101:            cursor.execute('''
4102:                INSERT INTO event (
4103:                    EventName,
4104:                    Customerid,
4105:                    EventLocation,
4106:                    EventStart,
4107:                    EventEnd,
4108:                    notes,
4109:                    EventStage,
4110:                    WaitersNeeded,
4111:                    BartendersNeeded,
4112:                    MaleEmployees,
4113:                    FemaleEmployees,
4114:                    TotalEmployees,
4115:                    totalhours,
4116:                    totalcost,
4117:                    totalselling,
4118:                    totalprofit
4119:                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 0, 0, 0, 0)
4120:            ''', (
4121:                event_name,
4122:                customer_id,
4123:                event_location,
4124:                event_start,
4125:                event_end,
4126:                notes,
4127:                event_stage,
4128:                waiters_needed,
4129:                bartenders_needed,
4130:                male_employees,
4131:                female_employees,
4132:                total_employees
4133:            ))
4134:            
4135:            # Get the ID of the newly created event
4136:            event_id = conn.insert_id()
4137:            
4138:            conn.commit()
4139:            flash('Event created successfully!', 'success')
4140:            
4141:            # Redirect to edit page for the new event
4142:            return redirect(url_for('edit_event_unified', event_id=event_id))
4143:            
4144:    except Exception as e:
4145:        flash(f'Error creating event: {str(e)}', 'error')
4146:        return redirect(url_for('create_event_page'))
4147:    
4148:    finally:
4149:        if 'conn' in locals():
4150:            conn.close()
4151:
4152:@app.route('/shifts/add', methods=['POST'])
4153:@login_required
4154:def add_shift():
4155:    """Add a new shift to an event."""
4156:    try:
4157:        # Get form data
4158:        event_id = request.form.get('event_id')
4159:        shift_name = request.form.get('shift_name')
4160:        shift_type = request.form.get('shift_type', 'Full')  # Default to 'Full' as per the enum
4161:        shift_start = request.form.get('shift_start')
4162:        shift_end = request.form.get('shift_end')
4163:        
4164:        # Parse dates
4165:        if shift_start:
4166:            shift_start_datetime = datetime.strptime(shift_start, '%Y-%m-%dT%H:%M')
4167:        else:
4168:            flash('Shift start time is required.', 'error')
4169:            return redirect(url_for('event_list'))
4170:            
4171:        if shift_end:
4172:            shift_end_datetime = datetime.strptime(shift_end, '%Y-%m-%dT%H:%M')
4173:        else:
4174:            flash('Shift end time is required.', 'error')
4175:            return redirect(url_for('event_list'))
4176:        
4177:        # Calculate shift duration
4178:        # If end time is before start time, assume it's the next day
4179:        if shift_end_datetime < shift_start_datetime:
4180:            shift_end_datetime = shift_end_datetime + timedelta(days=1)
4181:            
4182:        shift_duration = (shift_end_datetime - shift_start_datetime).total_seconds() / 3600  # Duration in hours
4183:        
4184:        # Connect to database
4185:        conn = pymysql.connect(
4186:            host='localhost',
4187:            user='root',
4188:            password='V0sp0r0si968!',
4189:            database='sml',
4190:            cursorclass=pymysql.cursors.DictCursor
4191:        )
4192:        
4193:        with conn.cursor() as cursor:
4194:            # Check if event exists
4195:            cursor.execute('SELECT * FROM event WHERE EventID = %s', (event_id,))
4196:            event = cursor.fetchone()
4197:            
4198:            if not event:
4199:                flash('Event not found.', 'error')
4200:                return redirect(url_for('event_list'))
4201:            
4202:            # Insert shift
4203:            cursor.execute('''
4204:                INSERT INTO shifts (
4205:                    eventid,
4206:                    shiftname,
4207:                    shifttype,
4208:                    shiftstart,
4209:                    shiftend,
4210:                    total_hours
4211:                ) VALUES (%s, %s, %s, %s, %s, %s)
4212:            ''', (
4213:                event_id,
4214:                shift_name,
4215:                shift_type,
4216:                shift_start_datetime,
4217:                shift_end_datetime,
4218:                shift_duration
4219:            ))
4220:            
4221:            conn.commit()
4222:            flash('Shift added successfully!', 'success')
4223:            
4224:    except Exception as e:
4225:        flash(f'Error adding shift: {str(e)}', 'error')
4226:    
4227:    # Redirect to event edit page if we came from there
4228:    referrer = request.referrer
4229:    if referrer and 'edit' in referrer and str(event_id) in referrer:
4230:        return redirect(url_for('edit_event_unified', event_id=event_id))
4231:    
4232:    # Otherwise, redirect to event list
4233:    return redirect(url_for('event_list'))
4234:
4235:@app.route('/shifts/<int:shift_id>/edit', methods=['GET', 'POST'])
4236:@login_required
4237:def edit_shift(shift_id):
4238:    """Edit an existing shift."""
4239:    if request.method == 'POST':
4240:        try:
4241:            # Get form data
4242:            shift_name = request.form.get('shiftname')
4243:            shift_type = request.form.get('shifttype', 'Full')  # Default to 'Full' as per the enum
4244:            shift_start = request.form.get('shiftstart')
4245:            shift_end = request.form.get('shiftend')
4246:            
4247:            # Parse dates
4248:            if shift_start:
4249:                shift_start_datetime = datetime.strptime(shift_start, '%Y-%m-%dT%H:%M')
4250:            else:
4251:                flash('Shift start time is required.', 'error')
4252:                return redirect(url_for('edit_shift', shift_id=shift_id))
4253:                
4254:            if shift_end:
4255:                shift_end_datetime = datetime.strptime(shift_end, '%Y-%m-%dT%H:%M')
4256:            else:
4257:                flash('Shift end time is required.', 'error')
4258:                return redirect(url_for('edit_shift', shift_id=shift_id))
4259:            
4260:            # If end time is before start time, assume it's the next day
4261:            if shift_end_datetime < shift_start_datetime:
4262:                shift_end_datetime = shift_end_datetime + timedelta(days=1)
4263:                
4264:            shift_duration = (shift_end_datetime - shift_start_datetime).total_seconds() / 3600  # Duration in hours
4265:            
4266:            # Connect to database
4267:            conn = pymysql.connect(
4268:                host='localhost',
4269:                user='root',
4270:                password='V0sp0r0si968!',
4271:                database='sml',
4272:                cursorclass=pymysql.cursors.DictCursor
4273:            )
4274:            
4275:            with conn.cursor() as cursor:
4276:                # Check if shift exists
4277:                cursor.execute('SELECT * FROM shifts WHERE shiftid = %s', (shift_id,))
4278:                shift = cursor.fetchone()
4279:                
4280:                if not shift:
4281:                    flash('Shift not found.', 'error')
4282:                    return redirect(url_for('event_list'))
4283:                
4284:                # Update shift
4285:                cursor.execute('''
4286:                    UPDATE shifts
4287:                    SET 
4288:                        shiftname = %s,
4289:                        shifttype = %s,
4290:                        shiftstart = %s,
4291:                        shiftend = %s,
4292:                        total_hours = %s
4293:                    WHERE shiftid = %s
4294:                ''', (
4295:                    shift_name,
4296:                    shift_type,
4297:                    shift_start_datetime,
4298:                    shift_end_datetime,
4299:                    shift_duration,
4300:                    shift_id
4301:                ))
4302:                
4303:                conn.commit()
4304:                flash('Shift updated successfully!', 'success')
4305:                
4306:                # Redirect to event edit page
4307:                return redirect(url_for('edit_event_unified', event_id=shift['eventid']))
4308:                
4309:        except Exception as e:
4310:            flash(f'Error updating shift: {str(e)}', 'error')
4311:            return redirect(url_for('edit_shift', shift_id=shift_id))
4312:    
4313:    # GET request - show edit form
4314:    try:
4315:        conn = pymysql.connect(
4316:            host='localhost',
4317:            user='root',
4318:            password='V0sp0r0si968!',
4319:            database='sml',
4320:            cursorclass=pymysql.cursors.DictCursor
4321:        )
4322:        
4323:        with conn.cursor() as cursor:
4324:            # Get shift details
4325:            cursor.execute('''
4326:                SELECT 
4327:                    s.*,
4328:                    e.EventName
4329:                FROM shifts s
4330:                LEFT JOIN event e ON s.eventid = e.EventID
4331:                WHERE s.shiftid = %s
4332:            ''', (shift_id,))
4333:            
4334:            shift = cursor.fetchone()
4335:            if not shift:
4336:                flash('Shift not found.', 'error')
4337:                return redirect(url_for('event_list'))
4338:            
4339:            return render_template('shifts/edit.html',
4340:                                 shift=shift)
4341:                                 
4342:    except Exception as e:
4343:        flash(f'Error loading shift: {str(e)}', 'error')
4344:        return redirect(url_for('event_list'))
4345:    finally:
4346:        if 'conn' in locals():
4347:            conn.close()
4348:
4349:@app.route('/shifts/<int:shift_id>/delete', methods=['POST'])
4350:@login_required
4351:def delete_shift(shift_id):
4352:    """Delete a shift."""
4353:    try:
4354:        conn = pymysql.connect(
4355:            host='localhost',
4356:            user='root',
4357:            password='V0sp0r0si968!',
4358:            database='sml',
4359:            cursorclass=pymysql.cursors.DictCursor
4360:        )
4361:        
4362:        with conn.cursor() as cursor:
4363:            # Get shift details
4364:            cursor.execute('SELECT * FROM shifts WHERE shiftid = %s', (shift_id,))
4365:            shift = cursor.fetchone()
4366:            
4367:            if not shift:
4368:                return jsonify({'success': False, 'message': 'Shift not found.'}), 404
4369:            
4370:            event_id = shift['eventid']
4371:            
4372:            # Check if shift has assigned employees
4373:            cursor.execute('SELECT COUNT(*) as count FROM employee_shifts WHERE shiftid = %s', (shift_id,))
4374:            count = cursor.fetchone()['count']
4375:            
4376:            if count > 0:
4377:                # First remove employee assignments
4378:                cursor.execute('DELETE FROM employee_shifts WHERE shiftid = %s', (shift_id,))
4379:            
4380:            # Delete shift
4381:            cursor.execute('DELETE FROM shifts WHERE shiftid = %s', (shift_id,))
4382:            
4383:            conn.commit()
4384:            
4385:            return jsonify({
4386:                'success': True,
4387:                'message': 'Shift deleted successfully!',
4388:                'event_id': event_id
4389:            })
4390:            
4391:    except Exception as e:
4392:        return jsonify({'success': False, 'message': str(e)}), 500
4393:    finally:
4394:        if 'conn' in locals():
4395:            conn.close()
4396:
4397:@app.route('/delete_shift_manage', methods=['POST'])
4398:@login_required
4399:def delete_shift_manage():
4400:    """Delete a shift from the manage shifts page."""
4401:    shift_id = request.form.get('shift_id')
4402:    event_id = request.form.get('event_id')
4403:    
4404:    if not shift_id:
4405:        flash('Shift ID is required.', 'error')
4406:        return redirect(url_for('manage_all_shifts', event_id=event_id))
4407:    
4408:    try:
4409:        conn = pymysql.connect(
4410:            host='localhost',
4411:            user='root',
4412:            password='V0sp0r0si968!',
4413:            database='sml',
4414:            cursorclass=pymysql.cursors.DictCursor
4415:        )
4416:        
4417:        with conn.cursor() as cursor:
4418:            # First delete related employee assignments
4419:            cursor.execute('DELETE FROM employee_shifts WHERE shiftid = %s', (shift_id,))
4420:            
4421:            # Then delete the shift
4422:            cursor.execute('DELETE FROM shifts WHERE shiftid = %s', (shift_id,))
4423:            
4424:            conn.commit()
4425:            
4426:            flash('Shift deleted successfully.', 'success')
4427:            
4428:    except Exception as e:
4429:        flash(f'Error deleting shift: {str(e)}', 'error')
4430:    finally:
4431:        if 'conn' in locals():
4432:            conn.close()
4433:    
4434:    return redirect(url_for('manage_all_shifts', event_id=event_id))
4435:
4436:
4437:
4438:@app.route('/create_event_submit_unified', methods=['POST'])
4439:@login_required
4440:def create_event_submit_unified():
4441:    """Handle the form submission for creating a new event."""
4442:    try:
4443:        # Get form data
4444:        event_name = request.form.get('EventName')
4445:        customer_id = request.form.get('Customerid')
4446:        event_location = request.form.get('EventLocation')
4447:        event_start = request.form.get('EventStart')
4448:        event_end = request.form.get('EventEnd')
4449:        notes = request.form.get('notes', '')
4450:        event_stage = request.form.get('EventStage', 'Draft')
4451:        waiters_needed = request.form.get('WaitersNeeded', '0')
4452:        bartenders_needed = request.form.get('BartendersNeeded', '0')
4453:        male_employees = request.form.get('MaleEmployees', '0')
4454:        female_employees = request.form.get('FemaleEmployees', '0')
4455:        
4456:        # Get financial data
4457:        event_per_hour_cost = request.form.get('EventPerHourcost', '0')
4458:        event_per_hour_selling = request.form.get('EventPerHourselling', '0')
4459:        total_hours = request.form.get('totalhours', '0')
4460:        total_cost = request.form.get('totalcost', '0')
4461:        total_selling = request.form.get('totalselling', '0')
4462:        
4463:        # Calculate derived fields
4464:        total_employees = int(waiters_needed) + int(bartenders_needed)
4465:        
4466:        # Calculate totalprofit based on totalselling and totalcost
4467:        try:
4468:            total_cost = float(total_cost)
4469:            total_selling = float(total_selling)
4470:            # Use round to 2 decimal places to avoid floating point precision issues
4471:            total_profit = round(total_selling - total_cost, 2) 
4472:        except ValueError:
4473:            total_profit = 0
4474:        
4475:        # Connect to database
4476:        conn = pymysql.connect(
4477:            host='localhost',
4478:            user='root',
4479:            password='V0sp0r0si968!',
4480:            database='sml',
4481:            cursorclass=pymysql.cursors.DictCursor
4482:        )
4483:        
4484:        with conn.cursor() as cursor:
4485:            # Create event
4486:            cursor.execute('''
4487:                INSERT INTO event (
4488:                    EventName,
4489:                    Customerid,
4490:                    EventLocation,
4491:                    EventStart,
4492:                    EventEnd,
4493:                    notes,
4494:                    EventStage,
4495:                    WaitersNeeded,
4496:                    BartendersNeeded,
4497:                    MaleEmployees,
4498:                    FemaleEmployees,
4499:                    TotalEmployees,
4500:                    EventPerHourcost,
4501:                    EventPerHourselling,
4502:                    totalhours,
4503:                    totalcost,
4504:                    totalselling,
4505:                    totalprofit
4506:                ) VALUES (
4507:                    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
4508:                )
4509:            ''', (
4510:                event_name,
4511:                customer_id,
4512:                event_location,
4513:                event_start,
4514:                event_end,
4515:                notes,
4516:                event_stage,
4517:                waiters_needed,
4518:                bartenders_needed,
4519:                male_employees,
4520:                female_employees,
4521:                total_employees,
4522:                event_per_hour_cost,
4523:                event_per_hour_selling,
4524:                total_hours,
4525:                total_cost,
4526:                total_selling,
4527:                total_profit
4528:            ))
4529:            
4530:            # Get the new event ID
4531:            event_id = cursor.lastrowid
4532:            
4533:            # Handle shifts data if provided
4534:            shifts_data = request.form.get('shifts_data')
4535:            if shifts_data:
4536:                shifts = json.loads(shifts_data)
4537:                for shift in shifts:
4538:                    # Only process add operations for new events
4539:                    if shift.get('operation') == 'add':
4540:                        cursor.execute('''
4541:                            INSERT INTO shifts (
4542:                                eventid, shiftname, shifttype, shiftstart, shiftend, total_hours
4543:                            ) VALUES (%s, %s, %s, %s, %s, %s)
4544:                        ''', (
4545:                            event_id,
4546:                            shift.get('name', 'New Shift'),
4547:                            shift.get('type', 'Full'),
4548:                            shift.get('start'),
4549:                            shift.get('end'),
4550:                            shift.get('hours', 0)
4551:                        ))
4552:            
4553:            conn.commit()
4554:            flash('Event created successfully!', 'success')
4555:            return redirect(url_for('edit_event_unified', event_id=event_id))
4556:            
4557:    except Exception as e:
4558:        flash(f'Error creating event: {str(e)}', 'error')
4559:        if 'conn' in locals() and conn:
4560:            conn.rollback()
4561:        return redirect(url_for('create_event_page'))
4562:    finally:
4563:        if 'conn' in locals() and conn:
4564:            conn.close()
4565:
4566:@app.template_filter('datetimeformat')
4567:def datetimeformat(value, format='%Y-%m-%dT%H:%M'):
4568:    """Format a datetime object for display in HTML datetime-local input."""
4569:    if value is None:
4570:        return ""
4571:    if isinstance(value, str):
4572:        try:
4573:            value = datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
4574:        except ValueError:
4575:            try:
4576:                value = datetime.strptime(value, '%Y-%m-%d %H:%M')
4577:            except ValueError:
4578:                return value
4579:    if isinstance(value, datetime):
4580:        return value.strftime(format)
4581:    return ""
4582:
4583:@app.template_filter('format_hours')
4584:def format_hours(value):
4585:    """Format decimal hours as HH:MM."""
4586:    if value is None:
4587:        return "0:00"
4588:    
4589:    # If value is a string, convert to float
4590:    if isinstance(value, str):
4591:        try:
4592:            value = float(value)
4593:        except ValueError:
4594:            return "0:00"
4595:    
4596:    # Calculate hours and minutes
4597:    hours = int(value)
4598:    minutes = int((value - hours) * 60)
4599:    
4600:    return f"{hours}:{minutes:02d}"
4601:
4602:@app.template_filter('nl2br')
4603:def nl2br(value):
4604:    """Convert newlines to HTML breaks."""
4605:    if not value:
4606:        return ""
4607:    return value.replace('\n', '<br>')
4608:
4609:@app.route('/manage_all_shifts')
4610:@login_required
4611:def manage_all_shifts():
4612:    """Display a page to manage all shifts for an event."""
4613:    event_id = request.args.get('event_id')
4614:    if not event_id:
4615:        flash('Event ID is required.', 'error')
4616:        return redirect(url_for('event_list'))
4617:        
4618:    try:
4619:        conn = pymysql.connect(
4620:            host='localhost',
4621:            user='root',
4622:            password='V0sp0r0si968!',
4623:            database='sml',
4624:            cursorclass=pymysql.cursors.DictCursor
4625:        )
4626:        
4627:        with conn.cursor() as cursor:
4628:            # Get event details
4629:            cursor.execute('''
4630:                SELECT 
4631:                    e.*,
4632:                    c.customername
4633:                FROM event e
4634:                LEFT JOIN customer c ON e.Customerid = c.customerid
4635:                WHERE e.EventID = %s
4636:            ''', (event_id,))
4637:            
4638:            event = cursor.fetchone()
4639:            if not event:
4640:                flash('Event not found.', 'error')
4641:                return redirect(url_for('event_list'))
4642:            
4643:            # Get shifts for this event
4644:            cursor.execute('''
4645:                SELECT 
4646:                    s.*,
4647:                    COUNT(es.employeeid) as assigned_employees_count,
4648:                    SUM(es.hours) as total_assigned_hours
4649:                FROM shifts s
4650:                LEFT JOIN employee_shifts es ON s.shiftid = es.shiftid
4651:                WHERE s.eventid = %s
4652:                GROUP BY s.shiftid
4653:                ORDER BY s.shiftstart
4654:            ''', (event_id,))
4655:            
4656:            shifts = cursor.fetchall()
4657:            
4658:            # Get all employees
4659:            cursor.execute('''
4660:                SELECT 
4661:                    e.employeeid,
4662:                    e.employeename,
4663:                    e.gender,
4664:                    er.employeerolename
4665:                FROM employee e
4666:                LEFT JOIN employeerole er ON e.employeeroleid = er.employeeroleid
4667:                WHERE e.status = 'Active'
4668:                ORDER BY e.employeename
4669:            ''')
4670:            
4671:            employees = cursor.fetchall()
4672:            
4673:            return render_template('events/manage_shifts.html',
4674:                                  event=event,
4675:                                  shifts=shifts,
4676:                                  employees=employees)
4677:            
4678:    except Exception as e:
4679:        flash(f'Error loading shifts: {str(e)}', 'error')
4680:        return redirect(url_for('event_list'))
4681:    finally:
4682:        if conn:
4683:            conn.close()
4684:
4685:@app.route('/event_invoices/<int:event_id>')
4686:@login_required
4687:def event_invoices(event_id):
4688:    """Display invoices related to a specific event."""
4689:    try:
4690:        conn = pymysql.connect(
4691:            host='localhost',
4692:            user='root',
4693:            password='V0sp0r0si968!',
4694:            database='sml',
4695:            cursorclass=pymysql.cursors.DictCursor
4696:        )
4697:        
4698:        with conn.cursor() as cursor:
4699:            # Get event details
4700:            cursor.execute('''
4701:                SELECT 
4702:                    e.*,
4703:                    c.customerid,
4704:                    c.customername,
4705:                    c.customerphone,
4706:                    c.customeremail
4707:                FROM event e
4708:                LEFT JOIN customer c ON e.Customerid = c.customerid
4709:                WHERE e.EventID = %s
4710:            ''', (event_id,))
4711:            
4712:            event = cursor.fetchone()
4713:            if not event:
4714:                flash('Event not found.', 'error')
4715:                return redirect(url_for('event_list'))
4716:            
4717:            # Convert string dates to datetime objects
4718:            if 'EventStart' in event and event['EventStart'] and isinstance(event['EventStart'], str):
4719:                try:
4720:                    event['EventStart'] = datetime.strptime(event['EventStart'], '%Y-%m-%d %H:%M:%S')
4721:                except ValueError:
4722:                    try:
4723:                        event['EventStart'] = datetime.strptime(event['EventStart'], '%Y-%m-%d %H:%M')
4724:                    except ValueError:
4725:                        event['EventStart'] = None
4726:            
4727:            if 'EventEnd' in event and event['EventEnd'] and isinstance(event['EventEnd'], str):
4728:                try:
4729:                    event['EventEnd'] = datetime.strptime(event['EventEnd'], '%Y-%m-%d %H:%M:%S')
4730:                except ValueError:
4731:                    try:
4732:                        event['EventEnd'] = datetime.strptime(event['EventEnd'], '%Y-%m-%d %H:%M')
4733:                    except ValueError:
4734:                        event['EventEnd'] = None
4735:            
4736:            # Get invoices related to this event
4737:            cursor.execute('''
4738:                SELECT 
4739:                    i.*,
4740:                    c.customername
4741:                FROM invoice i
4742:                LEFT JOIN customer c ON i.customer_id = c.customerid
4743:                WHERE i.event_id = %s
4744:                ORDER BY i.invoice_date DESC
4745:            ''', (event_id,))
4746:            
4747:            invoices = cursor.fetchall()
4748:            
4749:            # Convert decimal values to float and dates to datetime objects
4750:            for invoice in invoices:
4751:                if 'total' in invoice and invoice['total'] is not None:
4752:                    invoice['total'] = float(invoice['total'])
4753:                else:
4754:                    invoice['total'] = 0.0
4755:                    
4756:                if 'invoice_date' in invoice and invoice['invoice_date'] and isinstance(invoice['invoice_date'], str):
4757:                    try:
4758:                        invoice['invoice_date'] = datetime.strptime(invoice['invoice_date'], '%Y-%m-%d')
4759:                    except ValueError:
4760:                        invoice['invoice_date'] = None
4761:                        
4762:                if 'due_date' in invoice and invoice['due_date'] and isinstance(invoice['due_date'], str):
4763:                    try:
4764:                        invoice['due_date'] = datetime.strptime(invoice['due_date'], '%Y-%m-%d')
4765:                    except ValueError:
4766:                        invoice['due_date'] = None
4767:            
4768:            # Create customer object from event data for the template
4769:            customer = {
4770:                'customerid': event.get('customerid'),
4771:                'customername': event.get('customername', 'Unknown Customer')
4772:            }
4773:            
4774:            return render_template('events/invoices.html',
4775:                                 event=event,
4776:                                 invoices=invoices,
4777:                                 customer=customer)
4778:                                 
4779:    except Exception as e:
4780:        flash(f'Error loading event invoices: {str(e)}', 'error')
4781:        return redirect(url_for('event_list'))
4782:    finally:
4783:        if 'conn' in locals():
4784:            conn.close()
4785:
4786:@app.route('/new_invoice')
4787:@login_required
4788:def new_invoice():
4789:    """Display the form to create a new invoice, optionally pre-filled with event data."""
4790:    try:
4791:        # Get optional event_id from query parameters
4792:        event_id = request.args.get('event_id')
4793:        
4794:        conn = pymysql.connect(
4795:            host='localhost',
4796:            user='root',
4797:            password='V0sp0r0si968!',
4798:            database='sml',
4799:            cursorclass=pymysql.cursors.DictCursor
4800:        )
4801:        
4802:        with conn.cursor() as cursor:
4803:            # Get customers for dropdown
4804:            cursor.execute('SELECT customerid, customername FROM customer ORDER BY customername')
4805:            customers = cursor.fetchall()
4806:            
4807:            # Get events for dropdown
4808:            cursor.execute('''
4809:                SELECT 
4810:                    e.EventID, 
4811:                    e.EventName,
4812:                    e.totalhours,
4813:                    e.EventPerHourselling,
4814:                    e.totalselling,
4815:                    c.customername 
4816:                FROM event e
4817:                LEFT JOIN customer c ON e.Customerid = c.customerid
4818:                ORDER BY e.EventStart DESC
4819:            ''')
4820:            events = cursor.fetchall()
4821:            
4822:            # Get company details
4823:            cursor.execute('SELECT * FROM company LIMIT 1')
4824:            company = cursor.fetchone()
4825:            
4826:            # Generate next invoice number
4827:            cursor.execute('SELECT MAX(CAST(SUBSTRING(invoice_number, 4) AS UNSIGNED)) as max_num FROM invoice WHERE invoice_number LIKE "INV%"')
4828:            max_num = cursor.fetchone()['max_num']
4829:            next_num = 1 if not max_num else max_num + 1
4830:            next_invoice_number = f"INV{next_num:04d}"
4831:            
4832:            # Create datetime objects for invoice dates
4833:            invoice_date = datetime.now()
4834:            due_date = datetime.now() + timedelta(days=30)
4835:            
4836:            # Initialize invoice object with default values
4837:            invoice = {
4838:                'invoice_number': next_invoice_number,
4839:                'invoice_date': invoice_date,
4840:                'due_date': due_date,
4841:                'status': 'Draft',
4842:                'vat_rate': 19,  # Default VAT rate
4843:                'notes': '',
4844:                'subtotal': 0,
4845:                'vat_amount': 0,
4846:                'total': 0,
4847:                'customer_id': None,
4848:                'event_id': event_id if event_id else None,
4849:                'items': []
4850:            }
4851:            
4852:            selected_event = None
4853:            selected_customer = None
4854:            
4855:            # If event_id was provided, get that event's details
4856:            if event_id:
4857:                cursor.execute('''
4858:                    SELECT 
4859:                        e.*,
4860:                        c.customerid,
4861:                        c.customername,
4862:                        c.customeraddress,
4863:                        c.customerphone,
4864:                        c.customeremail
4865:                    FROM event e
4866:                    LEFT JOIN customer c ON e.Customerid = c.customerid
4867:                    WHERE e.EventID = %s
4868:                ''', (event_id,))
4869:                selected_event = cursor.fetchone()
4870:                
4871:                if selected_event:
4872:                    # Pre-fill invoice with event data
4873:                    invoice['customer_id'] = selected_event['Customerid']
4874:                    invoice['event_id'] = selected_event['EventID']
4875:                    selected_customer = {
4876:                        'customerid': selected_event['Customerid'],
4877:                        'customername': selected_event['customername']
4878:                    }
4879:                    
4880:                    # Convert datetime objects to strings for JSON serialization
4881:                    for key, value in selected_event.items():
4882:                        if isinstance(value, datetime):
4883:                            selected_event[key] = value.strftime('%Y-%m-%d %H:%M:%S')
4884:        
4885:        # Format dates as strings
4886:        invoice['invoice_date'] = invoice['invoice_date'].strftime('%Y-%m-%d')
4887:        invoice['due_date'] = invoice['due_date'].strftime('%Y-%m-%d')
4888:        
4889:        return render_template(
4890:            'invoices/form.html',
4891:            title='Create Invoice',
4892:            invoice=invoice,
4893:            customers=customers,
4894:            events=events,
4895:            company=company,
4896:            selected_event=selected_event,
4897:            selected_customer=selected_customer,
4898:            mode='create',
4899:            items=[]
4900:        )
4901:    
4902:    except Exception as e:
4903:        print(f"Error loading new invoice form: {str(e)}")
4904:        flash(f"Error loading new invoice form: {str(e)}", 'error')
4905:        return redirect(url_for('invoice_list'))
4906:    finally:
4907:        if 'conn' in locals():
4908:            conn.close()
4909:
4910:@app.route('/api/shift_assignments/<int:shift_id>')
4911:@login_required
4912:def get_shift_assignments(shift_id):
4913:    """Get all assignments for a shift."""
4914:    try:
4915:        conn = pymysql.connect(
4916:            host='localhost',
4917:            user='root',
4918:            password='V0sp0r0si968!',
4919:            database='sml',
4920:            cursorclass=pymysql.cursors.DictCursor
4921:        )
4922:        
4923:        with conn.cursor() as cursor:
4924:            cursor.execute('''
4925:                SELECT 
4926:                    e.employeeid,
4927:                    e.employeename,
4928:                    es.hours
4929:                FROM employee_shifts es
4930:                JOIN employees e ON es.employeeid = e.employeeid
4931:                WHERE es.shiftid = %s
4932:            ''', (shift_id,))
4933:            
4934:            assignments = cursor.fetchall()
4935:            return jsonify({'success': True, 'assignments': assignments})
4936:            
4937:    except Exception as e:
4938:        return jsonify({'success': False, 'error': str(e)}), 500
4939:    finally:
4940:        if 'conn' in locals():
4941:            conn.close()
4942:
4944:@login_required
4945:def save_shift_assignments():
4946:    """Save employee assignments for a shift."""
4947:    try:
4948:        shift_id = request.form.get('shift_id')
4949:        if not shift_id:
4950:            flash('Shift ID is required.', 'error')
4951:            return redirect(url_for('event_list'))
4952:            
4953:        selected_employees = request.form.getlist('selected_employees[]')
4954:        
4955:        conn = pymysql.connect(
4956:            host='localhost',
4957:            user='root',
4958:            password='V0sp0r0si968!',
4959:            database='sml',
4960:            cursorclass=pymysql.cursors.DictCursor
4961:        )
4962:        
4963:        with conn.cursor() as cursor:
4964:            # Get shift details
4965:            cursor.execute('SELECT * FROM shifts WHERE shiftid = %s', (shift_id,))
4966:            shift = cursor.fetchone()
4967:            
4968:            if not shift:
4969:                flash('Shift not found.', 'error')
4970:                return redirect(url_for('event_list'))
4971:            
4972:            # Remove all existing assignments
4973:            cursor.execute('DELETE FROM employee_shifts WHERE shiftid = %s', (shift_id,))
4974:            
4975:            # Add new assignments
4976:            for employee_id in selected_employees:
4977:                hours = request.form.get(f'hours_{employee_id}')
4978:                
4979:                # For full shifts, use the shift duration
4980:                if shift['shifttype'] == 'Full':
4981:                    hours = shift['total_hours']
4982:                elif hours:
4983:                    # Convert hh:mm to decimal hours
4984:                    try:
4985:                        h, m = map(int, hours.split(':'))
4986:                        hours = h + m/60
4987:                    except ValueError:
4988:                        flash(f'Invalid hours format for employee {employee_id}.', 'error')
4989:                        continue
4990:                
4991:                cursor.execute('''
4992:                    INSERT INTO employee_shifts (shiftid, employeeid, hours)
4993:                    VALUES (%s, %s, %s)
4994:                ''', (shift_id, employee_id, hours))
4995:            
4996:            conn.commit()
4997:            flash('Employee assignments saved successfully!', 'success')
4998:            
4999:            return redirect(url_for('edit_event_unified', event_id=shift['eventid']))
5000:            
5001:    except Exception as e:
5002:        flash(f'Error saving shift assignments: {str(e)}', 'error')
5003:        return redirect(url_for('event_list'))
5004:    finally:
5005:        if 'conn' in locals():
5006:            conn.close()
5007:
5008:@app.route('/create_shift', methods=['POST'])
5009:@login_required
5010:def create_shift_unified():
5011:    """Create a new shift."""
5012:    try:
5013:        data = request.get_json()
5014:        
5015:        if not data or not data.get('event_id'):
5016:            return jsonify({'success': False, 'error': 'Event ID is required'}), 400
5017:        
5018:        conn = pymysql.connect(
5019:            host='localhost',
5020:            user='root',
5021:            password='V0sp0r0si968!',
5022:            database='sml',
5023:            cursorclass=pymysql.cursors.DictCursor
5024:        )
5025:        
5026:        with conn.cursor() as cursor:
5027:            # Insert shift
5028:            cursor.execute('''
5029:                INSERT INTO shifts (
5030:                    eventid,
5031:                    shiftname,
5032:                    shifttype,
5033:                    shiftstart,
5034:                    shiftend
5035:                ) VALUES (
5036:                    %s, %s, %s, %s, %s
5037:                )
5038:            ''', (
5039:                data.get('event_id'),
5040:                data.get('name'),
5041:                data.get('type'),
5042:                data.get('start'),
5043:                data.get('end')
5044:            ))
5045:            
5046:            shift_id = cursor.lastrowid
5047:            conn.commit()
5048:            
5049:            # Return the created shift with empty employees array
5050:            return jsonify({
5051:                'success': True,
5052:                'shift': {
5053:                    'id': shift_id,
5054:                    'name': data.get('name'),
5055:                    'type': data.get('type'),
5056:                    'start': data.get('start'),
5057:                    'end': data.get('end'),
5058:                    'employees': []  # Initialize empty employees array
5059:                }
5060:            })
5061:            
5062:    except Exception as e:
5063:        return jsonify({'success': False, 'error': str(e)}), 500
5064:    finally:
5065:        if 'conn' in locals() and conn:
5066:            conn.close()
5067:
5068:@app.route('/shifts/<int:shift_id>/assign', methods=['GET'])
5069:@login_required
5070:def assign_employees(shift_id):
5071:    """Show the assign employees page for a shift."""
5072:    try:
5073:        conn = pymysql.connect(
5074:            host='localhost',
5075:            user='root',
5076:            password='V0sp0r0si968!',
5077:            database='sml',
5078:            cursorclass=pymysql.cursors.DictCursor
5079:        )
5080:        
5081:        with conn.cursor() as cursor:
5082:            # Get shift details
5083:            cursor.execute('''
5084:                SELECT 
5085:                    s.*,
5086:                    e.EventName
5087:                FROM shifts s
5088:                LEFT JOIN event e ON s.eventid = e.EventID
5089:                WHERE s.shiftid = %s
5090:            ''', (shift_id,))
5091:            
5092:            shift = cursor.fetchone()
5093:            if not shift:
5094:                flash('Shift not found.', 'error')
5095:                return redirect(url_for('event_list'))
5096:            
5097:            # Get all employees
5098:            cursor.execute('''
5099:                SELECT 
5100:                    e.*,
5101:                    es.hours
5102:                FROM employees e
5103:                LEFT JOIN employee_shifts es ON e.employeeid = es.employeeid AND es.shiftid = %s
5104:                ORDER BY e.employeename
5105:            ''', (shift_id,))
5106:            
5107:            employees = cursor.fetchall()
5108:            
5109:            # Get list of assigned employee IDs
5110:            assigned_employee_ids = [emp['employeeid'] for emp in employees if emp['hours'] is not None]
5111:            
5112:            return render_template('shifts/assign_employees.html',
5113:                                 shift=shift,
5114:                                 employees=employees,
5115:                                 assigned_employee_ids=assigned_employee_ids)
5116:                                 
5117:    except Exception as e:
5118:        flash(f'Error loading shift assignments: {str(e)}', 'error')
5119:        return redirect(url_for('event_list'))
5120:    finally:
5121:        if 'conn' in locals():
5122:            conn.close()
5123:
5125:@login_required
5126:def save_shift_assignments():
5127:    """Save employee assignments for a shift."""
5128:    try:
5129:        shift_id = request.form.get('shift_id')
5130:        if not shift_id:
5131:            flash('Shift ID is required.', 'error')
5132:            return redirect(url_for('event_list'))
5133:            
5134:        selected_employees = request.form.getlist('selected_employees[]')
5135:        
5136:        conn = pymysql.connect(
5137:            host='localhost',
5138:            user='root',
5139:            password='V0sp0r0si968!',
5140:            database='sml',
5141:            cursorclass=pymysql.cursors.DictCursor
5142:        )
5143:        
5144:        with conn.cursor() as cursor:
5145:            # Get shift details
5146:            cursor.execute('SELECT * FROM shifts WHERE shiftid = %s', (shift_id,))
5147:            shift = cursor.fetchone()
5148:            
5149:            if not shift:
5150:                flash('Shift not found.', 'error')
5151:                return redirect(url_for('event_list'))
5152:            
5153:            # Remove all existing assignments
5154:            cursor.execute('DELETE FROM employee_shifts WHERE shiftid = %s', (shift_id,))
5155:            
5156:            # Add new assignments
5157:            for employee_id in selected_employees:
5158:                hours = request.form.get(f'hours_{employee_id}')
5159:                
5160:                # For full shifts, use the shift duration
5161:                if shift['shifttype'] == 'Full':
5162:                    hours = shift['total_hours']
5163:                elif hours:
5164:                    # Convert hh:mm to decimal hours
5165:                    try:
5166:                        h, m = map(int, hours.split(':'))
5167:                        hours = h + m/60
5168:                    except ValueError:
5169:                        flash(f'Invalid hours format for employee {employee_id}.', 'error')
5170:                        continue
5171:                
5172:                cursor.execute('''
5173:                    INSERT INTO employee_shifts (shiftid, employeeid, hours)
5174:                    VALUES (%s, %s, %s)
5175:                ''', (shift_id, employee_id, hours))
5176:            
5177:            conn.commit()
5178:            flash('Employee assignments saved successfully!', 'success')
5179:            
5180:            return redirect(url_for('edit_event_unified', event_id=shift['eventid']))
5181:            
5182:    except Exception as e:
5183:        flash(f'Error saving shift assignments: {str(e)}', 'error')
5184:        return redirect(url_for('event_list'))
5185:    finally:
5186:        if 'conn' in locals():
5187:            conn.close()
5188:
5189:@app.route('/events/<int:event_id>/update_financials', methods=['POST'])
5190:@login_required
5191:def update_event_financials(event_id):
5192:    """API endpoint to update financial information for an event."""
5193:    try:
5194:        data = request.json
5195:        totalhours = float(data.get('totalhours', 0))
5196:        totalcost = float(data.get('totalcost', 0)) 
5197:        totalselling = float(data.get('totalselling', 0))
5198:        
5199:        # Calculate totalprofit based on totalselling and totalcost
5200:        # Using round to 2 decimal places to avoid floating point precision issues
5201:        totalprofit = round(totalselling - totalcost, 2)
5202:        
5203:        conn = pymysql.connect(
5204:            host='localhost',
5205:            user='root',
5206:            password='V0sp0r0si968!',
5207:            database='sml',
5208:            cursorclass=pymysql.cursors.DictCursor
5209:        )
5210:        
5211:        with conn.cursor() as cursor:
5212:            # Update the event's financial information in the database
5213:            cursor.execute('''
5214:                UPDATE event
5215:                SET 
5216:                    totalhours = %s,
5217:                    totalcost = %s,
5218:                    totalselling = %s,
5219:                    totalprofit = %s
5220:                WHERE EventID = %s
5221:            ''', (totalhours, totalcost, totalselling, totalprofit, event_id))
5222:            
5223:            conn.commit()
5224:            
5225:            # After updating, retrieve the updated values to verify they were stored correctly
5226:            cursor.execute('''
5227:                SELECT totalcost, totalselling, totalprofit
5228:                FROM event
5229:                WHERE EventID = %s
5230:            ''', (event_id,))
5231:            
5232:            updated_event = cursor.fetchone()
5233:            
5234:            # Return the updated values to ensure consistency
5235:            return jsonify({
5236:                'success': True, 
5237:                'updated_values': {
5238:                    'totalcost': float(updated_event['totalcost']),
5239:                    'totalselling': float(updated_event['totalselling']),
5240:                    'totalprofit': float(updated_event['totalprofit'])
5241:                }
5242:            })
5243:    except Exception as e:
5244:        return jsonify({'success': False, 'error': str(e)})
5245:    finally:
5246:        if 'conn' in locals():
5247:            conn.close()
5248:
5249:@app.template_filter('datetimeformat')
5250:def datetimeformat(value, format='%Y-%m-%dT%H:%M'):
5251:    """Format a datetime object for display in HTML datetime-local input."""
5252:    if value is None:
5253:        return ""
5254:    if isinstance(value, str):
5255:        try:
5256:            value = datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
5257:        except ValueError:
5258:            try:
5259:                value = datetime.strptime(value, '%Y-%m-%d %H:%M')
5260:            except ValueError:
5261:                return value
5262:    if isinstance(value, datetime):
5263:        return value.strftime(format)
5264:    return ""
5265:
5266:@app.route('/invoice/<int:invoice_id>/pdf')
5267:@login_required
5268:def invoice_pdf(invoice_id):
5269:    """Generate a PDF version of the invoice."""
5270:    try:
5271:        conn = pymysql.connect(
5272:            host='localhost',
5273:            user='root',
5274:            password='V0sp0r0si968!',
5275:            database='sml',
5276:            cursorclass=pymysql.cursors.DictCursor
5277:        )
5278:        
5279:        with conn.cursor() as cursor:
5280:            # Get invoice details
5281:            cursor.execute('''
5282:                SELECT 
5283:                    i.*,
5284:                    c.customername,
5285:                    c.customeraddress,
5286:                    c.customerphone,
5287:                    c.customeremail,
5288:                    e.EventName as event_name
5289:                FROM invoice i
5290:                LEFT JOIN customer c ON i.customer_id = c.customerid
5291:                LEFT JOIN event e ON i.event_id = e.EventID
5292:                WHERE i.invoice_id = %s
5293:            ''', (invoice_id,))
5294:            invoice = cursor.fetchone()
5295:            
5296:            if not invoice:
5297:                flash('Invoice not found', 'error')
5298:                return redirect(url_for('invoice_list'))
5299:            
5300:            # Get invoice items
5301:            cursor.execute('SELECT * FROM invoice_item WHERE invoice_id = %s', (invoice_id,))
5302:            items = cursor.fetchall()
5303:            
5304:            # Get company details for the invoice header
5305:            cursor.execute('SELECT * FROM company LIMIT 1')
5306:            company = cursor.fetchone()
5307:            
5308:        # For now, we'll just render the view as HTML since PDF generation would require additional libraries
5309:        # In a future update, this could be replaced with actual PDF generation using libraries like WeasyPrint, FPDF, etc.
5310:        response = make_response(render_template(
5311:            'invoices/pdf.html',
5312:            invoice=invoice,
5313:            items=items,
5314:            company=company
5315:        ))
5316:        
5317:        # Set content type to PDF for future implementation
5318:        response.headers['Content-Type'] = 'text/html'
5319:        response.headers['Content-Disposition'] = f'inline; filename=invoice_{invoice["invoice_number"]}.html'
5320:        
5321:        return response
5322:    
5323:    except Exception as e:
5324:        flash(f'Error generating invoice PDF: {str(e)}', 'error')
5325:        return redirect(url_for('invoice_view', invoice_id=invoice_id))
5326:    finally:
5327:        if 'conn' in locals():
5328:            conn.close()
5329:
5330:@app.route('/invoice/<int:invoice_id>/send', methods=['GET', 'POST'])
5331:@login_required
5332:def send_invoice_email(invoice_id):
5333:    """Send invoice to client via email."""
5334:    try:
5335:        conn = pymysql.connect(
5336:            host='localhost',
5337:            user='root',
5338:            password='V0sp0r0si968!',
5339:            database='sml',
5340:            cursorclass=pymysql.cursors.DictCursor
5341:        )
5342:        
5343:        with conn.cursor() as cursor:
5344:            # Get invoice details with customer information
5345:            cursor.execute('''
5346:                SELECT 
5347:                    i.*,
5348:                    c.customername,
5349:                    c.customeraddress,
5350:                    c.customerphone,
5351:                    c.customeremail,
5352:                    e.EventName as event_name
5353:                FROM invoice i
5354:                LEFT JOIN customer c ON i.customer_id = c.customerid
5355:                LEFT JOIN event e ON i.event_id = e.EventID
5356:                WHERE i.invoice_id = %s
5357:            ''', (invoice_id,))
5358:            invoice = cursor.fetchone()
5359:            
5360:            if not invoice:
5361:                flash('Invoice not found', 'error')
5362:                return redirect(url_for('invoice_list'))
5363:            
5364:            # Get invoice items
5365:            cursor.execute('SELECT * FROM invoice_item WHERE invoice_id = %s', (invoice_id,))
5366:            items = cursor.fetchall()
5367:            
5368:            # Get company details for the email
5369:            cursor.execute('SELECT * FROM company LIMIT 1')
5370:            company = cursor.fetchone()
5371:            
5372:            # Get email settings
5373:            cursor.execute('SELECT * FROM email_settings LIMIT 1')
5374:            email_settings = cursor.fetchone()
5375:            
5376:            if request.method == 'POST':
5377:                # Process email sending
5378:                recipient_email = request.form.get('recipient_email', invoice['customeremail'])
5379:                subject = request.form.get('subject', f"Invoice {invoice['invoice_number']} from {company['companyname']}")
5380:                message = request.form.get('message', '')
5381:                include_pdf = 'include_pdf' in request.form
5382:                
5383:                # Generate invoice URL for viewing online
5384:                invoice_url = url_for('invoice_view', invoice_id=invoice_id, _external=True)
5385:                
5386:                # Create PDF invoice if needed
5387:                pdf_content = None
5388:                pdf_path = None
5389:                pdf_filename = f"Invoice_{invoice['invoice_number']}.pdf"
5390:                temp_dir = os.path.join(os.getcwd(), 'temp')
5391:                
5392:                # Make sure temp directory exists
5393:                if not os.path.exists(temp_dir):
5394:                    os.makedirs(temp_dir)
5395:                
5396:                if include_pdf:
5397:                    try:
5398:                        # Generate HTML content for PDF
5399:                        html_content = render_template(
5400:                            'invoices/pdf.html',
5401:                            invoice=invoice,
5402:                            items=items,
5403:                            company=company
5404:                        )
5405:                        
5406:                        # Save HTML to temp file
5407:                        html_path = os.path.join(temp_dir, f"invoice_{invoice_id}.html")
5408:                        with open(html_path, 'w', encoding='utf-8') as f:
5409:                            f.write(html_content)
5410:                        
5411:                        # Try to use pdfkit if available (requires wkhtmltopdf installed)
5412:                        pdf_path = os.path.join(temp_dir, pdf_filename)
5413:                        try:
5414:                            import pdfkit
5415:                            config = pdfkit.configuration()
5416:                            pdfkit.from_file(html_path, pdf_path, configuration=config)
5417:                        except (ImportError, Exception) as e:
5418:                            # If pdfkit fails, just use the HTML file
5419:                            pdf_path = html_path
5420:                            pdf_filename = f"Invoice_{invoice['invoice_number']}.html"
5421:                            print(f"Falling back to HTML file: {str(e)}")
5422:                        
5423:                        # Read the file contents for direct email sending
5424:                        with open(pdf_path, 'rb') as f:
5425:                            pdf_content = f.read()
5426:                        
5427:                    except Exception as e:
5428:                        flash(f'Error generating PDF: {str(e)}', 'warning')
5429:                        print(f"PDF generation error: {str(e)}")
5430:                        pdf_content = None
5431:                        pdf_path = None
5432:                
5433:                # Check if direct sending is enabled and configured
5434:                if email_settings and email_settings['direct_send']:
5435:                    # Set up email content
5436:                    html_email = render_template(
5437:                        'emails/invoice_email.html',
5438:                        invoice=invoice,
5439:                        company=company,
5440:                        message=message.replace('\n', '<br>'),  # Convert newlines to HTML breaks
5441:                        invoice_url=invoice_url
5442:                    )
5443:                    
5444:                    # Determine which method to use (SMTP or Exchange)
5445:                    server_type = email_settings.get('server_type', 'smtp')
5446:                    
5447:                    if server_type == 'exchange' and email_settings['exchange_server'] and email_settings['username']:
5448:                        try:
5449:                            # Check if pywin32 is installed
5450:                            try:
5451:                                import win32com.client
5452:                                import pythoncom
5453:                            except ImportError:
5454:                                flash('Microsoft Exchange/Outlook integration requires pywin32. Please install it with: pip install pywin32', 'error')
5455:                                return render_template(
5456:                                    'invoices/email_form.html',
5457:                                    invoice=invoice,
5458:                                    items=items,
5459:                                    company=company,
5460:                                    email_settings=email_settings,
5461:                                    recipient_email=recipient_email,
5462:                                    subject=subject,
5463:                                    message=message,
5464:                                    error="pywin32 module is not installed"
5465:                                )
5466:                            
5467:                            # Initialize COM for this thread
5468:                            pythoncom.CoInitialize()
5469:                            
5470:                            try:
5471:                                # Use Outlook COM objects to send email via Exchange
5472:                                outlook = win32com.client.Dispatch('Outlook.Application')
5473:                                mail = outlook.CreateItem(0)  # 0 = olMailItem
5474:                                
5475:                                mail.Subject = subject
5476:                                mail.To = recipient_email
5477:                                mail.HTMLBody = html_email
5478:                                
5479:                                # Add PDF attachment if needed
5480:                                if include_pdf and pdf_path:
5481:                                    mail.Attachments.Add(pdf_path)
5482:                                
5483:                                # Send or display based on setting
5484:                                mail.Send()
5485:                                
5486:                                # Update invoice status to 'Sent'
5487:                                cursor.execute('UPDATE invoice SET status = %s WHERE invoice_id = %s', ('Sent', invoice_id))
5488:                                conn.commit()
5489:                                
5490:                                # Update event status to 'Completed' if there's an associated event
5491:                                if invoice['event_id']:
5492:                                    cursor.execute('UPDATE event SET EventStage = %s WHERE EventID = %s', ('Completed', invoice['event_id']))
5493:                                    conn.commit()
5494:                                    flash(f'Event status updated to Completed', 'success')
5495:                                
5496:                                flash(f'Email sent to {recipient_email} via Outlook/Exchange', 'success')
5497:                                return redirect(url_for('invoice_view', invoice_id=invoice_id))
5498:                            finally:
5499:                                # Make sure to uninitialize COM when done
5500:                                pythoncom.CoUninitialize()
5501:                            
5502:                        except Exception as e:
5503:                            flash(f'Error sending email via Exchange: {str(e)}', 'error')
5504:                            return render_template(
5505:                                'invoices/email_form.html',
5506:                                invoice=invoice,
5507:                                items=items,
5508:                                company=company,
5509:                                email_settings=email_settings,
5510:                                recipient_email=recipient_email,
5511:                                subject=subject,
5512:                                message=message,
5513:                                error=f"Exchange send failed: {str(e)}"
5514:                            )
5515:                    
5516:                    else:  # SMTP
5517:                        # Check if SMTP settings are configured
5518:                        if (email_settings['smtp_server'] and 
5519:                            (not email_settings['auth_required'] or 
5520:                             (email_settings['username'] and email_settings['password']))):
5521:                            try:
5522:                                import smtplib
5523:                                from email.mime.multipart import MIMEMultipart
5524:                                from email.mime.text import MIMEText
5525:                                from email.mime.base import MIMEBase
5526:                                from email import encoders
5527:                                
5528:                                # Create message
5529:                                msg = MIMEMultipart('alternative')
5530:                                msg['Subject'] = subject
5531:                                msg['From'] = f"{email_settings['from_name']} <{email_settings['from_email']}>"
5532:                                msg['To'] = recipient_email
5533:                                
5534:                                # Add HTML and plain text parts
5535:                                # Convert the HTML message to plain text by stripping tags
5536:                                plain_text = message.replace('<br>', '\n')
5537:                                part1 = MIMEText(plain_text, 'plain')
5538:                                part2 = MIMEText(html_email, 'html')
5539:                                
5540:                                # The last part attached is the preferred format
5541:                                msg.attach(part1)  # First attach plain text (fallback)
5542:                                msg.attach(part2)  # Then attach HTML (preferred)
5543:                                
5544:                                # Attach PDF if needed
5545:                                if include_pdf and pdf_content:
5546:                                    attachment = MIMEBase('application', 'octet-stream')
5547:                                    attachment.set_payload(pdf_content)
5548:                                    encoders.encode_base64(attachment)
5549:                                    attachment.add_header(
5550:                                        'Content-Disposition', 
5551:                                        f'attachment; filename="{pdf_filename}"'
5552:                                    )
5553:                                    msg.attach(attachment)
5554:                                
5555:                                # Setup SMTP server
5556:                                if email_settings['use_ssl']:
5557:                                    smtp = smtplib.SMTP_SSL(email_settings['smtp_server'], email_settings['smtp_port'])
5558:                                else:
5559:                                    smtp = smtplib.SMTP(email_settings['smtp_server'], email_settings['smtp_port'])
5560:                                
5561:                                if email_settings['use_tls']:
5562:                                    smtp.starttls()
5563:                                
5564:                                if email_settings['auth_required']:
5565:                                    smtp.login(email_settings['username'], email_settings['password'])
5566:                                
5567:                                # Send email
5568:                                smtp.send_message(msg)
5569:                                smtp.quit()
5570:                                
5571:                                # Update invoice status to 'Sent'
5572:                                cursor.execute('UPDATE invoice SET status = %s WHERE invoice_id = %s', ('Sent', invoice_id))
5573:                                conn.commit()
5574:                                
5575:                                # Update event status to 'Completed' if there's an associated event
5576:                                if invoice['event_id']:
5577:                                    cursor.execute('UPDATE event SET EventStage = %s WHERE EventID = %s', ('Completed', invoice['event_id']))
5578:                                    conn.commit()
5579:                                    flash(f'Event status updated to Completed', 'success')
5580:                                
5581:                                flash(f'Email sent to {recipient_email} via SMTP', 'success')
5582:                                return redirect(url_for('invoice_view', invoice_id=invoice_id))
5583:                                
5584:                            except Exception as e:
5585:                                flash(f'Error sending email via SMTP: {str(e)}', 'error')
5586:                                return render_template(
5587:                                    'invoices/email_form.html',
5588:                                    invoice=invoice,
5589:                                    items=items,
5590:                                    company=company,
5591:                                    email_settings=email_settings,
5592:                                    recipient_email=recipient_email,
5593:                                    subject=subject,
5594:                                    message=message,
5595:                                    error=f"SMTP send failed: {str(e)}"
5596:                                )
5597:                        else:
5598:                            flash('SMTP settings are not fully configured. Please update them in Admin → Email Settings', 'warning')
5599:                
5600:                # If direct sending is disabled or failed, open in default email client
5601:                desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
5602:                
5603:                # Save PDF to desktop for manual attachment
5604:                if include_pdf and pdf_path:
5605:                    desktop_file_path = os.path.join(desktop_path, pdf_filename)
5606:                    try:
5607:                        import shutil
5608:                        shutil.copy2(pdf_path, desktop_file_path)
5609:                        flash(f'Invoice saved to your desktop as {pdf_filename}', 'success')
5610:                    except Exception as e:
5611:                        flash(f'Could not save invoice to desktop: {str(e)}', 'warning')
5612:                        desktop_file_path = None
5613:                else:
5614:                    desktop_file_path = None
5615:                
5616:                # Create email mailto link for the client's default email program
5617:                import urllib.parse
5618:                mailto_link = f"mailto:{recipient_email}?subject={urllib.parse.quote(subject)}&body={urllib.parse.quote(message)}"
5619:                
5620:                # Update invoice status to 'Sent'
5621:                cursor.execute('UPDATE invoice SET status = %s WHERE invoice_id = %s', ('Sent', invoice_id))
5622:                conn.commit()
5623:                
5624:                # Update event status to 'Completed' if there's an associated event
5625:                if invoice['event_id']:
5626:                    cursor.execute('UPDATE event SET EventStage = %s WHERE EventID = %s', ('Completed', invoice['event_id']))
5627:                    conn.commit()
5628:                    flash(f'Event status updated to Completed', 'success')
5629:                
5630:                flash('Preparing to open your default email client...', 'info')
5631:                return render_template(
5632:                    'invoices/email_sent.html',
5633:                    invoice=invoice,
5634:                    recipient_email=recipient_email,
5635:                    mailto_link=mailto_link,
5636:                    pdf_saved=desktop_file_path is not None,
5637:                    pdf_path=desktop_file_path
5638:                )
5639:            
5640:            # GET request - show the email form
5641:            return render_template(
5642:                'invoices/email_form.html',
5643:                invoice=invoice,
5644:                items=items,
5645:                company=company,
5646:                email_settings=email_settings,
5647:                recipient_email=invoice['customeremail'],
5648:                subject=f"Invoice {invoice['invoice_number']} from {company['companyname'] if company else 'our company'}",
5649:                message=f"Dear {invoice['customername']},\n\nPlease find attached the invoice {invoice['invoice_number']} for {invoice['event_name'] if invoice['event_name'] else 'our services'}.\n\nTotal amount: {invoice['total']} EUR\nDue date: {invoice['due_date'].strftime('%d.%m.%Y') if invoice['due_date'] else 'N/A'}\n\nPlease contact us if you have any questions.\n\nBest regards,\n{company['companyname'] if company else 'Our Company'}"
5650:            )
5651:        
5652:    except Exception as e:
5653:        flash(f'Error preparing invoice email: {str(e)}', 'error')
5654:        return redirect(url_for('invoice_view', invoice_id=invoice_id))
5655:    finally:
5656:        if 'conn' in locals():
5657:            conn.close()
5658:
5659:@app.route('/admin/email_settings')
5660:@login_required
5661:def admin_email_settings():
5662:    # Check for admin privileges
5663:    if session.get('role') != 'admin':
5664:        flash('Access denied. Admin privileges required.', 'error')
5665:        return redirect(url_for('home'))
5666:    
5667:    # Get email settings
5668:    connection = pymysql.connect(
5669:        host='localhost',
5670:        user='root',
5671:        password='V0sp0r0si968!',
5672:        database='sml',
5673:        cursorclass=pymysql.cursors.DictCursor
5674:    )
5675:    
5676:    cursor = connection.cursor()
5677:    
5678:    try:
5679:        # Get email settings
5680:        cursor.execute('SELECT * FROM email_settings LIMIT 1')
5681:        email_settings = cursor.fetchone()
5682:        
5683:        # Create default settings if none exist
5684:        if not email_settings:
5685:            try:
5686:                # Insert default settings with Exchange/Outlook enabled
5687:                cursor.execute('''
5688:                    INSERT INTO email_settings (
5689:                        server_type, direct_send, exchange_server, smtp_server, 
5690:                        smtp_port, use_ssl, use_tls, auth_required
5691:                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
5692:                ''', (
5693:                    'exchange',  # Set Exchange as default
5694:                    1,           # Enable direct send
5695:                    'outlook.office365.com',  # Default Exchange server
5696:                    'smtp-mail.outlook.com',  # Default SMTP server as fallback
5697:                    587, 0, 1, 0  # Default SMTP settings as fallback
5698:                ))
5699:                connection.commit()
5700:                
5701:                # Fetch the new settings
5702:                cursor.execute('SELECT * FROM email_settings LIMIT 1')
5703:                email_settings = cursor.fetchone()
5704:                
5705:                flash('Default email settings created with Outlook/Exchange configuration', 'info')
5706:            except Exception as e:
5707:                flash(f'Error creating default email settings: {str(e)}', 'error')
5708:        
5709:        # Get company info for defaults
5710:        cursor.execute('SELECT * FROM company LIMIT 1')
5711:        company = cursor.fetchone()
5712:        
5713:        return render_template('admin/email_settings.html', 
5714:                              email_settings=email_settings,
5715:                              company=company)
5716:    except Exception as e:
5717:        flash(f'Error loading email settings: {str(e)}', 'error')
5718:        return render_template('admin/email_settings.html', 
5719:                              email_settings=None,
5720:                              company=None)
5721:    finally:
5722:        cursor.close()
5723:        connection.close()
5724:
5725:@app.route('/admin/email_settings/update', methods=['POST'])
5726:@login_required
5727:def admin_email_settings_update():
5728:    # Check for admin privileges
5729:    if session.get('role') != 'admin':
5730:        flash('Access denied. Admin privileges required.', 'error')
5731:        return redirect(url_for('home'))
5732:    
5733:    # Get form data
5734:    smtp_server = request.form.get('smtp_server')
5735:    smtp_port = request.form.get('smtp_port', 587)
5736:    use_ssl = 1 if request.form.get('use_ssl') else 0
5737:    use_tls = 1 if request.form.get('use_tls') else 0
5738:    auth_required = 1 if request.form.get('auth_required') else 0
5739:    username = request.form.get('username')
5740:    password = request.form.get('password')
5741:    from_email = request.form.get('from_email')
5742:    from_name = request.form.get('from_name')
5743:    direct_send = 1 if request.form.get('direct_send') else 0
5744:    server_type = request.form.get('server_type', 'smtp')
5745:    exchange_server = request.form.get('exchange_server')
5746:    
5747:    # For Outlook integration, we don't necessarily need username/password 
5748:    # since we're using the local Outlook instance
5749:    if server_type == 'exchange':
5750:        # Set some reasonable defaults for Exchange
5751:        if not exchange_server:
5752:            exchange_server = 'outlook.office365.com'
5753:    
5754:    connection = pymysql.connect(
5755:        host='localhost',
5756:        user='root',
5757:        password='V0sp0r0si968!',
5758:        database='sml',
5759:        cursorclass=pymysql.cursors.DictCursor
5760:    )
5761:    
5762:    cursor = connection.cursor()
5763:    
5764:    try:
5765:        # Check if record exists
5766:        cursor.execute('SELECT COUNT(*) as count FROM email_settings')
5767:        count = cursor.fetchone()['count']
5768:        
5769:        if count > 0:
5770:            # Update existing record
5771:            cursor.execute('''
5772:                UPDATE email_settings SET 
5773:                smtp_server = %s, 
5774:                smtp_port = %s,
5775:                use_ssl = %s,
5776:                use_tls = %s,
5777:                auth_required = %s,
5778:                username = %s,
5779:                password = %s,
5780:                from_email = %s,
5781:                from_name = %s,
5782:                direct_send = %s,
5783:                server_type = %s,
5784:                exchange_server = %s
5785:                WHERE id = (SELECT id FROM (SELECT id FROM email_settings LIMIT 1) as t)
5786:            ''', (
5787:                smtp_server, smtp_port, use_ssl, use_tls, auth_required, 
5788:                username, password, from_email, from_name, direct_send,
5789:                server_type, exchange_server
5790:            ))
5791:        else:
5792:            # Insert new record
5793:            cursor.execute('''
5794:                INSERT INTO email_settings (
5795:                    smtp_server, smtp_port, use_ssl, use_tls, auth_required,
5796:                    username, password, from_email, from_name, direct_send,
5797:                    server_type, exchange_server
5798:                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
5799:            ''', (
5800:                smtp_server, smtp_port, use_ssl, use_tls, auth_required, 
5801:                username, password, from_email, from_name, direct_send,
5802:                server_type, exchange_server
5803:            ))
5804:        
5805:        connection.commit()
5806:        flash('Email settings updated successfully', 'success')
5807:    except Exception as e:
5808:        connection.rollback()
5809:        flash(f'Error updating email settings: {str(e)}', 'error')
5810:        
5811:    try:
5812:        # Get updated email settings
5813:        cursor.execute('SELECT * FROM email_settings LIMIT 1')
5814:        email_settings = cursor.fetchone()
5815:        
5816:        # Get company info for defaults
5817:        cursor.execute('SELECT * FROM company LIMIT 1')
5818:        company = cursor.fetchone()
5819:        
5820:        return render_template('admin/email_settings.html', 
5821:                            email_settings=email_settings,
5822:                            company=company)
5823:    except Exception as e:
5824:        flash(f'Error loading email settings: {str(e)}', 'error')
5825:        return render_template('admin/email_settings.html')
5826:    finally:
5827:        cursor.close()
5828:        connection.close()
5829:
5830:@app.route('/admin/email_settings/test_connection', methods=['POST'])
5831:@login_required
5832:def test_email_connection():
5833:    # Check for admin privileges
5834:    if session.get('role') != 'admin':
5835:        return jsonify({'success': False, 'message': 'Access denied. Admin privileges required.'})
5836:    
5837:    # Get form data
5838:    server_type = request.form.get('server_type', 'smtp')
5839:    
5840:    result = {'success': False, 'message': ''}
5841:    
5842:    try:
5843:        if server_type == 'exchange':
5844:            # Test Outlook connection - we're using the local Outlook instance
5845:            try:
5846:                import win32com.client
5847:                import pythoncom
5848:                
5849:                # Initialize COM for this thread
5850:                pythoncom.CoInitialize()
5851:                
5852:                try:
5853:                    # Try to create Outlook object
5854:                    outlook = win32com.client.Dispatch('Outlook.Application')
5855:                    
5856:                    # Check if we can create a mail item
5857:                    mail = outlook.CreateItem(0)  # 0 = olMailItem
5858:                    if mail:
5859:                        # If we can create a mail item, the connection is successful
5860:                        result['success'] = True
5861:                        result['message'] = 'Successfully connected to your local Outlook application. Your existing Outlook account will be used to send emails.'
5862:                    else:
5863:                        result['success'] = False
5864:                        result['message'] = 'Could not create a mail item in Outlook. Make sure Outlook is installed and configured.'
5865:                finally:
5866:                    # Make sure to uninitialize COM when done
5867:                    pythoncom.CoUninitialize()
5868:                
5869:            except ImportError:
5870:                result['success'] = False
5871:                result['message'] = 'Microsoft Outlook integration requires the pywin32 library. Please install it with: pip install pywin32'
5872:            except Exception as e:
5873:                result['success'] = False
5874:                result['message'] = f"Failed to connect to Outlook: {str(e)}"
5875:        else:
5876:            # Test SMTP connection
5877:            smtp_server = request.form.get('smtp_server')
5878:            smtp_port = int(request.form.get('smtp_port', 587))
5879:            use_ssl = bool(int(request.form.get('use_ssl', 0)))
5880:            use_tls = bool(int(request.form.get('use_tls', 0)))
5881:            auth_required = bool(int(request.form.get('auth_required', 0)))
5882:            username = request.form.get('username')
5883:            password = request.form.get('password')
5884:            
5885:            import smtplib
5886:            
5887:            # Choose the right SMTP class based on SSL setting
5888:            if use_ssl:
5889:                server = smtplib.SMTP_SSL(smtp_server, smtp_port, timeout=5)
5890:            else:
5891:                server = smtplib.SMTP(smtp_server, smtp_port, timeout=5)
5892:            
5893:            # Start TLS if needed
5894:            if use_tls:
5895:                server.starttls()
5896:            
5897:            # Try authentication if required
5898:            if auth_required:
5899:                if not username or not password:
5900:                    result['success'] = False
5901:                    result['message'] = 'Authentication is required but username or password is missing'
5902:                else:
5903:                    server.login(username, password)
5904:                    result['success'] = True
5905:                    result['message'] = 'Successfully connected and authenticated to SMTP server'
5906:            else:
5907:                result['success'] = True
5908:                result['message'] = 'Successfully connected to SMTP server'
5909:            
5910:            # Close the connection
5911:            server.quit()
5912:            
5913:    except Exception as e:
5914:        result['success'] = False
5915:        result['message'] = f"Connection test failed: {str(e)}"
5916:    
5917:    return jsonify(result)
5918:
5919:@app.route('/customer_invoices/<int:customer_id>')
5920:@login_required
5921:def customer_invoices(customer_id):
5922:    """Display invoices related to a specific customer."""
5923:    try:
5924:        # Get customer details
5925:        conn = pymysql.connect(
5926:            host='localhost',
5927:            user='root',
5928:            password='V0sp0r0si968!',
5929:            database='sml',
5930:            cursorclass=pymysql.cursors.DictCursor
5931:        )
5932:        
5933:        with conn.cursor() as cursor:
5934:            cursor.execute('SELECT * FROM customer WHERE customerid = %s', (customer_id,))
5935:            customer = cursor.fetchone()
5936:            
5937:            if not customer:
5938:                flash('Customer not found', 'error')
5939:                return redirect(url_for('invoice_list'))
5940:            
5941:            # Get invoices for this customer
5942:            cursor.execute('''
5943:                SELECT 
5944:                    i.*,
5945:                    e.EventName as event_name
5946:                FROM invoice i
5947:                LEFT JOIN event e ON i.event_id = e.EventID
5948:                WHERE i.customer_id = %s
5949:                ORDER BY i.invoice_date DESC
5950:            ''', (customer_id,))
5951:            
5952:            invoices = cursor.fetchall()
5953:            
5954:            # Convert decimal values to float
5955:            for invoice in invoices:
5956:                if 'total' in invoice and invoice['total'] is not None:
5957:                    invoice['total'] = float(invoice['total'])
5958:                else:
5959:                    invoice['total'] = 0.0
5960:            
5961:            return render_template('invoices/customer_invoices.html',
5962:                                 customer=customer,
5963:                                 invoices=invoices)
5964:    except Exception as e:
5965:        flash(f'Error loading customer invoices: {str(e)}', 'error')
5966:        return redirect(url_for('invoice_list'))
5967:    finally:
5968:        if 'conn' in locals():
5969:            conn.close()
5970:
5971:@app.route('/admin/system-settings')
5972:@login_required
5973:def system_settings():
5974:    # Get all settings
5975:    settings = ContributionSettings.get_all_settings()
5976:    return render_template('admin/system_settings.html', settings=settings)
5977:
5978:@app.route('/admin/system-settings/update', methods=['POST'])
5979:@login_required
5980:def update_system_settings():
5981:    # Get all settings
5982:    settings = ContributionSettings.get_all_settings()
5983:    
5984:    # Update each setting
5985:    for setting in settings:
5986:        value = request.form.get(setting['name'])
5987:        if value is not None:
5988:            ContributionSettings.update_setting(
5989:                setting['name'],
5990:                value,
5991:                setting['display_name'],
5992:                setting['description'],
5993:                setting['type']
5994:            )
5995:    
5996:    flash('Settings updated successfully', 'success')
5997:    return redirect(url_for('system_settings'))
5998:
5999:@app.route('/admin/contribution_settings')
6000:@login_required
6001:def contribution_settings():
6002:    # Get all contribution settings
6003:    all_settings = ContributionSettings.get_all_settings()
6004:    
6005:    # Format settings for template
6006:    contribution_settings = {
6007:        'social_employee': float(all_settings.get('social_employee', {}).get('setting_value', 8.80)),
6008:        'social_employer': float(all_settings.get('social_employer', {}).get('setting_value', 8.80)),
6009:        'gesy_employee': float(all_settings.get('gesy_employee', {}).get('setting_value', 2.65)),
6010:        'gesy_employer': float(all_settings.get('gesy_employer', {}).get('setting_value', 2.90)),
6011:        'cohesion_employee': float(all_settings.get('cohesion_employee', {}).get('setting_value', 0)),
6012:        'cohesion_employer': float(all_settings.get('cohesion_employer', {}).get('setting_value', 2.0)),
6013:        'redundancy_employee': float(all_settings.get('redundancy_employee', {}).get('setting_value', 0)),
6014:        'redundancy_employer': float(all_settings.get('redundancy_employer', {}).get('setting_value', 1.2)),
6015:        'industrial_employee': float(all_settings.get('industrial_employee', {}).get('setting_value', 0)),
6016:        'industrial_employer': float(all_settings.get('industrial_employer', {}).get('setting_value', 0.05))
6017:    }
6018:    
6019:    # Calculate totals
6020:    total_employee = (
6021:        contribution_settings['social_employee'] +
6022:        contribution_settings['gesy_employee'] +
6023:        contribution_settings['cohesion_employee'] +
6024:        contribution_settings['redundancy_employee'] +
6025:        contribution_settings['industrial_employee']
6026:    )
6027:    
6028:    total_employer = (
6029:        contribution_settings['social_employer'] +
6030:        contribution_settings['gesy_employer'] +
6031:        contribution_settings['cohesion_employer'] +
6032:        contribution_settings['redundancy_employer'] +
6033:        contribution_settings['industrial_employer']
6034:    )
6035:    
6036:    contribution_settings['total_employee'] = total_employee
6037:    contribution_settings['total_employer'] = total_employer
6038:    
6039:    return render_template('admin/contribution_settings.html', contribution_settings=contribution_settings)
6040:
6041:@app.route('/admin/update-contribution-settings', methods=['POST'])
6042:@login_required
6043:@admin_required
6044:def update_contribution_settings():
6045:    try:
6046:        # Get form data with default values
6047:        social_employee = float(request.form.get('social_employee', 8.80))
6048:        social_employer = float(request.form.get('social_employer', 8.80))
6049:        gesy_employee = float(request.form.get('gesy_employee', 2.65))
6050:        gesy_employer = float(request.form.get('gesy_employer', 2.90))
6051:        cohesion_employer = float(request.form.get('cohesion_employer', 2.0))
6052:        redundancy_employer = float(request.form.get('redundancy_employer', 1.2))
6053:        industrial_employer = float(request.form.get('industrial_employer', 0.05))
6054:        
6055:        # Update each setting
6056:        ContributionSettings.update_setting('social_employee', social_employee,
6057:            'Social Insurance Employee Contribution',
6058:            'Percentage of employee salary for social insurance',
6059:            'percentage'
6060:        )
6061:        ContributionSettings.update_setting('social_employer', social_employer,
6062:            'Social Insurance Employer Contribution',
6063:            'Percentage of employee salary for social insurance paid by employer',
6064:            'percentage'
6065:        )
6066:        ContributionSettings.update_setting('gesy_employee', gesy_employee,
6067:            'GESY Employee Contribution',
6068:            'National Health Insurance Scheme employee contribution',
6069:            'percentage'
6070:        )
6071:        ContributionSettings.update_setting('gesy_employer', gesy_employer,
6072:            'GESY Employer Contribution',
6073:            'National Health Insurance Scheme employer contribution',
6074:            'percentage'
6075:        )
6076:        ContributionSettings.update_setting('cohesion_employer', cohesion_employer,
6077:            'Social Cohesion Fund',
6078:            'Employer contribution to Social Cohesion Fund',
6079:            'percentage'
6080:        )
6081:        ContributionSettings.update_setting('redundancy_employer', redundancy_employer,
6082:            'Redundancy Fund',
6083:            'Employer contribution to Redundancy Fund',
6084:            'percentage'
6085:        )
6086:        ContributionSettings.update_setting('industrial_employer', industrial_employer,
6087:            'Industrial Training Fund',
6088:            'Employer contribution to Industrial Training Fund',
6089:            'percentage'
6090:        )
6091:        
6092:        flash('Contribution settings updated successfully', 'success')
6093:        return redirect(url_for('contribution_settings'))
6094:    except Exception as e:
6095:        flash(f'Error updating contribution settings: {str(e)}', 'error')
6096:        return redirect(url_for('contribution_settings'))
6097:
6098:@app.route('/employee_revenue_reports')
6099:@login_required
6100:def employee_revenue_reports():
6101:    # Get filter parameters
6102:    employee_id = request.args.get('employee_id', type=int)
6103:    event_id = request.args.get('event_id', type=int)
6104:    start_date = request.args.get('start_date')
6105:    end_date = request.args.get('end_date')
6106:    export = request.args.get('export') == '1'
6107:    
6108:    # Only get reports if filters are applied
6109:    reports = []
6110:    if any([employee_id, event_id, start_date, end_date]):
6111:        reports = EmployeeRevenueReport.get_employee_reports(
6112:            employee_id=employee_id,
6113:            event_id=event_id,
6114:            start_date=start_date,
6115:            end_date=end_date
6116:        )
6117:    
6118:    # Handle Excel export
6119:    if export and reports:
6120:        from datetime import datetime
6121:        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
6122:        filename = f'employee_revenue_reports_{timestamp}.xlsx'
6123:        filepath = os.path.join(app.root_path, 'static', 'exports', filename)
6124:        
6125:        # Ensure exports directory exists
6126:        os.makedirs(os.path.dirname(filepath), exist_ok=True)
6127:        
6128:        # Export to Excel
6129:        if EmployeeRevenueReport.export_to_excel(reports, filepath):
6130:            return send_file(
6131:                filepath,
6132:                as_attachment=True,
6133:                download_name=filename,
6134:                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
6135:            )
6136:    
6137:    # Get all employees for the filter dropdown
6138:    conn = None
6139:    try:
6140:        conn = pymysql.connect(
6141:            host='localhost',
6142:            user='root',
6143:            password='V0sp0r0si968!',
6144:            database='sml',
6145:            cursorclass=pymysql.cursors.DictCursor
6146:        )
6147:        
6148:        with conn.cursor() as cursor:
6149:            cursor.execute("SELECT employeeid, employeename FROM employee ORDER BY employeename")
6150:            employees = cursor.fetchall()
6151:            
6152:            cursor.execute("SELECT EventID, EventName, EventStart FROM event ORDER BY EventStart DESC")
6153:            events = cursor.fetchall()
6154:            
6155:        return render_template('reports/employee_revenue_reports.html',
6156:                             reports=reports,
6157:                             employees=employees,
6158:                             events=events,
6159:                             selected_employee=employee_id,
6160:                             selected_event=event_id,
6161:                             start_date=start_date,
6162:                             end_date=end_date)
6163:    except Exception as e:
6164:        flash(f'Error loading data: {str(e)}', 'error')
6165:        return render_template('reports/employee_revenue_reports.html',
6166:                             reports=[],
6167:                             employees=[],
6168:                             events=[],
6169:                             selected_employee=None,
6170:                             selected_event=None,
6171:                             start_date=None,
6172:                             end_date=None)
6173:    finally:
6174:        if conn:
6175:            conn.close()
6176:
6177:@app.route('/generate_employee_report/<int:employee_id>/<int:event_id>')
6178:@login_required
6179:def generate_employee_report(employee_id, event_id):
6180:    try:
6181:        EmployeeRevenueReport.generate_report(employee_id, event_id)
6182:        flash('Report generated successfully', 'success')
6183:    except Exception as e:
6184:        flash(f'Error generating report: {str(e)}', 'error')
6185:    
6186:    return redirect(url_for('employee_revenue_reports', employee_id=employee_id, event_id=event_id))
6187:
6188:@app.route('/generate_event_reports/<int:event_id>')
6189:@login_required
6190:def generate_event_reports(event_id):
6191:    try:
6192:        EmployeeRevenueReport.generate_reports_for_event(event_id)
6193:        flash('Reports generated successfully for all employees in the event', 'success')
6194:    except Exception as e:
6195:        flash(f'Error generating reports: {str(e)}', 'error')
6196:    
6197:    return redirect(url_for('employee_revenue_reports', event_id=event_id))
6198:
6199:@app.template_filter('decimal_to_hhmm')
6200:def decimal_to_hhmm_filter(value):
6201:    """Convert decimal hours to HH:MM format"""
6202:    if not value:
6203:        return "00:00"
6204:    
6205:    hours = int(value)
6206:    minutes = int((value - hours) * 60)
6207:    return f"{hours:02d}:{minutes:02d}"
6208:
6209:def hhmm_to_decimal(time_str):
6210:    """Convert HH:MM format to decimal hours"""
6211:    if not time_str or ':' not in time_str:
6212:        return 0.0
6213:    try:
6214:        hours, minutes = map(int, time_str.split(':'))
6215:        return float(hours) + (float(minutes) / 60)
6216:    except (ValueError, TypeError):
6217:        return 0.0
6218:
6219:@app.route('/events/<int:event_id>/edit/submit', methods=['POST'])
6220:@login_required
6221:def update_event_submit_unified(event_id):
6222:    try:
6223:        # Parse and validate form fields
6224:        Customerid = request.form.get('Customerid')
6225:        EventName = request.form.get('EventName')
6226:        EventLocation = request.form.get('EventLocation')
6227:        EventStart = request.form.get('EventStart')
6228:        EventEnd = request.form.get('EventEnd')
6229:        notes = request.form.get('notes')
6230:        WaitersNeeded = request.form.get('WaitersNeeded', 0)
6231:        BartendersNeeded = request.form.get('BartendersNeeded', 0)
6232:        MaleEmployees = request.form.get('MaleEmployees', 0)
6233:        FemaleEmployees = request.form.get('FemaleEmployees', 0)
6234:        TotalEmployees = request.form.get('TotalEmployees', 0)
6235:        EventPerHourcost = request.form.get('EventPerHourcost', 0.00)
6236:        EventPerHourselling = request.form.get('EventPerHourselling', 0.00)
6237:        
6238:        # Get decimal values for hours
6239:        totalhours = float(request.form.get('totalhours_decimal', 0.00))
6240:        totalshifthours = float(request.form.get('totalshifthours_decimal', 0.00))
6241:        
6242:        # Convert cost and selling to float
6243:        totalcost = float(request.form.get('totalcost', 0.00))
6244:        totalselling = float(request.form.get('totalselling', 0.00))
6245:        
6246:        # Calculate totalprofit
6247:        totalprofit = totalselling - totalcost
6248:        EventStage = request.form.get('EventStage', 'Creation')
6249:
6250:        # Convert datetimes
6251:        try:
6252:            EventStart_dt = datetime.strptime(EventStart, '%Y-%m-%dT%H:%M') if EventStart else None
6253:            EventEnd_dt = datetime.strptime(EventEnd, '%Y-%m-%dT%H:%M') if EventEnd else None
6254:        except Exception:
6255:            EventStart_dt = None
6256:            EventEnd_dt = None
6257:
6258:        # Backend validation: End must be after Start
6259:        if EventStart_dt and EventEnd_dt and EventEnd_dt <= EventStart_dt:
6260:            flash('End Date & Time must be after Start Date & Time.', 'error')
6261:            return redirect(request.referrer or url_for('event_list'))
6262:
6263:        # Connect to DB and update event
6264:        conn = pymysql.connect(
6265:            host='localhost',
6266:            user='root',
6267:            password='V0sp0r0si968!',
6268:            database='sml',
6269:            cursorclass=pymysql.cursors.DictCursor
6270:        )
6271:        with conn.cursor() as cursor:
6272:            # Get current event stage
6273:            cursor.execute('SELECT EventStage FROM event WHERE EventID = %s', (event_id,))
6274:            current_event = cursor.fetchone()
6275:            current_stage = current_event['EventStage'] if current_event else None
6276:
6277:            cursor.execute('''
6278:                UPDATE event SET
6279:                    Customerid=%s,
6280:                    EventName=%s,
6281:                    EventLocation=%s,
6282:                    EventStart=%s,
6283:                    EventEnd=%s,
6284:                    notes=%s,
6285:                    WaitersNeeded=%s,
6286:                    BartendersNeeded=%s,
6287:                    MaleEmployees=%s,
6288:                    FemaleEmployees=%s,
6289:                    TotalEmployees=%s,
6290:                    EventPerHourcost=%s,
6291:                    EventPerHourselling=%s,
6292:                    totalhours=%s,
6293:                    totalcost=%s,
6294:                    totalselling=%s,
6295:                    totalprofit=%s,
6296:                    EventStage=%s,
6297:                    totalshifthours=%s
6298:                WHERE EventID=%s
6299:            ''', (
6300:                Customerid,
6301:                EventName,
6302:                EventLocation,
6303:                EventStart_dt,
6304:                EventEnd_dt,
6305:                notes,
6306:                WaitersNeeded,
6307:                BartendersNeeded,
6308:                MaleEmployees,
6309:                FemaleEmployees,
6310:                TotalEmployees,
6311:                EventPerHourcost,
6312:                EventPerHourselling,
6313:                totalhours,
6314:                totalcost,
6315:                totalselling,
6316:                totalprofit,
6317:                EventStage,
6318:                totalshifthours,
6319:                event_id
6320:            ))
6321:            conn.commit()
6322:
6323:            # If event is being marked as completed, generate revenue reports
6324:            if EventStage == 'Completed' and current_stage != 'Completed':
6325:                try:
6326:                    from models.employee_revenue_report import EmployeeRevenueReport
6327:                    EmployeeRevenueReport.generate_reports_for_event(event_id)
6328:                    flash('Event marked as completed and revenue reports generated successfully!', 'success')
6329:                except Exception as e:
6330:                    flash(f'Event updated but error generating revenue reports: {str(e)}', 'warning')
6331:            else:
6332:                flash('Event updated successfully!', 'success')
6333:
6334:    except Exception as e:
6335:        flash(f'Error updating event: {str(e)}', 'error')
6336:    finally:
6337:        if 'conn' in locals():
6338:            conn.close()
6339:
6340:    return redirect(url_for('event_list'))
6341:
6342:@app.route('/shifts/create', methods=['POST'])
6343:@login_required
6344:def create_shift_unified():
6345:    """Create a new shift."""
6346:    try:
6347:        data = request.get_json()
6348:        
6349:        if not data or not data.get('event_id'):
6350:            return jsonify({'success': False, 'error': 'Event ID is required'}), 400
6351:        
6352:        conn = pymysql.connect(
6353:            host='localhost',
6354:            user='root',
6355:            password='V0sp0r0si968!',
6356:            database='sml',
6357:            cursorclass=pymysql.cursors.DictCursor
6358:        )
6359:        
6360:        with conn.cursor() as cursor:
6361:            # Insert shift
6362:            cursor.execute('''
6363:                INSERT INTO shifts (
6364:                    eventid,
6365:                    shiftname,
6366:                    shifttype,
6367:                    shiftstart,
6368:                    shiftend
6369:                ) VALUES (
6370:                    %s, %s, %s, %s, %s
6371:                )
6372:            ''', (
6373:                data.get('event_id'),
6374:                data.get('name'),
6375:                data.get('type'),
6376:                data.get('start'),
6377:                data.get('end')
6378:            ))
6379:            
6380:            shift_id = cursor.lastrowid
6381:            conn.commit()
6382:            
6383:            # Return the created shift with empty employees array
6384:            return jsonify({
6385:                'success': True,
6386:                'shift': {
6387:                    'id': shift_id,
6388:                    'name': data.get('name'),
6389:                    'type': data.get('type'),
6390:                    'start': data.get('start'),
6391:                    'end': data.get('end'),
6392:                    'employees': []  # Initialize empty employees array
6393:                }
6394:            })
6395:            
6396:    except Exception as e:
6397:        return jsonify({'success': False, 'error': str(e)}), 500
6398:    finally:
6399:        if 'conn' in locals() and conn:
6400:            conn.close()
6401:
6402:if __name__ == "__main__":
6403:    logging.info("Starting the Flask application...")
6404:    try:
6405:        app.run(debug=True)
6406:    except Exception as e:
6407:        logging.error(f"An error occurred while starting the application: {str(e)}")
6408:
